{
    "name": "qovery",
    "displayName": "Qovery",
    "description": "A Pulumi package for creating and managing qovery cloud resources.",
    "keywords": [
        "pulumi",
        "qovery",
        "category/cloud"
    ],
    "homepage": "https://www.pulumi.com",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`qovery` Terraform Provider](https://github.com/qovery/terraform-provider-qovery).",
    "repository": "https://github.com/dirien/pulumi-qovery",
    "pluginDownloadURL": "github://api.github.com/dirien/pulumi-qovery",
    "publisher": "dirien",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "compatibility": "tfbridge20",
            "rootNamespace": "ediri"
        },
        "go": {
            "importBasePath": "github.com/dirien/pulumi-qovery/sdk/go/qovery",
            "generateResourceContainerTypes": true,
            "generateExtraInputTypes": true
        },
        "java": {
            "basePackage": "io.dirien",
            "buildFiles": "",
            "gradleNexusPublishPluginVersion": "",
            "gradleTest": ""
        },
        "nodejs": {
            "packageName": "@ediri/qovery",
            "packageDescription": "A Pulumi package for creating and managing qovery cloud resources.",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/qovery/terraform-provider-qovery)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-qovery` repo](https://github.com/dirien/pulumi-qovery/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-qovery` repo](https://github.com/qovery/terraform-provider-qovery/issues).",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true
        },
        "python": {
            "packageName": "ediri_qovery",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            },
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/qovery/terraform-provider-qovery)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-qovery` repo](https://github.com/dirien/pulumi-qovery/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-qovery` repo](https://github.com/qovery/terraform-provider-qovery/issues).",
            "compatibility": "tfbridge20",
            "pyproject": {}
        }
    },
    "config": {
        "variables": {
            "token": {
                "type": "string",
                "description": "The Qovery API Token to use. This can also be specified with the `QOVERY_API_TOKEN` shell environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "QOVERY_API_TOKEN"
                    ]
                },
                "secret": true
            }
        }
    },
    "types": {
        "qovery:index/ApplicationBuiltInEnvironmentVariable:ApplicationBuiltInEnvironmentVariable": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "key",
                        "value"
                    ]
                }
            }
        },
        "qovery:index/ApplicationCustomDomain:ApplicationCustomDomain": {
            "properties": {
                "domain": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "validationDomain": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "domain"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "domain",
                        "id",
                        "status",
                        "validationDomain"
                    ]
                }
            }
        },
        "qovery:index/ApplicationEnvironmentVariable:ApplicationEnvironmentVariable": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "key",
                        "value"
                    ]
                }
            }
        },
        "qovery:index/ApplicationEnvironmentVariableAlias:ApplicationEnvironmentVariableAlias": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "key",
                        "value"
                    ]
                }
            }
        },
        "qovery:index/ApplicationEnvironmentVariableOverride:ApplicationEnvironmentVariableOverride": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "key",
                        "value"
                    ]
                }
            }
        },
        "qovery:index/ApplicationGitRepository:ApplicationGitRepository": {
            "properties": {
                "branch": {
                    "type": "string"
                },
                "gitTokenId": {
                    "type": "string"
                },
                "rootPath": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "branch",
                        "rootPath",
                        "url"
                    ]
                }
            }
        },
        "qovery:index/ApplicationHealthchecks:ApplicationHealthchecks": {
            "properties": {
                "livenessProbe": {
                    "$ref": "#/types/qovery:index/ApplicationHealthchecksLivenessProbe:ApplicationHealthchecksLivenessProbe"
                },
                "readinessProbe": {
                    "$ref": "#/types/qovery:index/ApplicationHealthchecksReadinessProbe:ApplicationHealthchecksReadinessProbe"
                }
            },
            "type": "object"
        },
        "qovery:index/ApplicationHealthchecksLivenessProbe:ApplicationHealthchecksLivenessProbe": {
            "properties": {
                "failureThreshold": {
                    "type": "integer"
                },
                "initialDelaySeconds": {
                    "type": "integer"
                },
                "periodSeconds": {
                    "type": "integer"
                },
                "successThreshold": {
                    "type": "integer"
                },
                "timeoutSeconds": {
                    "type": "integer"
                },
                "type": {
                    "$ref": "#/types/qovery:index/ApplicationHealthchecksLivenessProbeType:ApplicationHealthchecksLivenessProbeType"
                }
            },
            "type": "object",
            "required": [
                "failureThreshold",
                "initialDelaySeconds",
                "periodSeconds",
                "successThreshold",
                "timeoutSeconds",
                "type"
            ]
        },
        "qovery:index/ApplicationHealthchecksLivenessProbeType:ApplicationHealthchecksLivenessProbeType": {
            "properties": {
                "exec": {
                    "$ref": "#/types/qovery:index/ApplicationHealthchecksLivenessProbeTypeExec:ApplicationHealthchecksLivenessProbeTypeExec"
                },
                "grpc": {
                    "$ref": "#/types/qovery:index/ApplicationHealthchecksLivenessProbeTypeGrpc:ApplicationHealthchecksLivenessProbeTypeGrpc"
                },
                "http": {
                    "$ref": "#/types/qovery:index/ApplicationHealthchecksLivenessProbeTypeHttp:ApplicationHealthchecksLivenessProbeTypeHttp"
                },
                "tcp": {
                    "$ref": "#/types/qovery:index/ApplicationHealthchecksLivenessProbeTypeTcp:ApplicationHealthchecksLivenessProbeTypeTcp"
                }
            },
            "type": "object"
        },
        "qovery:index/ApplicationHealthchecksLivenessProbeTypeExec:ApplicationHealthchecksLivenessProbeTypeExec": {
            "properties": {
                "commands": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "commands"
            ]
        },
        "qovery:index/ApplicationHealthchecksLivenessProbeTypeGrpc:ApplicationHealthchecksLivenessProbeTypeGrpc": {
            "properties": {
                "port": {
                    "type": "integer"
                },
                "service": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "port"
            ]
        },
        "qovery:index/ApplicationHealthchecksLivenessProbeTypeHttp:ApplicationHealthchecksLivenessProbeTypeHttp": {
            "properties": {
                "path": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                },
                "scheme": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "port"
            ]
        },
        "qovery:index/ApplicationHealthchecksLivenessProbeTypeTcp:ApplicationHealthchecksLivenessProbeTypeTcp": {
            "properties": {
                "host": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "port"
            ]
        },
        "qovery:index/ApplicationHealthchecksReadinessProbe:ApplicationHealthchecksReadinessProbe": {
            "properties": {
                "failureThreshold": {
                    "type": "integer"
                },
                "initialDelaySeconds": {
                    "type": "integer"
                },
                "periodSeconds": {
                    "type": "integer"
                },
                "successThreshold": {
                    "type": "integer"
                },
                "timeoutSeconds": {
                    "type": "integer"
                },
                "type": {
                    "$ref": "#/types/qovery:index/ApplicationHealthchecksReadinessProbeType:ApplicationHealthchecksReadinessProbeType"
                }
            },
            "type": "object",
            "required": [
                "failureThreshold",
                "initialDelaySeconds",
                "periodSeconds",
                "successThreshold",
                "timeoutSeconds",
                "type"
            ]
        },
        "qovery:index/ApplicationHealthchecksReadinessProbeType:ApplicationHealthchecksReadinessProbeType": {
            "properties": {
                "exec": {
                    "$ref": "#/types/qovery:index/ApplicationHealthchecksReadinessProbeTypeExec:ApplicationHealthchecksReadinessProbeTypeExec"
                },
                "grpc": {
                    "$ref": "#/types/qovery:index/ApplicationHealthchecksReadinessProbeTypeGrpc:ApplicationHealthchecksReadinessProbeTypeGrpc"
                },
                "http": {
                    "$ref": "#/types/qovery:index/ApplicationHealthchecksReadinessProbeTypeHttp:ApplicationHealthchecksReadinessProbeTypeHttp"
                },
                "tcp": {
                    "$ref": "#/types/qovery:index/ApplicationHealthchecksReadinessProbeTypeTcp:ApplicationHealthchecksReadinessProbeTypeTcp"
                }
            },
            "type": "object"
        },
        "qovery:index/ApplicationHealthchecksReadinessProbeTypeExec:ApplicationHealthchecksReadinessProbeTypeExec": {
            "properties": {
                "commands": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "commands"
            ]
        },
        "qovery:index/ApplicationHealthchecksReadinessProbeTypeGrpc:ApplicationHealthchecksReadinessProbeTypeGrpc": {
            "properties": {
                "port": {
                    "type": "integer"
                },
                "service": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "port"
            ]
        },
        "qovery:index/ApplicationHealthchecksReadinessProbeTypeHttp:ApplicationHealthchecksReadinessProbeTypeHttp": {
            "properties": {
                "path": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                },
                "scheme": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "port"
            ]
        },
        "qovery:index/ApplicationHealthchecksReadinessProbeTypeTcp:ApplicationHealthchecksReadinessProbeTypeTcp": {
            "properties": {
                "host": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "port"
            ]
        },
        "qovery:index/ApplicationPort:ApplicationPort": {
            "properties": {
                "externalPort": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "internalPort": {
                    "type": "integer"
                },
                "isDefault": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "protocol": {
                    "type": "string"
                },
                "publiclyAccessible": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "internalPort",
                "isDefault",
                "publiclyAccessible"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "internalPort",
                        "isDefault",
                        "name",
                        "protocol",
                        "publiclyAccessible"
                    ]
                }
            }
        },
        "qovery:index/ApplicationSecret:ApplicationSecret": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "key",
                        "value"
                    ]
                }
            }
        },
        "qovery:index/ApplicationSecretAlias:ApplicationSecretAlias": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "key",
                        "value"
                    ]
                }
            }
        },
        "qovery:index/ApplicationSecretOverride:ApplicationSecretOverride": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "key",
                        "value"
                    ]
                }
            }
        },
        "qovery:index/ApplicationStorage:ApplicationStorage": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "mountPoint": {
                    "type": "string"
                },
                "size": {
                    "type": "integer"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "mountPoint",
                "size",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "mountPoint",
                        "size",
                        "type"
                    ]
                }
            }
        },
        "qovery:index/ClusterFeatures:ClusterFeatures": {
            "properties": {
                "staticIp": {
                    "type": "boolean"
                },
                "vpcSubnet": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "staticIp",
                        "vpcSubnet"
                    ]
                }
            }
        },
        "qovery:index/ClusterRoutingTable:ClusterRoutingTable": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "destination": {
                    "type": "string"
                },
                "target": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "description",
                "destination",
                "target"
            ]
        },
        "qovery:index/ContainerBuiltInEnvironmentVariable:ContainerBuiltInEnvironmentVariable": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "key",
                        "value"
                    ]
                }
            }
        },
        "qovery:index/ContainerCustomDomain:ContainerCustomDomain": {
            "properties": {
                "domain": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "validationDomain": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "domain"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "domain",
                        "id",
                        "status",
                        "validationDomain"
                    ]
                }
            }
        },
        "qovery:index/ContainerEnvironmentVariable:ContainerEnvironmentVariable": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "key",
                        "value"
                    ]
                }
            }
        },
        "qovery:index/ContainerEnvironmentVariableAlias:ContainerEnvironmentVariableAlias": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "key",
                        "value"
                    ]
                }
            }
        },
        "qovery:index/ContainerEnvironmentVariableOverride:ContainerEnvironmentVariableOverride": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "key",
                        "value"
                    ]
                }
            }
        },
        "qovery:index/ContainerHealthchecks:ContainerHealthchecks": {
            "properties": {
                "livenessProbe": {
                    "$ref": "#/types/qovery:index/ContainerHealthchecksLivenessProbe:ContainerHealthchecksLivenessProbe"
                },
                "readinessProbe": {
                    "$ref": "#/types/qovery:index/ContainerHealthchecksReadinessProbe:ContainerHealthchecksReadinessProbe"
                }
            },
            "type": "object"
        },
        "qovery:index/ContainerHealthchecksLivenessProbe:ContainerHealthchecksLivenessProbe": {
            "properties": {
                "failureThreshold": {
                    "type": "integer"
                },
                "initialDelaySeconds": {
                    "type": "integer"
                },
                "periodSeconds": {
                    "type": "integer"
                },
                "successThreshold": {
                    "type": "integer"
                },
                "timeoutSeconds": {
                    "type": "integer"
                },
                "type": {
                    "$ref": "#/types/qovery:index/ContainerHealthchecksLivenessProbeType:ContainerHealthchecksLivenessProbeType"
                }
            },
            "type": "object",
            "required": [
                "failureThreshold",
                "initialDelaySeconds",
                "periodSeconds",
                "successThreshold",
                "timeoutSeconds",
                "type"
            ]
        },
        "qovery:index/ContainerHealthchecksLivenessProbeType:ContainerHealthchecksLivenessProbeType": {
            "properties": {
                "exec": {
                    "$ref": "#/types/qovery:index/ContainerHealthchecksLivenessProbeTypeExec:ContainerHealthchecksLivenessProbeTypeExec"
                },
                "grpc": {
                    "$ref": "#/types/qovery:index/ContainerHealthchecksLivenessProbeTypeGrpc:ContainerHealthchecksLivenessProbeTypeGrpc"
                },
                "http": {
                    "$ref": "#/types/qovery:index/ContainerHealthchecksLivenessProbeTypeHttp:ContainerHealthchecksLivenessProbeTypeHttp"
                },
                "tcp": {
                    "$ref": "#/types/qovery:index/ContainerHealthchecksLivenessProbeTypeTcp:ContainerHealthchecksLivenessProbeTypeTcp"
                }
            },
            "type": "object"
        },
        "qovery:index/ContainerHealthchecksLivenessProbeTypeExec:ContainerHealthchecksLivenessProbeTypeExec": {
            "properties": {
                "commands": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "commands"
            ]
        },
        "qovery:index/ContainerHealthchecksLivenessProbeTypeGrpc:ContainerHealthchecksLivenessProbeTypeGrpc": {
            "properties": {
                "port": {
                    "type": "integer"
                },
                "service": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "port"
            ]
        },
        "qovery:index/ContainerHealthchecksLivenessProbeTypeHttp:ContainerHealthchecksLivenessProbeTypeHttp": {
            "properties": {
                "path": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                },
                "scheme": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "port"
            ]
        },
        "qovery:index/ContainerHealthchecksLivenessProbeTypeTcp:ContainerHealthchecksLivenessProbeTypeTcp": {
            "properties": {
                "host": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "port"
            ]
        },
        "qovery:index/ContainerHealthchecksReadinessProbe:ContainerHealthchecksReadinessProbe": {
            "properties": {
                "failureThreshold": {
                    "type": "integer"
                },
                "initialDelaySeconds": {
                    "type": "integer"
                },
                "periodSeconds": {
                    "type": "integer"
                },
                "successThreshold": {
                    "type": "integer"
                },
                "timeoutSeconds": {
                    "type": "integer"
                },
                "type": {
                    "$ref": "#/types/qovery:index/ContainerHealthchecksReadinessProbeType:ContainerHealthchecksReadinessProbeType"
                }
            },
            "type": "object",
            "required": [
                "failureThreshold",
                "initialDelaySeconds",
                "periodSeconds",
                "successThreshold",
                "timeoutSeconds",
                "type"
            ]
        },
        "qovery:index/ContainerHealthchecksReadinessProbeType:ContainerHealthchecksReadinessProbeType": {
            "properties": {
                "exec": {
                    "$ref": "#/types/qovery:index/ContainerHealthchecksReadinessProbeTypeExec:ContainerHealthchecksReadinessProbeTypeExec"
                },
                "grpc": {
                    "$ref": "#/types/qovery:index/ContainerHealthchecksReadinessProbeTypeGrpc:ContainerHealthchecksReadinessProbeTypeGrpc"
                },
                "http": {
                    "$ref": "#/types/qovery:index/ContainerHealthchecksReadinessProbeTypeHttp:ContainerHealthchecksReadinessProbeTypeHttp"
                },
                "tcp": {
                    "$ref": "#/types/qovery:index/ContainerHealthchecksReadinessProbeTypeTcp:ContainerHealthchecksReadinessProbeTypeTcp"
                }
            },
            "type": "object"
        },
        "qovery:index/ContainerHealthchecksReadinessProbeTypeExec:ContainerHealthchecksReadinessProbeTypeExec": {
            "properties": {
                "commands": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "commands"
            ]
        },
        "qovery:index/ContainerHealthchecksReadinessProbeTypeGrpc:ContainerHealthchecksReadinessProbeTypeGrpc": {
            "properties": {
                "port": {
                    "type": "integer"
                },
                "service": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "port"
            ]
        },
        "qovery:index/ContainerHealthchecksReadinessProbeTypeHttp:ContainerHealthchecksReadinessProbeTypeHttp": {
            "properties": {
                "path": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                },
                "scheme": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "port"
            ]
        },
        "qovery:index/ContainerHealthchecksReadinessProbeTypeTcp:ContainerHealthchecksReadinessProbeTypeTcp": {
            "properties": {
                "host": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "port"
            ]
        },
        "qovery:index/ContainerPort:ContainerPort": {
            "properties": {
                "externalPort": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "internalPort": {
                    "type": "integer"
                },
                "isDefault": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "protocol": {
                    "type": "string"
                },
                "publiclyAccessible": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "internalPort",
                "isDefault",
                "publiclyAccessible"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "internalPort",
                        "isDefault",
                        "name",
                        "protocol",
                        "publiclyAccessible"
                    ]
                }
            }
        },
        "qovery:index/ContainerRegistryConfig:ContainerRegistryConfig": {
            "properties": {
                "accessKeyId": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "region": {
                    "type": "string"
                },
                "scalewayAccessKey": {
                    "type": "string"
                },
                "scalewaySecretKey": {
                    "type": "string"
                },
                "secretAccessKey": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "qovery:index/ContainerSecret:ContainerSecret": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "key",
                        "value"
                    ]
                }
            }
        },
        "qovery:index/ContainerSecretAlias:ContainerSecretAlias": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "key",
                        "value"
                    ]
                }
            }
        },
        "qovery:index/ContainerSecretOverride:ContainerSecretOverride": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "key",
                        "value"
                    ]
                }
            }
        },
        "qovery:index/ContainerStorage:ContainerStorage": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "mountPoint": {
                    "type": "string"
                },
                "size": {
                    "type": "integer"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "mountPoint",
                "size",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "mountPoint",
                        "size",
                        "type"
                    ]
                }
            }
        },
        "qovery:index/EnvironmentBuiltInEnvironmentVariable:EnvironmentBuiltInEnvironmentVariable": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "key",
                        "value"
                    ]
                }
            }
        },
        "qovery:index/EnvironmentEnvironmentVariable:EnvironmentEnvironmentVariable": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "key",
                        "value"
                    ]
                }
            }
        },
        "qovery:index/EnvironmentEnvironmentVariableAlias:EnvironmentEnvironmentVariableAlias": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "key",
                        "value"
                    ]
                }
            }
        },
        "qovery:index/EnvironmentEnvironmentVariableOverride:EnvironmentEnvironmentVariableOverride": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "key",
                        "value"
                    ]
                }
            }
        },
        "qovery:index/EnvironmentSecret:EnvironmentSecret": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "key",
                        "value"
                    ]
                }
            }
        },
        "qovery:index/EnvironmentSecretAlias:EnvironmentSecretAlias": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "key",
                        "value"
                    ]
                }
            }
        },
        "qovery:index/EnvironmentSecretOverride:EnvironmentSecretOverride": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "key",
                        "value"
                    ]
                }
            }
        },
        "qovery:index/HelmBuiltInEnvironmentVariable:HelmBuiltInEnvironmentVariable": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "key",
                        "value"
                    ]
                }
            }
        },
        "qovery:index/HelmEnvironmentVariable:HelmEnvironmentVariable": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "key",
                        "value"
                    ]
                }
            }
        },
        "qovery:index/HelmEnvironmentVariableAlias:HelmEnvironmentVariableAlias": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "key",
                        "value"
                    ]
                }
            }
        },
        "qovery:index/HelmEnvironmentVariableOverride:HelmEnvironmentVariableOverride": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "key",
                        "value"
                    ]
                }
            }
        },
        "qovery:index/HelmPorts:HelmPorts": {
            "properties": {
                "externalPort": {
                    "type": "integer"
                },
                "internalPort": {
                    "type": "integer"
                },
                "isDefault": {
                    "type": "boolean"
                },
                "namespace": {
                    "type": "string"
                },
                "protocol": {
                    "type": "string"
                },
                "serviceName": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "externalPort",
                "internalPort",
                "isDefault",
                "serviceName"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "externalPort",
                        "internalPort",
                        "isDefault",
                        "protocol",
                        "serviceName"
                    ]
                }
            }
        },
        "qovery:index/HelmRepositoryConfig:HelmRepositoryConfig": {
            "properties": {
                "accessKeyId": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "region": {
                    "type": "string"
                },
                "scalewayAccessKey": {
                    "type": "string"
                },
                "scalewaySecretKey": {
                    "type": "string"
                },
                "secretAccessKey": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "qovery:index/HelmSecret:HelmSecret": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "key",
                        "value"
                    ]
                }
            }
        },
        "qovery:index/HelmSecretAlias:HelmSecretAlias": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "key",
                        "value"
                    ]
                }
            }
        },
        "qovery:index/HelmSecretOverride:HelmSecretOverride": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "key",
                        "value"
                    ]
                }
            }
        },
        "qovery:index/HelmSource:HelmSource": {
            "properties": {
                "gitRepository": {
                    "$ref": "#/types/qovery:index/HelmSourceGitRepository:HelmSourceGitRepository"
                },
                "helmRepository": {
                    "$ref": "#/types/qovery:index/HelmSourceHelmRepository:HelmSourceHelmRepository"
                }
            },
            "type": "object"
        },
        "qovery:index/HelmSourceGitRepository:HelmSourceGitRepository": {
            "properties": {
                "branch": {
                    "type": "string"
                },
                "gitTokenId": {
                    "type": "string"
                },
                "rootPath": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "branch",
                        "gitTokenId",
                        "rootPath",
                        "url"
                    ]
                }
            }
        },
        "qovery:index/HelmSourceHelmRepository:HelmSourceHelmRepository": {
            "properties": {
                "chartName": {
                    "type": "string"
                },
                "chartVersion": {
                    "type": "string"
                },
                "helmRepositoryId": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "chartName",
                "chartVersion",
                "helmRepositoryId"
            ]
        },
        "qovery:index/HelmValuesOverride:HelmValuesOverride": {
            "properties": {
                "file": {
                    "$ref": "#/types/qovery:index/HelmValuesOverrideFile:HelmValuesOverrideFile"
                },
                "set": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "setJson": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "setString": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "set",
                "setJson",
                "setString"
            ]
        },
        "qovery:index/HelmValuesOverrideFile:HelmValuesOverrideFile": {
            "properties": {
                "gitRepository": {
                    "$ref": "#/types/qovery:index/HelmValuesOverrideFileGitRepository:HelmValuesOverrideFileGitRepository"
                },
                "raw": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/qovery:index/HelmValuesOverrideFileRaw:HelmValuesOverrideFileRaw"
                    }
                }
            },
            "type": "object"
        },
        "qovery:index/HelmValuesOverrideFileGitRepository:HelmValuesOverrideFileGitRepository": {
            "properties": {
                "branch": {
                    "type": "string"
                },
                "gitTokenId": {
                    "type": "string"
                },
                "paths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "url": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "branch",
                "paths",
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "branch",
                        "gitTokenId",
                        "paths",
                        "url"
                    ]
                }
            }
        },
        "qovery:index/HelmValuesOverrideFileRaw:HelmValuesOverrideFileRaw": {
            "properties": {
                "content": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "content"
            ]
        },
        "qovery:index/JobBuiltInEnvironmentVariable:JobBuiltInEnvironmentVariable": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "key",
                        "value"
                    ]
                }
            }
        },
        "qovery:index/JobEnvironmentVariable:JobEnvironmentVariable": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "key",
                        "value"
                    ]
                }
            }
        },
        "qovery:index/JobEnvironmentVariableAlias:JobEnvironmentVariableAlias": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "key",
                        "value"
                    ]
                }
            }
        },
        "qovery:index/JobEnvironmentVariableOverride:JobEnvironmentVariableOverride": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "key",
                        "value"
                    ]
                }
            }
        },
        "qovery:index/JobHealthchecks:JobHealthchecks": {
            "properties": {
                "livenessProbe": {
                    "$ref": "#/types/qovery:index/JobHealthchecksLivenessProbe:JobHealthchecksLivenessProbe"
                },
                "readinessProbe": {
                    "$ref": "#/types/qovery:index/JobHealthchecksReadinessProbe:JobHealthchecksReadinessProbe"
                }
            },
            "type": "object"
        },
        "qovery:index/JobHealthchecksLivenessProbe:JobHealthchecksLivenessProbe": {
            "properties": {
                "failureThreshold": {
                    "type": "integer"
                },
                "initialDelaySeconds": {
                    "type": "integer"
                },
                "periodSeconds": {
                    "type": "integer"
                },
                "successThreshold": {
                    "type": "integer"
                },
                "timeoutSeconds": {
                    "type": "integer"
                },
                "type": {
                    "$ref": "#/types/qovery:index/JobHealthchecksLivenessProbeType:JobHealthchecksLivenessProbeType"
                }
            },
            "type": "object",
            "required": [
                "failureThreshold",
                "initialDelaySeconds",
                "periodSeconds",
                "successThreshold",
                "timeoutSeconds",
                "type"
            ]
        },
        "qovery:index/JobHealthchecksLivenessProbeType:JobHealthchecksLivenessProbeType": {
            "properties": {
                "exec": {
                    "$ref": "#/types/qovery:index/JobHealthchecksLivenessProbeTypeExec:JobHealthchecksLivenessProbeTypeExec"
                },
                "grpc": {
                    "$ref": "#/types/qovery:index/JobHealthchecksLivenessProbeTypeGrpc:JobHealthchecksLivenessProbeTypeGrpc"
                },
                "http": {
                    "$ref": "#/types/qovery:index/JobHealthchecksLivenessProbeTypeHttp:JobHealthchecksLivenessProbeTypeHttp"
                },
                "tcp": {
                    "$ref": "#/types/qovery:index/JobHealthchecksLivenessProbeTypeTcp:JobHealthchecksLivenessProbeTypeTcp"
                }
            },
            "type": "object"
        },
        "qovery:index/JobHealthchecksLivenessProbeTypeExec:JobHealthchecksLivenessProbeTypeExec": {
            "properties": {
                "commands": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "commands"
            ]
        },
        "qovery:index/JobHealthchecksLivenessProbeTypeGrpc:JobHealthchecksLivenessProbeTypeGrpc": {
            "properties": {
                "port": {
                    "type": "integer"
                },
                "service": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "port"
            ]
        },
        "qovery:index/JobHealthchecksLivenessProbeTypeHttp:JobHealthchecksLivenessProbeTypeHttp": {
            "properties": {
                "path": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                },
                "scheme": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "port"
            ]
        },
        "qovery:index/JobHealthchecksLivenessProbeTypeTcp:JobHealthchecksLivenessProbeTypeTcp": {
            "properties": {
                "host": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "port"
            ]
        },
        "qovery:index/JobHealthchecksReadinessProbe:JobHealthchecksReadinessProbe": {
            "properties": {
                "failureThreshold": {
                    "type": "integer"
                },
                "initialDelaySeconds": {
                    "type": "integer"
                },
                "periodSeconds": {
                    "type": "integer"
                },
                "successThreshold": {
                    "type": "integer"
                },
                "timeoutSeconds": {
                    "type": "integer"
                },
                "type": {
                    "$ref": "#/types/qovery:index/JobHealthchecksReadinessProbeType:JobHealthchecksReadinessProbeType"
                }
            },
            "type": "object",
            "required": [
                "failureThreshold",
                "initialDelaySeconds",
                "periodSeconds",
                "successThreshold",
                "timeoutSeconds",
                "type"
            ]
        },
        "qovery:index/JobHealthchecksReadinessProbeType:JobHealthchecksReadinessProbeType": {
            "properties": {
                "exec": {
                    "$ref": "#/types/qovery:index/JobHealthchecksReadinessProbeTypeExec:JobHealthchecksReadinessProbeTypeExec"
                },
                "grpc": {
                    "$ref": "#/types/qovery:index/JobHealthchecksReadinessProbeTypeGrpc:JobHealthchecksReadinessProbeTypeGrpc"
                },
                "http": {
                    "$ref": "#/types/qovery:index/JobHealthchecksReadinessProbeTypeHttp:JobHealthchecksReadinessProbeTypeHttp"
                },
                "tcp": {
                    "$ref": "#/types/qovery:index/JobHealthchecksReadinessProbeTypeTcp:JobHealthchecksReadinessProbeTypeTcp"
                }
            },
            "type": "object"
        },
        "qovery:index/JobHealthchecksReadinessProbeTypeExec:JobHealthchecksReadinessProbeTypeExec": {
            "properties": {
                "commands": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "commands"
            ]
        },
        "qovery:index/JobHealthchecksReadinessProbeTypeGrpc:JobHealthchecksReadinessProbeTypeGrpc": {
            "properties": {
                "port": {
                    "type": "integer"
                },
                "service": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "port"
            ]
        },
        "qovery:index/JobHealthchecksReadinessProbeTypeHttp:JobHealthchecksReadinessProbeTypeHttp": {
            "properties": {
                "path": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                },
                "scheme": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "port"
            ]
        },
        "qovery:index/JobHealthchecksReadinessProbeTypeTcp:JobHealthchecksReadinessProbeTypeTcp": {
            "properties": {
                "host": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "port"
            ]
        },
        "qovery:index/JobSchedule:JobSchedule": {
            "properties": {
                "cronjob": {
                    "$ref": "#/types/qovery:index/JobScheduleCronjob:JobScheduleCronjob"
                },
                "onDelete": {
                    "$ref": "#/types/qovery:index/JobScheduleOnDelete:JobScheduleOnDelete"
                },
                "onStart": {
                    "$ref": "#/types/qovery:index/JobScheduleOnStart:JobScheduleOnStart"
                },
                "onStop": {
                    "$ref": "#/types/qovery:index/JobScheduleOnStop:JobScheduleOnStop"
                }
            },
            "type": "object"
        },
        "qovery:index/JobScheduleCronjob:JobScheduleCronjob": {
            "properties": {
                "command": {
                    "$ref": "#/types/qovery:index/JobScheduleCronjobCommand:JobScheduleCronjobCommand"
                },
                "schedule": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "command",
                "schedule"
            ]
        },
        "qovery:index/JobScheduleCronjobCommand:JobScheduleCronjobCommand": {
            "properties": {
                "arguments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "entrypoint": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "arguments",
                        "entrypoint"
                    ]
                }
            }
        },
        "qovery:index/JobScheduleOnDelete:JobScheduleOnDelete": {
            "properties": {
                "arguments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "entrypoint": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "arguments",
                        "entrypoint"
                    ]
                }
            }
        },
        "qovery:index/JobScheduleOnStart:JobScheduleOnStart": {
            "properties": {
                "arguments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "entrypoint": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "arguments",
                        "entrypoint"
                    ]
                }
            }
        },
        "qovery:index/JobScheduleOnStop:JobScheduleOnStop": {
            "properties": {
                "arguments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "entrypoint": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "arguments",
                        "entrypoint"
                    ]
                }
            }
        },
        "qovery:index/JobSecret:JobSecret": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "key",
                        "value"
                    ]
                }
            }
        },
        "qovery:index/JobSecretAlias:JobSecretAlias": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "key",
                        "value"
                    ]
                }
            }
        },
        "qovery:index/JobSecretOverride:JobSecretOverride": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "key",
                        "value"
                    ]
                }
            }
        },
        "qovery:index/JobSource:JobSource": {
            "properties": {
                "docker": {
                    "$ref": "#/types/qovery:index/JobSourceDocker:JobSourceDocker"
                },
                "image": {
                    "$ref": "#/types/qovery:index/JobSourceImage:JobSourceImage"
                }
            },
            "type": "object"
        },
        "qovery:index/JobSourceDocker:JobSourceDocker": {
            "properties": {
                "dockerfilePath": {
                    "type": "string"
                },
                "gitRepository": {
                    "$ref": "#/types/qovery:index/JobSourceDockerGitRepository:JobSourceDockerGitRepository"
                }
            },
            "type": "object",
            "required": [
                "gitRepository"
            ]
        },
        "qovery:index/JobSourceDockerGitRepository:JobSourceDockerGitRepository": {
            "properties": {
                "branch": {
                    "type": "string"
                },
                "gitTokenId": {
                    "type": "string"
                },
                "rootPath": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "branch",
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "branch",
                        "rootPath",
                        "url"
                    ]
                }
            }
        },
        "qovery:index/JobSourceImage:JobSourceImage": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "registryId": {
                    "type": "string"
                },
                "tag": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "name",
                "registryId",
                "tag"
            ]
        },
        "qovery:index/ProjectBuiltInEnvironmentVariable:ProjectBuiltInEnvironmentVariable": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Id of the environment variable.\n"
                },
                "key": {
                    "type": "string",
                    "description": "Key of the environment variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the environment variable.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "key",
                        "value"
                    ]
                }
            }
        },
        "qovery:index/ProjectEnvironmentVariable:ProjectEnvironmentVariable": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Id of the environment variable.\n"
                },
                "key": {
                    "type": "string",
                    "description": "Key of the environment variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the environment variable.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "key",
                        "value"
                    ]
                }
            }
        },
        "qovery:index/ProjectEnvironmentVariableAlias:ProjectEnvironmentVariableAlias": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Id of the environment variable alias.\n"
                },
                "key": {
                    "type": "string",
                    "description": "Name of the environment variable alias.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Name of the variable to alias.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "key",
                        "value"
                    ]
                }
            }
        },
        "qovery:index/ProjectSecret:ProjectSecret": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Id of the secret.\n"
                },
                "key": {
                    "type": "string",
                    "description": "Key of the secret.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the secret.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "key",
                        "value"
                    ]
                }
            }
        },
        "qovery:index/ProjectSecretAlias:ProjectSecretAlias": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Id of the secret alias.\n"
                },
                "key": {
                    "type": "string",
                    "description": "Name of the secret alias.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Name of the secret to alias.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "key",
                        "value"
                    ]
                }
            }
        },
        "qovery:index/getApplicationBuiltInEnvironmentVariable:getApplicationBuiltInEnvironmentVariable": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "qovery:index/getApplicationCustomDomain:getApplicationCustomDomain": {
            "properties": {
                "domain": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "validationDomain": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "domain",
                "id",
                "status",
                "validationDomain"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "qovery:index/getApplicationEnvironmentVariable:getApplicationEnvironmentVariable": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "qovery:index/getApplicationEnvironmentVariableAlias:getApplicationEnvironmentVariableAlias": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "qovery:index/getApplicationEnvironmentVariableOverride:getApplicationEnvironmentVariableOverride": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "qovery:index/getApplicationGitRepository:getApplicationGitRepository": {
            "properties": {
                "branch": {
                    "type": "string"
                },
                "gitTokenId": {
                    "type": "string"
                },
                "rootPath": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "branch",
                "gitTokenId",
                "rootPath",
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "qovery:index/getApplicationHealthchecks:getApplicationHealthchecks": {
            "properties": {
                "livenessProbe": {
                    "$ref": "#/types/qovery:index/getApplicationHealthchecksLivenessProbe:getApplicationHealthchecksLivenessProbe"
                },
                "readinessProbe": {
                    "$ref": "#/types/qovery:index/getApplicationHealthchecksReadinessProbe:getApplicationHealthchecksReadinessProbe"
                }
            },
            "type": "object"
        },
        "qovery:index/getApplicationHealthchecksLivenessProbe:getApplicationHealthchecksLivenessProbe": {
            "properties": {
                "failureThreshold": {
                    "type": "integer"
                },
                "initialDelaySeconds": {
                    "type": "integer"
                },
                "periodSeconds": {
                    "type": "integer"
                },
                "successThreshold": {
                    "type": "integer"
                },
                "timeoutSeconds": {
                    "type": "integer"
                },
                "type": {
                    "$ref": "#/types/qovery:index/getApplicationHealthchecksLivenessProbeType:getApplicationHealthchecksLivenessProbeType"
                }
            },
            "type": "object",
            "required": [
                "failureThreshold",
                "initialDelaySeconds",
                "periodSeconds",
                "successThreshold",
                "timeoutSeconds",
                "type"
            ]
        },
        "qovery:index/getApplicationHealthchecksLivenessProbeType:getApplicationHealthchecksLivenessProbeType": {
            "properties": {
                "exec": {
                    "$ref": "#/types/qovery:index/getApplicationHealthchecksLivenessProbeTypeExec:getApplicationHealthchecksLivenessProbeTypeExec"
                },
                "grpc": {
                    "$ref": "#/types/qovery:index/getApplicationHealthchecksLivenessProbeTypeGrpc:getApplicationHealthchecksLivenessProbeTypeGrpc"
                },
                "http": {
                    "$ref": "#/types/qovery:index/getApplicationHealthchecksLivenessProbeTypeHttp:getApplicationHealthchecksLivenessProbeTypeHttp"
                },
                "tcp": {
                    "$ref": "#/types/qovery:index/getApplicationHealthchecksLivenessProbeTypeTcp:getApplicationHealthchecksLivenessProbeTypeTcp"
                }
            },
            "type": "object"
        },
        "qovery:index/getApplicationHealthchecksLivenessProbeTypeExec:getApplicationHealthchecksLivenessProbeTypeExec": {
            "properties": {
                "commands": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "commands"
            ]
        },
        "qovery:index/getApplicationHealthchecksLivenessProbeTypeGrpc:getApplicationHealthchecksLivenessProbeTypeGrpc": {
            "properties": {
                "port": {
                    "type": "integer"
                },
                "service": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "port"
            ]
        },
        "qovery:index/getApplicationHealthchecksLivenessProbeTypeHttp:getApplicationHealthchecksLivenessProbeTypeHttp": {
            "properties": {
                "path": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                },
                "scheme": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "port"
            ]
        },
        "qovery:index/getApplicationHealthchecksLivenessProbeTypeTcp:getApplicationHealthchecksLivenessProbeTypeTcp": {
            "properties": {
                "host": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "port"
            ]
        },
        "qovery:index/getApplicationHealthchecksReadinessProbe:getApplicationHealthchecksReadinessProbe": {
            "properties": {
                "failureThreshold": {
                    "type": "integer"
                },
                "initialDelaySeconds": {
                    "type": "integer"
                },
                "periodSeconds": {
                    "type": "integer"
                },
                "successThreshold": {
                    "type": "integer"
                },
                "timeoutSeconds": {
                    "type": "integer"
                },
                "type": {
                    "$ref": "#/types/qovery:index/getApplicationHealthchecksReadinessProbeType:getApplicationHealthchecksReadinessProbeType"
                }
            },
            "type": "object",
            "required": [
                "failureThreshold",
                "initialDelaySeconds",
                "periodSeconds",
                "successThreshold",
                "timeoutSeconds",
                "type"
            ]
        },
        "qovery:index/getApplicationHealthchecksReadinessProbeType:getApplicationHealthchecksReadinessProbeType": {
            "properties": {
                "exec": {
                    "$ref": "#/types/qovery:index/getApplicationHealthchecksReadinessProbeTypeExec:getApplicationHealthchecksReadinessProbeTypeExec"
                },
                "grpc": {
                    "$ref": "#/types/qovery:index/getApplicationHealthchecksReadinessProbeTypeGrpc:getApplicationHealthchecksReadinessProbeTypeGrpc"
                },
                "http": {
                    "$ref": "#/types/qovery:index/getApplicationHealthchecksReadinessProbeTypeHttp:getApplicationHealthchecksReadinessProbeTypeHttp"
                },
                "tcp": {
                    "$ref": "#/types/qovery:index/getApplicationHealthchecksReadinessProbeTypeTcp:getApplicationHealthchecksReadinessProbeTypeTcp"
                }
            },
            "type": "object"
        },
        "qovery:index/getApplicationHealthchecksReadinessProbeTypeExec:getApplicationHealthchecksReadinessProbeTypeExec": {
            "properties": {
                "commands": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "commands"
            ]
        },
        "qovery:index/getApplicationHealthchecksReadinessProbeTypeGrpc:getApplicationHealthchecksReadinessProbeTypeGrpc": {
            "properties": {
                "port": {
                    "type": "integer"
                },
                "service": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "port"
            ]
        },
        "qovery:index/getApplicationHealthchecksReadinessProbeTypeHttp:getApplicationHealthchecksReadinessProbeTypeHttp": {
            "properties": {
                "path": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                },
                "scheme": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "port"
            ]
        },
        "qovery:index/getApplicationHealthchecksReadinessProbeTypeTcp:getApplicationHealthchecksReadinessProbeTypeTcp": {
            "properties": {
                "host": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "port"
            ]
        },
        "qovery:index/getApplicationPort:getApplicationPort": {
            "properties": {
                "externalPort": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "internalPort": {
                    "type": "integer"
                },
                "isDefault": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "protocol": {
                    "type": "string"
                },
                "publiclyAccessible": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "externalPort",
                "id",
                "internalPort",
                "isDefault",
                "name",
                "protocol",
                "publiclyAccessible"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "qovery:index/getApplicationSecret:getApplicationSecret": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "id",
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "qovery:index/getApplicationSecretAlias:getApplicationSecretAlias": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "qovery:index/getApplicationSecretOverride:getApplicationSecretOverride": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "id",
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "qovery:index/getApplicationStorage:getApplicationStorage": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "mountPoint": {
                    "type": "string"
                },
                "size": {
                    "type": "integer"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "mountPoint",
                "size",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "qovery:index/getClusterFeatures:getClusterFeatures": {
            "properties": {
                "staticIp": {
                    "type": "boolean"
                },
                "vpcSubnet": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "staticIp",
                "vpcSubnet"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "qovery:index/getClusterRoutingTable:getClusterRoutingTable": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "destination": {
                    "type": "string"
                },
                "target": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "description",
                "destination",
                "target"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "qovery:index/getContainerBuiltInEnvironmentVariable:getContainerBuiltInEnvironmentVariable": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "qovery:index/getContainerCustomDomain:getContainerCustomDomain": {
            "properties": {
                "domain": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "validationDomain": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "domain",
                "id",
                "status",
                "validationDomain"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "qovery:index/getContainerEnvironmentVariable:getContainerEnvironmentVariable": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "qovery:index/getContainerEnvironmentVariableAlias:getContainerEnvironmentVariableAlias": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "qovery:index/getContainerEnvironmentVariableOverride:getContainerEnvironmentVariableOverride": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "qovery:index/getContainerHealthchecks:getContainerHealthchecks": {
            "properties": {
                "livenessProbe": {
                    "$ref": "#/types/qovery:index/getContainerHealthchecksLivenessProbe:getContainerHealthchecksLivenessProbe"
                },
                "readinessProbe": {
                    "$ref": "#/types/qovery:index/getContainerHealthchecksReadinessProbe:getContainerHealthchecksReadinessProbe"
                }
            },
            "type": "object"
        },
        "qovery:index/getContainerHealthchecksLivenessProbe:getContainerHealthchecksLivenessProbe": {
            "properties": {
                "failureThreshold": {
                    "type": "integer"
                },
                "initialDelaySeconds": {
                    "type": "integer"
                },
                "periodSeconds": {
                    "type": "integer"
                },
                "successThreshold": {
                    "type": "integer"
                },
                "timeoutSeconds": {
                    "type": "integer"
                },
                "type": {
                    "$ref": "#/types/qovery:index/getContainerHealthchecksLivenessProbeType:getContainerHealthchecksLivenessProbeType"
                }
            },
            "type": "object",
            "required": [
                "failureThreshold",
                "initialDelaySeconds",
                "periodSeconds",
                "successThreshold",
                "timeoutSeconds",
                "type"
            ]
        },
        "qovery:index/getContainerHealthchecksLivenessProbeType:getContainerHealthchecksLivenessProbeType": {
            "properties": {
                "exec": {
                    "$ref": "#/types/qovery:index/getContainerHealthchecksLivenessProbeTypeExec:getContainerHealthchecksLivenessProbeTypeExec"
                },
                "grpc": {
                    "$ref": "#/types/qovery:index/getContainerHealthchecksLivenessProbeTypeGrpc:getContainerHealthchecksLivenessProbeTypeGrpc"
                },
                "http": {
                    "$ref": "#/types/qovery:index/getContainerHealthchecksLivenessProbeTypeHttp:getContainerHealthchecksLivenessProbeTypeHttp"
                },
                "tcp": {
                    "$ref": "#/types/qovery:index/getContainerHealthchecksLivenessProbeTypeTcp:getContainerHealthchecksLivenessProbeTypeTcp"
                }
            },
            "type": "object"
        },
        "qovery:index/getContainerHealthchecksLivenessProbeTypeExec:getContainerHealthchecksLivenessProbeTypeExec": {
            "properties": {
                "commands": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "commands"
            ]
        },
        "qovery:index/getContainerHealthchecksLivenessProbeTypeGrpc:getContainerHealthchecksLivenessProbeTypeGrpc": {
            "properties": {
                "port": {
                    "type": "integer"
                },
                "service": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "port"
            ]
        },
        "qovery:index/getContainerHealthchecksLivenessProbeTypeHttp:getContainerHealthchecksLivenessProbeTypeHttp": {
            "properties": {
                "path": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                },
                "scheme": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "port"
            ]
        },
        "qovery:index/getContainerHealthchecksLivenessProbeTypeTcp:getContainerHealthchecksLivenessProbeTypeTcp": {
            "properties": {
                "host": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "port"
            ]
        },
        "qovery:index/getContainerHealthchecksReadinessProbe:getContainerHealthchecksReadinessProbe": {
            "properties": {
                "failureThreshold": {
                    "type": "integer"
                },
                "initialDelaySeconds": {
                    "type": "integer"
                },
                "periodSeconds": {
                    "type": "integer"
                },
                "successThreshold": {
                    "type": "integer"
                },
                "timeoutSeconds": {
                    "type": "integer"
                },
                "type": {
                    "$ref": "#/types/qovery:index/getContainerHealthchecksReadinessProbeType:getContainerHealthchecksReadinessProbeType"
                }
            },
            "type": "object",
            "required": [
                "failureThreshold",
                "initialDelaySeconds",
                "periodSeconds",
                "successThreshold",
                "timeoutSeconds",
                "type"
            ]
        },
        "qovery:index/getContainerHealthchecksReadinessProbeType:getContainerHealthchecksReadinessProbeType": {
            "properties": {
                "exec": {
                    "$ref": "#/types/qovery:index/getContainerHealthchecksReadinessProbeTypeExec:getContainerHealthchecksReadinessProbeTypeExec"
                },
                "grpc": {
                    "$ref": "#/types/qovery:index/getContainerHealthchecksReadinessProbeTypeGrpc:getContainerHealthchecksReadinessProbeTypeGrpc"
                },
                "http": {
                    "$ref": "#/types/qovery:index/getContainerHealthchecksReadinessProbeTypeHttp:getContainerHealthchecksReadinessProbeTypeHttp"
                },
                "tcp": {
                    "$ref": "#/types/qovery:index/getContainerHealthchecksReadinessProbeTypeTcp:getContainerHealthchecksReadinessProbeTypeTcp"
                }
            },
            "type": "object"
        },
        "qovery:index/getContainerHealthchecksReadinessProbeTypeExec:getContainerHealthchecksReadinessProbeTypeExec": {
            "properties": {
                "commands": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "commands"
            ]
        },
        "qovery:index/getContainerHealthchecksReadinessProbeTypeGrpc:getContainerHealthchecksReadinessProbeTypeGrpc": {
            "properties": {
                "port": {
                    "type": "integer"
                },
                "service": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "port"
            ]
        },
        "qovery:index/getContainerHealthchecksReadinessProbeTypeHttp:getContainerHealthchecksReadinessProbeTypeHttp": {
            "properties": {
                "path": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                },
                "scheme": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "port"
            ]
        },
        "qovery:index/getContainerHealthchecksReadinessProbeTypeTcp:getContainerHealthchecksReadinessProbeTypeTcp": {
            "properties": {
                "host": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "port"
            ]
        },
        "qovery:index/getContainerPort:getContainerPort": {
            "properties": {
                "externalPort": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "internalPort": {
                    "type": "integer"
                },
                "isDefault": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "protocol": {
                    "type": "string"
                },
                "publiclyAccessible": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "externalPort",
                "id",
                "internalPort",
                "isDefault",
                "name",
                "protocol",
                "publiclyAccessible"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "qovery:index/getContainerSecret:getContainerSecret": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "id",
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "qovery:index/getContainerSecretAlias:getContainerSecretAlias": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "qovery:index/getContainerSecretOverride:getContainerSecretOverride": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "id",
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "qovery:index/getContainerStorage:getContainerStorage": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "mountPoint": {
                    "type": "string"
                },
                "size": {
                    "type": "integer"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "mountPoint",
                "size",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "qovery:index/getEnvironmentBuiltInEnvironmentVariable:getEnvironmentBuiltInEnvironmentVariable": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "qovery:index/getEnvironmentEnvironmentVariable:getEnvironmentEnvironmentVariable": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "qovery:index/getEnvironmentEnvironmentVariableAlias:getEnvironmentEnvironmentVariableAlias": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "qovery:index/getEnvironmentEnvironmentVariableOverride:getEnvironmentEnvironmentVariableOverride": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "qovery:index/getEnvironmentSecret:getEnvironmentSecret": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "id",
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "qovery:index/getEnvironmentSecretAlias:getEnvironmentSecretAlias": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "qovery:index/getEnvironmentSecretOverride:getEnvironmentSecretOverride": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "id",
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "qovery:index/getHelmBuiltInEnvironmentVariable:getHelmBuiltInEnvironmentVariable": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "qovery:index/getHelmEnvironmentVariable:getHelmEnvironmentVariable": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "qovery:index/getHelmEnvironmentVariableAlias:getHelmEnvironmentVariableAlias": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "qovery:index/getHelmEnvironmentVariableOverride:getHelmEnvironmentVariableOverride": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "qovery:index/getHelmSecret:getHelmSecret": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "id",
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "qovery:index/getHelmSecretAlias:getHelmSecretAlias": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "qovery:index/getHelmSecretOverride:getHelmSecretOverride": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "id",
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "qovery:index/getJobBuiltInEnvironmentVariable:getJobBuiltInEnvironmentVariable": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "qovery:index/getJobEnvironmentVariable:getJobEnvironmentVariable": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "qovery:index/getJobEnvironmentVariableAlias:getJobEnvironmentVariableAlias": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "qovery:index/getJobEnvironmentVariableOverride:getJobEnvironmentVariableOverride": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "qovery:index/getJobHealthchecks:getJobHealthchecks": {
            "properties": {
                "livenessProbe": {
                    "$ref": "#/types/qovery:index/getJobHealthchecksLivenessProbe:getJobHealthchecksLivenessProbe"
                },
                "readinessProbe": {
                    "$ref": "#/types/qovery:index/getJobHealthchecksReadinessProbe:getJobHealthchecksReadinessProbe"
                }
            },
            "type": "object"
        },
        "qovery:index/getJobHealthchecksLivenessProbe:getJobHealthchecksLivenessProbe": {
            "properties": {
                "failureThreshold": {
                    "type": "integer"
                },
                "initialDelaySeconds": {
                    "type": "integer"
                },
                "periodSeconds": {
                    "type": "integer"
                },
                "successThreshold": {
                    "type": "integer"
                },
                "timeoutSeconds": {
                    "type": "integer"
                },
                "type": {
                    "$ref": "#/types/qovery:index/getJobHealthchecksLivenessProbeType:getJobHealthchecksLivenessProbeType"
                }
            },
            "type": "object",
            "required": [
                "failureThreshold",
                "initialDelaySeconds",
                "periodSeconds",
                "successThreshold",
                "timeoutSeconds",
                "type"
            ]
        },
        "qovery:index/getJobHealthchecksLivenessProbeType:getJobHealthchecksLivenessProbeType": {
            "properties": {
                "exec": {
                    "$ref": "#/types/qovery:index/getJobHealthchecksLivenessProbeTypeExec:getJobHealthchecksLivenessProbeTypeExec"
                },
                "grpc": {
                    "$ref": "#/types/qovery:index/getJobHealthchecksLivenessProbeTypeGrpc:getJobHealthchecksLivenessProbeTypeGrpc"
                },
                "http": {
                    "$ref": "#/types/qovery:index/getJobHealthchecksLivenessProbeTypeHttp:getJobHealthchecksLivenessProbeTypeHttp"
                },
                "tcp": {
                    "$ref": "#/types/qovery:index/getJobHealthchecksLivenessProbeTypeTcp:getJobHealthchecksLivenessProbeTypeTcp"
                }
            },
            "type": "object"
        },
        "qovery:index/getJobHealthchecksLivenessProbeTypeExec:getJobHealthchecksLivenessProbeTypeExec": {
            "properties": {
                "commands": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "commands"
            ]
        },
        "qovery:index/getJobHealthchecksLivenessProbeTypeGrpc:getJobHealthchecksLivenessProbeTypeGrpc": {
            "properties": {
                "port": {
                    "type": "integer"
                },
                "service": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "port"
            ]
        },
        "qovery:index/getJobHealthchecksLivenessProbeTypeHttp:getJobHealthchecksLivenessProbeTypeHttp": {
            "properties": {
                "path": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                },
                "scheme": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "port"
            ]
        },
        "qovery:index/getJobHealthchecksLivenessProbeTypeTcp:getJobHealthchecksLivenessProbeTypeTcp": {
            "properties": {
                "host": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "port"
            ]
        },
        "qovery:index/getJobHealthchecksReadinessProbe:getJobHealthchecksReadinessProbe": {
            "properties": {
                "failureThreshold": {
                    "type": "integer"
                },
                "initialDelaySeconds": {
                    "type": "integer"
                },
                "periodSeconds": {
                    "type": "integer"
                },
                "successThreshold": {
                    "type": "integer"
                },
                "timeoutSeconds": {
                    "type": "integer"
                },
                "type": {
                    "$ref": "#/types/qovery:index/getJobHealthchecksReadinessProbeType:getJobHealthchecksReadinessProbeType"
                }
            },
            "type": "object",
            "required": [
                "failureThreshold",
                "initialDelaySeconds",
                "periodSeconds",
                "successThreshold",
                "timeoutSeconds",
                "type"
            ]
        },
        "qovery:index/getJobHealthchecksReadinessProbeType:getJobHealthchecksReadinessProbeType": {
            "properties": {
                "exec": {
                    "$ref": "#/types/qovery:index/getJobHealthchecksReadinessProbeTypeExec:getJobHealthchecksReadinessProbeTypeExec"
                },
                "grpc": {
                    "$ref": "#/types/qovery:index/getJobHealthchecksReadinessProbeTypeGrpc:getJobHealthchecksReadinessProbeTypeGrpc"
                },
                "http": {
                    "$ref": "#/types/qovery:index/getJobHealthchecksReadinessProbeTypeHttp:getJobHealthchecksReadinessProbeTypeHttp"
                },
                "tcp": {
                    "$ref": "#/types/qovery:index/getJobHealthchecksReadinessProbeTypeTcp:getJobHealthchecksReadinessProbeTypeTcp"
                }
            },
            "type": "object"
        },
        "qovery:index/getJobHealthchecksReadinessProbeTypeExec:getJobHealthchecksReadinessProbeTypeExec": {
            "properties": {
                "commands": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "commands"
            ]
        },
        "qovery:index/getJobHealthchecksReadinessProbeTypeGrpc:getJobHealthchecksReadinessProbeTypeGrpc": {
            "properties": {
                "port": {
                    "type": "integer"
                },
                "service": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "port"
            ]
        },
        "qovery:index/getJobHealthchecksReadinessProbeTypeHttp:getJobHealthchecksReadinessProbeTypeHttp": {
            "properties": {
                "path": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                },
                "scheme": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "port"
            ]
        },
        "qovery:index/getJobHealthchecksReadinessProbeTypeTcp:getJobHealthchecksReadinessProbeTypeTcp": {
            "properties": {
                "host": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "port"
            ]
        },
        "qovery:index/getJobSchedule:getJobSchedule": {
            "properties": {
                "cronjob": {
                    "$ref": "#/types/qovery:index/getJobScheduleCronjob:getJobScheduleCronjob"
                },
                "onDelete": {
                    "$ref": "#/types/qovery:index/getJobScheduleOnDelete:getJobScheduleOnDelete"
                },
                "onStart": {
                    "$ref": "#/types/qovery:index/getJobScheduleOnStart:getJobScheduleOnStart"
                },
                "onStop": {
                    "$ref": "#/types/qovery:index/getJobScheduleOnStop:getJobScheduleOnStop"
                }
            },
            "type": "object",
            "required": [
                "cronjob",
                "onDelete",
                "onStart",
                "onStop"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "qovery:index/getJobScheduleCronjob:getJobScheduleCronjob": {
            "properties": {
                "command": {
                    "$ref": "#/types/qovery:index/getJobScheduleCronjobCommand:getJobScheduleCronjobCommand"
                },
                "schedule": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "command",
                "schedule"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "qovery:index/getJobScheduleCronjobCommand:getJobScheduleCronjobCommand": {
            "properties": {
                "arguments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "entrypoint": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "arguments",
                "entrypoint"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "qovery:index/getJobScheduleOnDelete:getJobScheduleOnDelete": {
            "properties": {
                "arguments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "entrypoint": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "arguments",
                "entrypoint"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "qovery:index/getJobScheduleOnStart:getJobScheduleOnStart": {
            "properties": {
                "arguments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "entrypoint": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "entrypoint"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "qovery:index/getJobScheduleOnStop:getJobScheduleOnStop": {
            "properties": {
                "arguments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "entrypoint": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "entrypoint"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "qovery:index/getJobSecret:getJobSecret": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "id",
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "qovery:index/getJobSecretAlias:getJobSecretAlias": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "qovery:index/getJobSecretOverride:getJobSecretOverride": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "id",
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "qovery:index/getJobSource:getJobSource": {
            "properties": {
                "docker": {
                    "$ref": "#/types/qovery:index/getJobSourceDocker:getJobSourceDocker"
                },
                "image": {
                    "$ref": "#/types/qovery:index/getJobSourceImage:getJobSourceImage"
                }
            },
            "type": "object",
            "required": [
                "docker",
                "image"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "qovery:index/getJobSourceDocker:getJobSourceDocker": {
            "properties": {
                "dockerfilePath": {
                    "type": "string"
                },
                "gitRepository": {
                    "$ref": "#/types/qovery:index/getJobSourceDockerGitRepository:getJobSourceDockerGitRepository"
                }
            },
            "type": "object",
            "required": [
                "gitRepository"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "qovery:index/getJobSourceDockerGitRepository:getJobSourceDockerGitRepository": {
            "properties": {
                "branch": {
                    "type": "string"
                },
                "gitTokenId": {
                    "type": "string"
                },
                "rootPath": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "branch",
                "rootPath",
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "qovery:index/getJobSourceImage:getJobSourceImage": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "registryId": {
                    "type": "string"
                },
                "tag": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "name",
                "registryId",
                "tag"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "qovery:index/getProjectBuiltInEnvironmentVariable:getProjectBuiltInEnvironmentVariable": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Id of the environment variable.\n"
                },
                "key": {
                    "type": "string",
                    "description": "Key of the environment variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the environment variable.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "qovery:index/getProjectEnvironmentVariable:getProjectEnvironmentVariable": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Id of the environment variable.\n"
                },
                "key": {
                    "type": "string",
                    "description": "Key of the environment variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the environment variable.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "qovery:index/getProjectEnvironmentVariableAlias:getProjectEnvironmentVariableAlias": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Id of the environment variable alias.\n"
                },
                "key": {
                    "type": "string",
                    "description": "Name of the environment variable alias.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Name of the variable to alias.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "qovery:index/getProjectSecret:getProjectSecret": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Id of the secret.\n"
                },
                "key": {
                    "type": "string",
                    "description": "Key of the secret.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the secret.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "id",
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "qovery:index/getProjectSecretAlias:getProjectSecretAlias": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Id of the secret alias.\n"
                },
                "key": {
                    "type": "string",
                    "description": "Name of the secret alias.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Name of the secret to alias.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the qovery package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "token": {
                "type": "string",
                "description": "The Qovery API Token to use. This can also be specified with the `QOVERY_API_TOKEN` shell environment variable.\n",
                "secret": true
            }
        },
        "inputProperties": {
            "token": {
                "type": "string",
                "description": "The Qovery API Token to use. This can also be specified with the `QOVERY_API_TOKEN` shell environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "QOVERY_API_TOKEN"
                    ]
                },
                "secret": true
            }
        }
    },
    "resources": {
        "qovery:index/application:Application": {
            "description": "\n\n\n## Import\n\n\n\n```sh\n $ pulumi import qovery:index/application:Application my_application \"\u003capplication_id\u003e\"\n```\n\n ",
            "properties": {
                "advancedSettingsJson": {
                    "type": "string",
                    "description": "Advanced settings.\n"
                },
                "arguments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of arguments of this application.\n"
                },
                "autoDeploy": {
                    "type": "boolean",
                    "description": "Specify if the application will be automatically updated after receiving a new image tag.\n"
                },
                "autoPreview": {
                    "type": "boolean",
                    "description": "Specify if the environment preview option is activated or not for this application. - Default: `false`.\n"
                },
                "buildMode": {
                    "type": "string",
                    "description": "Build Mode of the application. - Can be: `BUILDPACKS`, `DOCKER`. - Default: `BUILDPACKS`.\n"
                },
                "buildpackLanguage": {
                    "type": "string",
                    "description": "Buildpack Language framework. - Required if: `build_mode=\"BUILDPACKS\"`. - Can be: `CLOJURE`, `GO`, `GRADLE`, `GRAILS`,\n`JAVA`, `JVM`, `NODE_JS`, `PHP`, `PLAY`, `PYTHON`, `SCALA`.\n"
                },
                "builtInEnvironmentVariables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/qovery:index/ApplicationBuiltInEnvironmentVariable:ApplicationBuiltInEnvironmentVariable"
                    },
                    "description": "List of built-in environment variables linked to this application.\n"
                },
                "cpu": {
                    "type": "integer",
                    "description": "CPU of the application in millicores (m) [1000m = 1 CPU]. - Must be: `\u003e= 10`. - Default: `500`.\n"
                },
                "customDomains": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/qovery:index/ApplicationCustomDomain:ApplicationCustomDomain"
                    },
                    "description": "List of custom domains linked to this application.\n"
                },
                "deploymentStageId": {
                    "type": "string",
                    "description": "Id of the deployment stage.\n"
                },
                "dockerfilePath": {
                    "type": "string",
                    "description": "Dockerfile Path of the application. - Required if: `build_mode=\"DOCKER\"`.\n"
                },
                "entrypoint": {
                    "type": "string",
                    "description": "Entrypoint of the application.\n"
                },
                "environmentId": {
                    "type": "string",
                    "description": "Id of the environment.\n"
                },
                "environmentVariableAliases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/qovery:index/ApplicationEnvironmentVariableAlias:ApplicationEnvironmentVariableAlias"
                    },
                    "description": "List of environment variable aliases linked to this application.\n"
                },
                "environmentVariableOverrides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/qovery:index/ApplicationEnvironmentVariableOverride:ApplicationEnvironmentVariableOverride"
                    },
                    "description": "List of environment variable overrides linked to this application.\n"
                },
                "environmentVariables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/qovery:index/ApplicationEnvironmentVariable:ApplicationEnvironmentVariable"
                    },
                    "description": "List of environment variables linked to this application.\n"
                },
                "externalHost": {
                    "type": "string",
                    "description": "The application external FQDN host [NOTE: only if your application is using a publicly accessible port].\n"
                },
                "gitRepository": {
                    "$ref": "#/types/qovery:index/ApplicationGitRepository:ApplicationGitRepository",
                    "description": "Git repository of the application.\n"
                },
                "healthchecks": {
                    "$ref": "#/types/qovery:index/ApplicationHealthchecks:ApplicationHealthchecks",
                    "description": "Configuration for the healthchecks that are going to be executed against your service\n"
                },
                "internalHost": {
                    "type": "string",
                    "description": "The application internal host.\n"
                },
                "maxRunningInstances": {
                    "type": "integer",
                    "description": "Maximum number of instances running for the application. - Must be: `\u003e= -1`. - Default: `1`.\n"
                },
                "memory": {
                    "type": "integer",
                    "description": "RAM of the application in MB [1024MB = 1GB]. - Must be: `\u003e= 1`. - Default: `512`.\n"
                },
                "minRunningInstances": {
                    "type": "integer",
                    "description": "Minimum number of instances running for the application. - Must be: `\u003e= 0`. - Default: `1`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the application.\n"
                },
                "ports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/qovery:index/ApplicationPort:ApplicationPort"
                    },
                    "description": "List of ports linked to this application.\n"
                },
                "secretAliases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/qovery:index/ApplicationSecretAlias:ApplicationSecretAlias"
                    },
                    "description": "List of secret aliases linked to this application.\n"
                },
                "secretOverrides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/qovery:index/ApplicationSecretOverride:ApplicationSecretOverride"
                    },
                    "description": "List of secret overrides linked to this application.\n"
                },
                "secrets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/qovery:index/ApplicationSecret:ApplicationSecret"
                    },
                    "description": "List of secrets linked to this application.\n"
                },
                "storages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/qovery:index/ApplicationStorage:ApplicationStorage"
                    },
                    "description": "List of storages linked to this application.\n"
                }
            },
            "required": [
                "advancedSettingsJson",
                "arguments",
                "autoDeploy",
                "autoPreview",
                "buildMode",
                "builtInEnvironmentVariables",
                "cpu",
                "deploymentStageId",
                "environmentId",
                "externalHost",
                "gitRepository",
                "healthchecks",
                "internalHost",
                "maxRunningInstances",
                "memory",
                "minRunningInstances",
                "name"
            ],
            "inputProperties": {
                "advancedSettingsJson": {
                    "type": "string",
                    "description": "Advanced settings.\n"
                },
                "arguments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of arguments of this application.\n"
                },
                "autoDeploy": {
                    "type": "boolean",
                    "description": "Specify if the application will be automatically updated after receiving a new image tag.\n"
                },
                "autoPreview": {
                    "type": "boolean",
                    "description": "Specify if the environment preview option is activated or not for this application. - Default: `false`.\n"
                },
                "buildMode": {
                    "type": "string",
                    "description": "Build Mode of the application. - Can be: `BUILDPACKS`, `DOCKER`. - Default: `BUILDPACKS`.\n"
                },
                "buildpackLanguage": {
                    "type": "string",
                    "description": "Buildpack Language framework. - Required if: `build_mode=\"BUILDPACKS\"`. - Can be: `CLOJURE`, `GO`, `GRADLE`, `GRAILS`,\n`JAVA`, `JVM`, `NODE_JS`, `PHP`, `PLAY`, `PYTHON`, `SCALA`.\n"
                },
                "cpu": {
                    "type": "integer",
                    "description": "CPU of the application in millicores (m) [1000m = 1 CPU]. - Must be: `\u003e= 10`. - Default: `500`.\n"
                },
                "customDomains": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/qovery:index/ApplicationCustomDomain:ApplicationCustomDomain"
                    },
                    "description": "List of custom domains linked to this application.\n"
                },
                "deploymentStageId": {
                    "type": "string",
                    "description": "Id of the deployment stage.\n"
                },
                "dockerfilePath": {
                    "type": "string",
                    "description": "Dockerfile Path of the application. - Required if: `build_mode=\"DOCKER\"`.\n"
                },
                "entrypoint": {
                    "type": "string",
                    "description": "Entrypoint of the application.\n"
                },
                "environmentId": {
                    "type": "string",
                    "description": "Id of the environment.\n"
                },
                "environmentVariableAliases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/qovery:index/ApplicationEnvironmentVariableAlias:ApplicationEnvironmentVariableAlias"
                    },
                    "description": "List of environment variable aliases linked to this application.\n"
                },
                "environmentVariableOverrides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/qovery:index/ApplicationEnvironmentVariableOverride:ApplicationEnvironmentVariableOverride"
                    },
                    "description": "List of environment variable overrides linked to this application.\n"
                },
                "environmentVariables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/qovery:index/ApplicationEnvironmentVariable:ApplicationEnvironmentVariable"
                    },
                    "description": "List of environment variables linked to this application.\n"
                },
                "gitRepository": {
                    "$ref": "#/types/qovery:index/ApplicationGitRepository:ApplicationGitRepository",
                    "description": "Git repository of the application.\n"
                },
                "healthchecks": {
                    "$ref": "#/types/qovery:index/ApplicationHealthchecks:ApplicationHealthchecks",
                    "description": "Configuration for the healthchecks that are going to be executed against your service\n"
                },
                "maxRunningInstances": {
                    "type": "integer",
                    "description": "Maximum number of instances running for the application. - Must be: `\u003e= -1`. - Default: `1`.\n"
                },
                "memory": {
                    "type": "integer",
                    "description": "RAM of the application in MB [1024MB = 1GB]. - Must be: `\u003e= 1`. - Default: `512`.\n"
                },
                "minRunningInstances": {
                    "type": "integer",
                    "description": "Minimum number of instances running for the application. - Must be: `\u003e= 0`. - Default: `1`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the application.\n"
                },
                "ports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/qovery:index/ApplicationPort:ApplicationPort"
                    },
                    "description": "List of ports linked to this application.\n"
                },
                "secretAliases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/qovery:index/ApplicationSecretAlias:ApplicationSecretAlias"
                    },
                    "description": "List of secret aliases linked to this application.\n"
                },
                "secretOverrides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/qovery:index/ApplicationSecretOverride:ApplicationSecretOverride"
                    },
                    "description": "List of secret overrides linked to this application.\n"
                },
                "secrets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/qovery:index/ApplicationSecret:ApplicationSecret"
                    },
                    "description": "List of secrets linked to this application.\n"
                },
                "storages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/qovery:index/ApplicationStorage:ApplicationStorage"
                    },
                    "description": "List of storages linked to this application.\n"
                }
            },
            "requiredInputs": [
                "environmentId",
                "gitRepository",
                "healthchecks"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Application resources.\n",
                "properties": {
                    "advancedSettingsJson": {
                        "type": "string",
                        "description": "Advanced settings.\n"
                    },
                    "arguments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of arguments of this application.\n"
                    },
                    "autoDeploy": {
                        "type": "boolean",
                        "description": "Specify if the application will be automatically updated after receiving a new image tag.\n"
                    },
                    "autoPreview": {
                        "type": "boolean",
                        "description": "Specify if the environment preview option is activated or not for this application. - Default: `false`.\n"
                    },
                    "buildMode": {
                        "type": "string",
                        "description": "Build Mode of the application. - Can be: `BUILDPACKS`, `DOCKER`. - Default: `BUILDPACKS`.\n"
                    },
                    "buildpackLanguage": {
                        "type": "string",
                        "description": "Buildpack Language framework. - Required if: `build_mode=\"BUILDPACKS\"`. - Can be: `CLOJURE`, `GO`, `GRADLE`, `GRAILS`,\n`JAVA`, `JVM`, `NODE_JS`, `PHP`, `PLAY`, `PYTHON`, `SCALA`.\n"
                    },
                    "builtInEnvironmentVariables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/ApplicationBuiltInEnvironmentVariable:ApplicationBuiltInEnvironmentVariable"
                        },
                        "description": "List of built-in environment variables linked to this application.\n"
                    },
                    "cpu": {
                        "type": "integer",
                        "description": "CPU of the application in millicores (m) [1000m = 1 CPU]. - Must be: `\u003e= 10`. - Default: `500`.\n"
                    },
                    "customDomains": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/ApplicationCustomDomain:ApplicationCustomDomain"
                        },
                        "description": "List of custom domains linked to this application.\n"
                    },
                    "deploymentStageId": {
                        "type": "string",
                        "description": "Id of the deployment stage.\n"
                    },
                    "dockerfilePath": {
                        "type": "string",
                        "description": "Dockerfile Path of the application. - Required if: `build_mode=\"DOCKER\"`.\n"
                    },
                    "entrypoint": {
                        "type": "string",
                        "description": "Entrypoint of the application.\n"
                    },
                    "environmentId": {
                        "type": "string",
                        "description": "Id of the environment.\n"
                    },
                    "environmentVariableAliases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/ApplicationEnvironmentVariableAlias:ApplicationEnvironmentVariableAlias"
                        },
                        "description": "List of environment variable aliases linked to this application.\n"
                    },
                    "environmentVariableOverrides": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/ApplicationEnvironmentVariableOverride:ApplicationEnvironmentVariableOverride"
                        },
                        "description": "List of environment variable overrides linked to this application.\n"
                    },
                    "environmentVariables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/ApplicationEnvironmentVariable:ApplicationEnvironmentVariable"
                        },
                        "description": "List of environment variables linked to this application.\n"
                    },
                    "externalHost": {
                        "type": "string",
                        "description": "The application external FQDN host [NOTE: only if your application is using a publicly accessible port].\n"
                    },
                    "gitRepository": {
                        "$ref": "#/types/qovery:index/ApplicationGitRepository:ApplicationGitRepository",
                        "description": "Git repository of the application.\n"
                    },
                    "healthchecks": {
                        "$ref": "#/types/qovery:index/ApplicationHealthchecks:ApplicationHealthchecks",
                        "description": "Configuration for the healthchecks that are going to be executed against your service\n"
                    },
                    "internalHost": {
                        "type": "string",
                        "description": "The application internal host.\n"
                    },
                    "maxRunningInstances": {
                        "type": "integer",
                        "description": "Maximum number of instances running for the application. - Must be: `\u003e= -1`. - Default: `1`.\n"
                    },
                    "memory": {
                        "type": "integer",
                        "description": "RAM of the application in MB [1024MB = 1GB]. - Must be: `\u003e= 1`. - Default: `512`.\n"
                    },
                    "minRunningInstances": {
                        "type": "integer",
                        "description": "Minimum number of instances running for the application. - Must be: `\u003e= 0`. - Default: `1`.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the application.\n"
                    },
                    "ports": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/ApplicationPort:ApplicationPort"
                        },
                        "description": "List of ports linked to this application.\n"
                    },
                    "secretAliases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/ApplicationSecretAlias:ApplicationSecretAlias"
                        },
                        "description": "List of secret aliases linked to this application.\n"
                    },
                    "secretOverrides": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/ApplicationSecretOverride:ApplicationSecretOverride"
                        },
                        "description": "List of secret overrides linked to this application.\n"
                    },
                    "secrets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/ApplicationSecret:ApplicationSecret"
                        },
                        "description": "List of secrets linked to this application.\n"
                    },
                    "storages": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/ApplicationStorage:ApplicationStorage"
                        },
                        "description": "List of storages linked to this application.\n"
                    }
                },
                "type": "object"
            }
        },
        "qovery:index/awsCredentials:AwsCredentials": {
            "description": "## # qovery.AwsCredentials (Resource)\n\nProvides a Qovery AWS credentials resource. This can be used to create and manage Qovery AWS credentials.\n\n\n## Example\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as qovery from \"@ediri/qovery\";\n\nconst myAwsCreds = new qovery.AwsCredentials(\"myAwsCreds\", {\n    organizationId: qovery_organization.my_organization.id,\n    accessKeyId: \"\u003cyour-aws-access-key-id\u003e\",\n    secretAccessKey: \"\u003cyour-aws-secret-access-key\u003e\",\n}, {\n    dependsOn: [qovery_organization.my_organization],\n});\n```\n```python\nimport pulumi\nimport ediri_qovery as qovery\n\nmy_aws_creds = qovery.AwsCredentials(\"myAwsCreds\",\n    organization_id=qovery_organization[\"my_organization\"][\"id\"],\n    access_key_id=\"\u003cyour-aws-access-key-id\u003e\",\n    secret_access_key=\"\u003cyour-aws-secret-access-key\u003e\",\n    opts=pulumi.ResourceOptions(depends_on=[qovery_organization[\"my_organization\"]]))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Qovery = ediri.Qovery;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myAwsCreds = new Qovery.AwsCredentials(\"myAwsCreds\", new()\n    {\n        OrganizationId = qovery_organization.My_organization.Id,\n        AccessKeyId = \"\u003cyour-aws-access-key-id\u003e\",\n        SecretAccessKey = \"\u003cyour-aws-secret-access-key\u003e\",\n    }, new CustomResourceOptions\n    {\n        DependsOn = new[]\n        {\n            qovery_organization.My_organization,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-qovery/sdk/go/qovery\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := qovery.NewAwsCredentials(ctx, \"myAwsCreds\", \u0026qovery.AwsCredentialsArgs{\n\t\t\tOrganizationId:  pulumi.Any(qovery_organization.My_organization.Id),\n\t\t\tAccessKeyId:     pulumi.String(\"\u003cyour-aws-access-key-id\u003e\"),\n\t\t\tSecretAccessKey: pulumi.String(\"\u003cyour-aws-secret-access-key\u003e\"),\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\tqovery_organization.My_organization,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.qovery.AwsCredentials;\nimport com.pulumi.qovery.AwsCredentialsArgs;\nimport com.pulumi.resources.CustomResourceOptions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myAwsCreds = new AwsCredentials(\"myAwsCreds\", AwsCredentialsArgs.builder()        \n            .organizationId(qovery_organization.my_organization().id())\n            .accessKeyId(\"\u003cyour-aws-access-key-id\u003e\")\n            .secretAccessKey(\"\u003cyour-aws-secret-access-key\u003e\")\n            .build(), CustomResourceOptions.builder()\n                .dependsOn(qovery_organization.my_organization())\n                .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myAwsCreds:\n    type: qovery:AwsCredentials\n    properties:\n      # Required\n      organizationId: ${qovery_organization.my_organization.id}\n      accessKeyId: \u003cyour-aws-access-key-id\u003e\n      secretAccessKey: \u003cyour-aws-secret-access-key\u003e\n    options:\n      dependson:\n        - ${qovery_organization.my_organization}\n```\n\n\n## Import\n\n\n\n```sh\n $ pulumi import qovery:index/awsCredentials:AwsCredentials my_aws_creds \"\u003corganization_id\u003e,\u003caws_credentials_id\u003e\"\n```\n\n ",
            "properties": {
                "accessKeyId": {
                    "type": "string",
                    "description": "Your AWS access key id.\n",
                    "secret": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the aws credentials.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "Id of the organization.\n"
                },
                "secretAccessKey": {
                    "type": "string",
                    "description": "Your AWS secret access key.\n",
                    "secret": true
                }
            },
            "required": [
                "accessKeyId",
                "name",
                "organizationId",
                "secretAccessKey"
            ],
            "inputProperties": {
                "accessKeyId": {
                    "type": "string",
                    "description": "Your AWS access key id.\n",
                    "secret": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the aws credentials.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "Id of the organization.\n"
                },
                "secretAccessKey": {
                    "type": "string",
                    "description": "Your AWS secret access key.\n",
                    "secret": true
                }
            },
            "requiredInputs": [
                "accessKeyId",
                "organizationId",
                "secretAccessKey"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AwsCredentials resources.\n",
                "properties": {
                    "accessKeyId": {
                        "type": "string",
                        "description": "Your AWS access key id.\n",
                        "secret": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the aws credentials.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "Id of the organization.\n"
                    },
                    "secretAccessKey": {
                        "type": "string",
                        "description": "Your AWS secret access key.\n",
                        "secret": true
                    }
                },
                "type": "object"
            }
        },
        "qovery:index/cluster:Cluster": {
            "description": "\n\n\n## Import\n\n\n\n```sh\n $ pulumi import qovery:index/cluster:Cluster my_cluster \"\u003corganization_id\u003e,\u003ccluster_id\u003e\"\n```\n\n ",
            "properties": {
                "advancedSettingsJson": {
                    "type": "string",
                    "description": "Advanced settings of the cluster.\n"
                },
                "cloudProvider": {
                    "type": "string",
                    "description": "Cloud provider of the cluster. - Can be: `AWS`, `GCP`, `SCW`.\n"
                },
                "credentialsId": {
                    "type": "string",
                    "description": "Id of the credentials.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the cluster. - Default: ``.\n"
                },
                "diskSize": {
                    "type": "integer"
                },
                "features": {
                    "$ref": "#/types/qovery:index/ClusterFeatures:ClusterFeatures",
                    "description": "Features of the cluster.\n"
                },
                "instanceType": {
                    "type": "string",
                    "description": "Instance type of the cluster. I.e: For Aws `t3a.xlarge`, for Scaleway `DEV-L`\n"
                },
                "kubernetesMode": {
                    "type": "string",
                    "description": "Kubernetes mode of the cluster. - Can be: `K3S`, `MANAGED`. - Default: `MANAGED`.\n"
                },
                "maxRunningNodes": {
                    "type": "integer",
                    "description": "Maximum number of nodes running for the cluster. [NOTE: have to be set to 1 in case of K3S clusters] - Must be: `\u003e= 1`.\n- Default: `10`.\n"
                },
                "minRunningNodes": {
                    "type": "integer",
                    "description": "Minimum number of nodes running for the cluster. [NOTE: have to be set to 1 in case of K3S clusters]. - Must be: `\u003e= 1`.\n- Default: `3`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the cluster.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "Id of the organization.\n"
                },
                "region": {
                    "type": "string",
                    "description": "Region of the cluster.\n"
                },
                "routingTables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/qovery:index/ClusterRoutingTable:ClusterRoutingTable"
                    },
                    "description": "List of routes of the cluster.\n"
                },
                "state": {
                    "type": "string",
                    "description": "State of the cluster. - Can be: `DEPLOYED`, `STOPPED`. - Default: `DEPLOYED`.\n"
                }
            },
            "required": [
                "advancedSettingsJson",
                "cloudProvider",
                "credentialsId",
                "description",
                "diskSize",
                "features",
                "instanceType",
                "kubernetesMode",
                "maxRunningNodes",
                "minRunningNodes",
                "name",
                "organizationId",
                "region",
                "routingTables",
                "state"
            ],
            "inputProperties": {
                "advancedSettingsJson": {
                    "type": "string",
                    "description": "Advanced settings of the cluster.\n"
                },
                "cloudProvider": {
                    "type": "string",
                    "description": "Cloud provider of the cluster. - Can be: `AWS`, `GCP`, `SCW`.\n"
                },
                "credentialsId": {
                    "type": "string",
                    "description": "Id of the credentials.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the cluster. - Default: ``.\n"
                },
                "diskSize": {
                    "type": "integer"
                },
                "features": {
                    "$ref": "#/types/qovery:index/ClusterFeatures:ClusterFeatures",
                    "description": "Features of the cluster.\n"
                },
                "instanceType": {
                    "type": "string",
                    "description": "Instance type of the cluster. I.e: For Aws `t3a.xlarge`, for Scaleway `DEV-L`\n"
                },
                "kubernetesMode": {
                    "type": "string",
                    "description": "Kubernetes mode of the cluster. - Can be: `K3S`, `MANAGED`. - Default: `MANAGED`.\n"
                },
                "maxRunningNodes": {
                    "type": "integer",
                    "description": "Maximum number of nodes running for the cluster. [NOTE: have to be set to 1 in case of K3S clusters] - Must be: `\u003e= 1`.\n- Default: `10`.\n"
                },
                "minRunningNodes": {
                    "type": "integer",
                    "description": "Minimum number of nodes running for the cluster. [NOTE: have to be set to 1 in case of K3S clusters]. - Must be: `\u003e= 1`.\n- Default: `3`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the cluster.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "Id of the organization.\n"
                },
                "region": {
                    "type": "string",
                    "description": "Region of the cluster.\n"
                },
                "routingTables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/qovery:index/ClusterRoutingTable:ClusterRoutingTable"
                    },
                    "description": "List of routes of the cluster.\n"
                },
                "state": {
                    "type": "string",
                    "description": "State of the cluster. - Can be: `DEPLOYED`, `STOPPED`. - Default: `DEPLOYED`.\n"
                }
            },
            "requiredInputs": [
                "cloudProvider",
                "credentialsId",
                "instanceType",
                "organizationId",
                "region"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Cluster resources.\n",
                "properties": {
                    "advancedSettingsJson": {
                        "type": "string",
                        "description": "Advanced settings of the cluster.\n"
                    },
                    "cloudProvider": {
                        "type": "string",
                        "description": "Cloud provider of the cluster. - Can be: `AWS`, `GCP`, `SCW`.\n"
                    },
                    "credentialsId": {
                        "type": "string",
                        "description": "Id of the credentials.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the cluster. - Default: ``.\n"
                    },
                    "diskSize": {
                        "type": "integer"
                    },
                    "features": {
                        "$ref": "#/types/qovery:index/ClusterFeatures:ClusterFeatures",
                        "description": "Features of the cluster.\n"
                    },
                    "instanceType": {
                        "type": "string",
                        "description": "Instance type of the cluster. I.e: For Aws `t3a.xlarge`, for Scaleway `DEV-L`\n"
                    },
                    "kubernetesMode": {
                        "type": "string",
                        "description": "Kubernetes mode of the cluster. - Can be: `K3S`, `MANAGED`. - Default: `MANAGED`.\n"
                    },
                    "maxRunningNodes": {
                        "type": "integer",
                        "description": "Maximum number of nodes running for the cluster. [NOTE: have to be set to 1 in case of K3S clusters] - Must be: `\u003e= 1`.\n- Default: `10`.\n"
                    },
                    "minRunningNodes": {
                        "type": "integer",
                        "description": "Minimum number of nodes running for the cluster. [NOTE: have to be set to 1 in case of K3S clusters]. - Must be: `\u003e= 1`.\n- Default: `3`.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the cluster.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "Id of the organization.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "Region of the cluster.\n"
                    },
                    "routingTables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/ClusterRoutingTable:ClusterRoutingTable"
                        },
                        "description": "List of routes of the cluster.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "State of the cluster. - Can be: `DEPLOYED`, `STOPPED`. - Default: `DEPLOYED`.\n"
                    }
                },
                "type": "object"
            }
        },
        "qovery:index/container:Container": {
            "description": "## # qovery.Container (Resource)\n\nProvides a Qovery container resource. This can be used to create and manage Qovery container registry.\n\n\n## Example\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.qovery.Container;\nimport com.pulumi.qovery.ContainerArgs;\nimport com.pulumi.qovery.inputs.ContainerHealthchecksArgs;\nimport com.pulumi.qovery.inputs.ContainerEnvironmentVariableArgs;\nimport com.pulumi.qovery.inputs.ContainerEnvironmentVariableAliasArgs;\nimport com.pulumi.qovery.inputs.ContainerEnvironmentVariableOverrideArgs;\nimport com.pulumi.qovery.inputs.ContainerSecretArgs;\nimport com.pulumi.qovery.inputs.ContainerSecretAliasArgs;\nimport com.pulumi.qovery.inputs.ContainerSecretOverrideArgs;\nimport com.pulumi.qovery.inputs.ContainerCustomDomainArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport com.pulumi.resources.CustomResourceOptions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myContainer = new Container(\"myContainer\", ContainerArgs.builder()        \n            .environmentId(qovery_environment.my_environment().id())\n            .registryId(qovery_container_registry.my_container_registry().id())\n            .imageName(\"qovery-api\")\n            .tag(\"1.0.0\")\n            .entrypoint(\"/dev/api\")\n            .autoPreview(\"true\")\n            .cpu(500)\n            .memory(512)\n            .minRunningInstances(1)\n            .maxRunningInstances(1)\n            .healthchecks(ContainerHealthchecksArgs.builder()\n                .readiness_probe(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                .liveness_probe(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                .build())\n            .environmentVariables(ContainerEnvironmentVariableArgs.builder()\n                .key(\"ENV_VAR_KEY\")\n                .value(\"ENV_VAR_VALUE\")\n                .build())\n            .environmentVariableAliases(ContainerEnvironmentVariableAliasArgs.builder()\n                .key(\"ENV_VAR_KEY_ALIAS\")\n                .value(\"ENV_VAR_KEY\")\n                .build())\n            .environmentVariableOverrides(ContainerEnvironmentVariableOverrideArgs.builder()\n                .key(\"SOME_PROJECT_VARIABLE\")\n                .value(\"OVERRIDDEN_VALUE\")\n                .build())\n            .secrets(ContainerSecretArgs.builder()\n                .key(\"SECRET_KEY\")\n                .value(\"SECRET_VALUE\")\n                .build())\n            .secretAliases(ContainerSecretAliasArgs.builder()\n                .key(\"SECRET_KEY_ALIAS\")\n                .value(\"SECRET_KEY\")\n                .build())\n            .secretOverrides(ContainerSecretOverrideArgs.builder()\n                .key(\"SOME_PROJECT_SECRET\")\n                .value(\"OVERRIDDEN_VALUE\")\n                .build())\n            .customDomains(ContainerCustomDomainArgs.builder()\n                .domain(\"example.com\")\n                .build())\n            .advancedSettingsJson(serializeJson(\n                jsonObject(\n                    jsonProperty(\"network.ingress.proxy_send_timeout_seconds\", 80),\n                    jsonProperty(\"network.ingress.proxy_body_size_mb\", 200)\n                )))\n            .build(), CustomResourceOptions.builder()\n                .dependsOn(                \n                    qovery_environment.my_environment(),\n                    qovery_container_registry.my_container_registry())\n                .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myContainer:\n    type: qovery:Container\n    properties:\n      # Required\n      environmentId: ${qovery_environment.my_environment.id}\n      registryId: ${qovery_container_registry.my_container_registry.id}\n      imageName: qovery-api\n      tag: 1.0.0\n      # Optional\n      entrypoint: /dev/api\n      autoPreview: 'true'\n      cpu: 500\n      memory: 512\n      minRunningInstances: 1\n      maxRunningInstances: 1\n      healthchecks:\n        readiness_probe:\n          type:\n            http:\n              port: 8000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n          timeoutSeconds: 10\n          successThreshold: 1\n          failureThreshold: 3\n        liveness_probe:\n          type:\n            http:\n              port: 8000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n          timeoutSeconds: 10\n          successThreshold: 1\n          failureThreshold: 3\n      environmentVariables:\n        - key: ENV_VAR_KEY\n          value: ENV_VAR_VALUE\n      environmentVariableAliases:\n        - key: ENV_VAR_KEY_ALIAS\n          value: ENV_VAR_KEY\n      environmentVariableOverrides:\n        - key: SOME_PROJECT_VARIABLE\n          value: OVERRIDDEN_VALUE\n      secrets:\n        - key: SECRET_KEY\n          value: SECRET_VALUE\n      secretAliases:\n        - key: SECRET_KEY_ALIAS\n          value: SECRET_KEY\n      secretOverrides:\n        - key: SOME_PROJECT_SECRET\n          value: OVERRIDDEN_VALUE\n      customDomains:\n        - domain: example.com\n      advancedSettingsJson:\n        fn::toJSON:\n          network.ingress.proxy_send_timeout_seconds: 80\n          network.ingress.proxy_body_size_mb: 200\n    options:\n      dependson:\n        - ${qovery_environment.my_environment}\n        - ${qovery_container_registry.my_container_registry}\n```\n\n\n## Import\n\n\n\n```sh\n $ pulumi import qovery:index/container:Container my_container \"\u003ccontainer_id\u003e\"\n```\n\n ",
            "properties": {
                "advancedSettingsJson": {
                    "type": "string",
                    "description": "Advanced settings.\n"
                },
                "arguments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of arguments of this container.\n"
                },
                "autoDeploy": {
                    "type": "boolean",
                    "description": "Specify if the container will be automatically updated after receiving a new image tag.\n"
                },
                "autoPreview": {
                    "type": "boolean",
                    "description": "Specify if the environment preview option is activated or not for this container.\n"
                },
                "builtInEnvironmentVariables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/qovery:index/ContainerBuiltInEnvironmentVariable:ContainerBuiltInEnvironmentVariable"
                    },
                    "description": "List of built-in environment variables linked to this container.\n"
                },
                "cpu": {
                    "type": "integer",
                    "description": "CPU of the container in millicores (m) [1000m = 1 CPU]. - Must be: `\u003e= 10`. - Default: `500`.\n"
                },
                "customDomains": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/qovery:index/ContainerCustomDomain:ContainerCustomDomain"
                    },
                    "description": "List of custom domains linked to this container.\n"
                },
                "deploymentStageId": {
                    "type": "string",
                    "description": "Id of the deployment stage.\n"
                },
                "entrypoint": {
                    "type": "string",
                    "description": "Entrypoint of the container.\n"
                },
                "environmentId": {
                    "type": "string",
                    "description": "Id of the environment.\n"
                },
                "environmentVariableAliases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/qovery:index/ContainerEnvironmentVariableAlias:ContainerEnvironmentVariableAlias"
                    },
                    "description": "List of environment variable aliases linked to this container.\n"
                },
                "environmentVariableOverrides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/qovery:index/ContainerEnvironmentVariableOverride:ContainerEnvironmentVariableOverride"
                    },
                    "description": "List of environment variable overrides linked to this container.\n"
                },
                "environmentVariables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/qovery:index/ContainerEnvironmentVariable:ContainerEnvironmentVariable"
                    },
                    "description": "List of environment variables linked to this container.\n"
                },
                "externalHost": {
                    "type": "string",
                    "description": "The container external FQDN host [NOTE: only if your container is using a publicly accessible port].\n"
                },
                "healthchecks": {
                    "$ref": "#/types/qovery:index/ContainerHealthchecks:ContainerHealthchecks",
                    "description": "Configuration for the healthchecks that are going to be executed against your service\n"
                },
                "imageName": {
                    "type": "string",
                    "description": "Name of the container image.\n"
                },
                "internalHost": {
                    "type": "string",
                    "description": "The container internal host.\n"
                },
                "maxRunningInstances": {
                    "type": "integer",
                    "description": "Maximum number of instances running for the container. - Must be: `\u003e= -1`. - Default: `1`.\n"
                },
                "memory": {
                    "type": "integer",
                    "description": "RAM of the container in MB [1024MB = 1GB]. - Must be: `\u003e= 10`. - Default: `512`.\n"
                },
                "minRunningInstances": {
                    "type": "integer",
                    "description": "Minimum number of instances running for the container. - Must be: `\u003e= 1`. - Default: `1`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the container.\n"
                },
                "ports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/qovery:index/ContainerPort:ContainerPort"
                    },
                    "description": "List of ports linked to this container.\n"
                },
                "registryId": {
                    "type": "string",
                    "description": "Id of the registry.\n"
                },
                "secretAliases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/qovery:index/ContainerSecretAlias:ContainerSecretAlias"
                    },
                    "description": "List of secret aliases linked to this container.\n"
                },
                "secretOverrides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/qovery:index/ContainerSecretOverride:ContainerSecretOverride"
                    },
                    "description": "List of secret overrides linked to this container.\n"
                },
                "secrets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/qovery:index/ContainerSecret:ContainerSecret"
                    },
                    "description": "List of secrets linked to this container.\n"
                },
                "storages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/qovery:index/ContainerStorage:ContainerStorage"
                    },
                    "description": "List of storages linked to this container.\n"
                },
                "tag": {
                    "type": "string",
                    "description": "Tag of the container image.\n"
                }
            },
            "required": [
                "advancedSettingsJson",
                "arguments",
                "autoDeploy",
                "autoPreview",
                "builtInEnvironmentVariables",
                "cpu",
                "deploymentStageId",
                "environmentId",
                "externalHost",
                "healthchecks",
                "imageName",
                "internalHost",
                "maxRunningInstances",
                "memory",
                "minRunningInstances",
                "name",
                "registryId",
                "tag"
            ],
            "inputProperties": {
                "advancedSettingsJson": {
                    "type": "string",
                    "description": "Advanced settings.\n"
                },
                "arguments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of arguments of this container.\n"
                },
                "autoDeploy": {
                    "type": "boolean",
                    "description": "Specify if the container will be automatically updated after receiving a new image tag.\n"
                },
                "autoPreview": {
                    "type": "boolean",
                    "description": "Specify if the environment preview option is activated or not for this container.\n"
                },
                "cpu": {
                    "type": "integer",
                    "description": "CPU of the container in millicores (m) [1000m = 1 CPU]. - Must be: `\u003e= 10`. - Default: `500`.\n"
                },
                "customDomains": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/qovery:index/ContainerCustomDomain:ContainerCustomDomain"
                    },
                    "description": "List of custom domains linked to this container.\n"
                },
                "deploymentStageId": {
                    "type": "string",
                    "description": "Id of the deployment stage.\n"
                },
                "entrypoint": {
                    "type": "string",
                    "description": "Entrypoint of the container.\n"
                },
                "environmentId": {
                    "type": "string",
                    "description": "Id of the environment.\n"
                },
                "environmentVariableAliases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/qovery:index/ContainerEnvironmentVariableAlias:ContainerEnvironmentVariableAlias"
                    },
                    "description": "List of environment variable aliases linked to this container.\n"
                },
                "environmentVariableOverrides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/qovery:index/ContainerEnvironmentVariableOverride:ContainerEnvironmentVariableOverride"
                    },
                    "description": "List of environment variable overrides linked to this container.\n"
                },
                "environmentVariables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/qovery:index/ContainerEnvironmentVariable:ContainerEnvironmentVariable"
                    },
                    "description": "List of environment variables linked to this container.\n"
                },
                "healthchecks": {
                    "$ref": "#/types/qovery:index/ContainerHealthchecks:ContainerHealthchecks",
                    "description": "Configuration for the healthchecks that are going to be executed against your service\n"
                },
                "imageName": {
                    "type": "string",
                    "description": "Name of the container image.\n"
                },
                "maxRunningInstances": {
                    "type": "integer",
                    "description": "Maximum number of instances running for the container. - Must be: `\u003e= -1`. - Default: `1`.\n"
                },
                "memory": {
                    "type": "integer",
                    "description": "RAM of the container in MB [1024MB = 1GB]. - Must be: `\u003e= 10`. - Default: `512`.\n"
                },
                "minRunningInstances": {
                    "type": "integer",
                    "description": "Minimum number of instances running for the container. - Must be: `\u003e= 1`. - Default: `1`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the container.\n"
                },
                "ports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/qovery:index/ContainerPort:ContainerPort"
                    },
                    "description": "List of ports linked to this container.\n"
                },
                "registryId": {
                    "type": "string",
                    "description": "Id of the registry.\n"
                },
                "secretAliases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/qovery:index/ContainerSecretAlias:ContainerSecretAlias"
                    },
                    "description": "List of secret aliases linked to this container.\n"
                },
                "secretOverrides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/qovery:index/ContainerSecretOverride:ContainerSecretOverride"
                    },
                    "description": "List of secret overrides linked to this container.\n"
                },
                "secrets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/qovery:index/ContainerSecret:ContainerSecret"
                    },
                    "description": "List of secrets linked to this container.\n"
                },
                "storages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/qovery:index/ContainerStorage:ContainerStorage"
                    },
                    "description": "List of storages linked to this container.\n"
                },
                "tag": {
                    "type": "string",
                    "description": "Tag of the container image.\n"
                }
            },
            "requiredInputs": [
                "environmentId",
                "healthchecks",
                "imageName",
                "registryId",
                "tag"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Container resources.\n",
                "properties": {
                    "advancedSettingsJson": {
                        "type": "string",
                        "description": "Advanced settings.\n"
                    },
                    "arguments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of arguments of this container.\n"
                    },
                    "autoDeploy": {
                        "type": "boolean",
                        "description": "Specify if the container will be automatically updated after receiving a new image tag.\n"
                    },
                    "autoPreview": {
                        "type": "boolean",
                        "description": "Specify if the environment preview option is activated or not for this container.\n"
                    },
                    "builtInEnvironmentVariables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/ContainerBuiltInEnvironmentVariable:ContainerBuiltInEnvironmentVariable"
                        },
                        "description": "List of built-in environment variables linked to this container.\n"
                    },
                    "cpu": {
                        "type": "integer",
                        "description": "CPU of the container in millicores (m) [1000m = 1 CPU]. - Must be: `\u003e= 10`. - Default: `500`.\n"
                    },
                    "customDomains": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/ContainerCustomDomain:ContainerCustomDomain"
                        },
                        "description": "List of custom domains linked to this container.\n"
                    },
                    "deploymentStageId": {
                        "type": "string",
                        "description": "Id of the deployment stage.\n"
                    },
                    "entrypoint": {
                        "type": "string",
                        "description": "Entrypoint of the container.\n"
                    },
                    "environmentId": {
                        "type": "string",
                        "description": "Id of the environment.\n"
                    },
                    "environmentVariableAliases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/ContainerEnvironmentVariableAlias:ContainerEnvironmentVariableAlias"
                        },
                        "description": "List of environment variable aliases linked to this container.\n"
                    },
                    "environmentVariableOverrides": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/ContainerEnvironmentVariableOverride:ContainerEnvironmentVariableOverride"
                        },
                        "description": "List of environment variable overrides linked to this container.\n"
                    },
                    "environmentVariables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/ContainerEnvironmentVariable:ContainerEnvironmentVariable"
                        },
                        "description": "List of environment variables linked to this container.\n"
                    },
                    "externalHost": {
                        "type": "string",
                        "description": "The container external FQDN host [NOTE: only if your container is using a publicly accessible port].\n"
                    },
                    "healthchecks": {
                        "$ref": "#/types/qovery:index/ContainerHealthchecks:ContainerHealthchecks",
                        "description": "Configuration for the healthchecks that are going to be executed against your service\n"
                    },
                    "imageName": {
                        "type": "string",
                        "description": "Name of the container image.\n"
                    },
                    "internalHost": {
                        "type": "string",
                        "description": "The container internal host.\n"
                    },
                    "maxRunningInstances": {
                        "type": "integer",
                        "description": "Maximum number of instances running for the container. - Must be: `\u003e= -1`. - Default: `1`.\n"
                    },
                    "memory": {
                        "type": "integer",
                        "description": "RAM of the container in MB [1024MB = 1GB]. - Must be: `\u003e= 10`. - Default: `512`.\n"
                    },
                    "minRunningInstances": {
                        "type": "integer",
                        "description": "Minimum number of instances running for the container. - Must be: `\u003e= 1`. - Default: `1`.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the container.\n"
                    },
                    "ports": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/ContainerPort:ContainerPort"
                        },
                        "description": "List of ports linked to this container.\n"
                    },
                    "registryId": {
                        "type": "string",
                        "description": "Id of the registry.\n"
                    },
                    "secretAliases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/ContainerSecretAlias:ContainerSecretAlias"
                        },
                        "description": "List of secret aliases linked to this container.\n"
                    },
                    "secretOverrides": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/ContainerSecretOverride:ContainerSecretOverride"
                        },
                        "description": "List of secret overrides linked to this container.\n"
                    },
                    "secrets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/ContainerSecret:ContainerSecret"
                        },
                        "description": "List of secrets linked to this container.\n"
                    },
                    "storages": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/ContainerStorage:ContainerStorage"
                        },
                        "description": "List of storages linked to this container.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Tag of the container image.\n"
                    }
                },
                "type": "object"
            }
        },
        "qovery:index/containerRegistry:ContainerRegistry": {
            "description": "## # qovery.ContainerRegistry (Resource)\n\nProvides a Qovery container registry resource. This can be used to create and manage Qovery container registry.\n\n\n## Example\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as qovery from \"@ediri/qovery\";\n\nconst myContainerRegistry = new qovery.ContainerRegistry(\"myContainerRegistry\", {\n    organizationId: qovery_organization.my_organization.id,\n    kind: \"DOCKER_HUB\",\n    url: \"https://docker.io\",\n    config: {\n        username: \"\u003cmy_username\u003e\",\n        password: \"\u003cmy_password\u003e\",\n    },\n    description: \"My Docker Hub Registry\",\n}, {\n    dependsOn: [qovery_organization.my_organization],\n});\n```\n```python\nimport pulumi\nimport ediri_qovery as qovery\n\nmy_container_registry = qovery.ContainerRegistry(\"myContainerRegistry\",\n    organization_id=qovery_organization[\"my_organization\"][\"id\"],\n    kind=\"DOCKER_HUB\",\n    url=\"https://docker.io\",\n    config=qovery.ContainerRegistryConfigArgs(\n        username=\"\u003cmy_username\u003e\",\n        password=\"\u003cmy_password\u003e\",\n    ),\n    description=\"My Docker Hub Registry\",\n    opts=pulumi.ResourceOptions(depends_on=[qovery_organization[\"my_organization\"]]))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Qovery = ediri.Qovery;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myContainerRegistry = new Qovery.ContainerRegistry(\"myContainerRegistry\", new()\n    {\n        OrganizationId = qovery_organization.My_organization.Id,\n        Kind = \"DOCKER_HUB\",\n        Url = \"https://docker.io\",\n        Config = new Qovery.Inputs.ContainerRegistryConfigArgs\n        {\n            Username = \"\u003cmy_username\u003e\",\n            Password = \"\u003cmy_password\u003e\",\n        },\n        Description = \"My Docker Hub Registry\",\n    }, new CustomResourceOptions\n    {\n        DependsOn = new[]\n        {\n            qovery_organization.My_organization,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-qovery/sdk/go/qovery\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := qovery.NewContainerRegistry(ctx, \"myContainerRegistry\", \u0026qovery.ContainerRegistryArgs{\n\t\t\tOrganizationId: pulumi.Any(qovery_organization.My_organization.Id),\n\t\t\tKind:           pulumi.String(\"DOCKER_HUB\"),\n\t\t\tUrl:            pulumi.String(\"https://docker.io\"),\n\t\t\tConfig: \u0026qovery.ContainerRegistryConfigArgs{\n\t\t\t\tUsername: pulumi.String(\"\u003cmy_username\u003e\"),\n\t\t\t\tPassword: pulumi.String(\"\u003cmy_password\u003e\"),\n\t\t\t},\n\t\t\tDescription: pulumi.String(\"My Docker Hub Registry\"),\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\tqovery_organization.My_organization,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.qovery.ContainerRegistry;\nimport com.pulumi.qovery.ContainerRegistryArgs;\nimport com.pulumi.qovery.inputs.ContainerRegistryConfigArgs;\nimport com.pulumi.resources.CustomResourceOptions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myContainerRegistry = new ContainerRegistry(\"myContainerRegistry\", ContainerRegistryArgs.builder()        \n            .organizationId(qovery_organization.my_organization().id())\n            .kind(\"DOCKER_HUB\")\n            .url(\"https://docker.io\")\n            .config(ContainerRegistryConfigArgs.builder()\n                .username(\"\u003cmy_username\u003e\")\n                .password(\"\u003cmy_password\u003e\")\n                .build())\n            .description(\"My Docker Hub Registry\")\n            .build(), CustomResourceOptions.builder()\n                .dependsOn(qovery_organization.my_organization())\n                .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myContainerRegistry:\n    type: qovery:ContainerRegistry\n    properties:\n      # Required\n      organizationId: ${qovery_organization.my_organization.id}\n      kind: DOCKER_HUB\n      url: https://docker.io\n      config:\n        username: \u003cmy_username\u003e\n        password: \u003cmy_password\u003e\n      # Optional\n      description: My Docker Hub Registry\n    options:\n      dependson:\n        - ${qovery_organization.my_organization}\n```\n\n\n## Import\n\n\n\n```sh\n $ pulumi import qovery:index/containerRegistry:ContainerRegistry my_container_registry \"\u003corganization_id\u003e,\u003ccontainer_registry_id\u003e\"\n```\n\n ",
            "properties": {
                "config": {
                    "$ref": "#/types/qovery:index/ContainerRegistryConfig:ContainerRegistryConfig",
                    "description": "Configuration needed to authenticate the container registry.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the container registry.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "Kind of the container registry. - Can be: `DOCKER_HUB`, `DOCR`, `ECR`, `GCP_ARTIFACT_REGISTRY`, `GENERIC_CR`,\n`GITHUB_CR`, `GITLAB_CR`, `PUBLIC_ECR`, `SCALEWAY_CR`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the container registry.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "Id of the organization.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the container registry.\n"
                }
            },
            "required": [
                "description",
                "kind",
                "name",
                "organizationId",
                "url"
            ],
            "inputProperties": {
                "config": {
                    "$ref": "#/types/qovery:index/ContainerRegistryConfig:ContainerRegistryConfig",
                    "description": "Configuration needed to authenticate the container registry.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the container registry.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "Kind of the container registry. - Can be: `DOCKER_HUB`, `DOCR`, `ECR`, `GCP_ARTIFACT_REGISTRY`, `GENERIC_CR`,\n`GITHUB_CR`, `GITLAB_CR`, `PUBLIC_ECR`, `SCALEWAY_CR`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the container registry.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "Id of the organization.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the container registry.\n"
                }
            },
            "requiredInputs": [
                "kind",
                "organizationId",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ContainerRegistry resources.\n",
                "properties": {
                    "config": {
                        "$ref": "#/types/qovery:index/ContainerRegistryConfig:ContainerRegistryConfig",
                        "description": "Configuration needed to authenticate the container registry.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the container registry.\n"
                    },
                    "kind": {
                        "type": "string",
                        "description": "Kind of the container registry. - Can be: `DOCKER_HUB`, `DOCR`, `ECR`, `GCP_ARTIFACT_REGISTRY`, `GENERIC_CR`,\n`GITHUB_CR`, `GITLAB_CR`, `PUBLIC_ECR`, `SCALEWAY_CR`.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the container registry.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "Id of the organization.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the container registry.\n"
                    }
                },
                "type": "object"
            }
        },
        "qovery:index/database:Database": {
            "description": "## # qovery.Database (Resource)\n\nProvides a Qovery database resource. This can be used to create and manage Qovery databases.\n\n\n## Example\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as qovery from \"@ediri/qovery\";\n\nconst myContainerDatabase = new qovery.Database(\"myContainerDatabase\", {\n    environmentId: qovery_environment.my_environment.id,\n    type: \"POSTGRESQL\",\n    version: \"10\",\n    mode: \"CONTAINER\",\n    accessibility: \"PRIVATE\",\n    cpu: 250,\n    memory: 256,\n    storage: 10,\n}, {\n    dependsOn: [qovery_environment.my_environment],\n});\nconst myManagedDatabase = new qovery.Database(\"myManagedDatabase\", {\n    environmentId: qovery_environment.my_environment.id,\n    type: \"POSTGRESQL\",\n    version: \"10\",\n    mode: \"MANAGED\",\n    instanceType: \"db.t3.micro\",\n    accessibility: \"PRIVATE\",\n    storage: 10,\n}, {\n    dependsOn: [qovery_environment.my_environment],\n});\n```\n```python\nimport pulumi\nimport ediri_qovery as qovery\n\nmy_container_database = qovery.Database(\"myContainerDatabase\",\n    environment_id=qovery_environment[\"my_environment\"][\"id\"],\n    type=\"POSTGRESQL\",\n    version=\"10\",\n    mode=\"CONTAINER\",\n    accessibility=\"PRIVATE\",\n    cpu=250,\n    memory=256,\n    storage=10,\n    opts=pulumi.ResourceOptions(depends_on=[qovery_environment[\"my_environment\"]]))\nmy_managed_database = qovery.Database(\"myManagedDatabase\",\n    environment_id=qovery_environment[\"my_environment\"][\"id\"],\n    type=\"POSTGRESQL\",\n    version=\"10\",\n    mode=\"MANAGED\",\n    instance_type=\"db.t3.micro\",\n    accessibility=\"PRIVATE\",\n    storage=10,\n    opts=pulumi.ResourceOptions(depends_on=[qovery_environment[\"my_environment\"]]))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Qovery = ediri.Qovery;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myContainerDatabase = new Qovery.Database(\"myContainerDatabase\", new()\n    {\n        EnvironmentId = qovery_environment.My_environment.Id,\n        Type = \"POSTGRESQL\",\n        Version = \"10\",\n        Mode = \"CONTAINER\",\n        Accessibility = \"PRIVATE\",\n        Cpu = 250,\n        Memory = 256,\n        Storage = 10,\n    }, new CustomResourceOptions\n    {\n        DependsOn = new[]\n        {\n            qovery_environment.My_environment,\n        },\n    });\n\n    var myManagedDatabase = new Qovery.Database(\"myManagedDatabase\", new()\n    {\n        EnvironmentId = qovery_environment.My_environment.Id,\n        Type = \"POSTGRESQL\",\n        Version = \"10\",\n        Mode = \"MANAGED\",\n        InstanceType = \"db.t3.micro\",\n        Accessibility = \"PRIVATE\",\n        Storage = 10,\n    }, new CustomResourceOptions\n    {\n        DependsOn = new[]\n        {\n            qovery_environment.My_environment,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-qovery/sdk/go/qovery\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := qovery.NewDatabase(ctx, \"myContainerDatabase\", \u0026qovery.DatabaseArgs{\n\t\t\tEnvironmentId: pulumi.Any(qovery_environment.My_environment.Id),\n\t\t\tType:          pulumi.String(\"POSTGRESQL\"),\n\t\t\tVersion:       pulumi.String(\"10\"),\n\t\t\tMode:          pulumi.String(\"CONTAINER\"),\n\t\t\tAccessibility: pulumi.String(\"PRIVATE\"),\n\t\t\tCpu:           pulumi.Int(250),\n\t\t\tMemory:        pulumi.Int(256),\n\t\t\tStorage:       pulumi.Int(10),\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\tqovery_environment.My_environment,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = qovery.NewDatabase(ctx, \"myManagedDatabase\", \u0026qovery.DatabaseArgs{\n\t\t\tEnvironmentId: pulumi.Any(qovery_environment.My_environment.Id),\n\t\t\tType:          pulumi.String(\"POSTGRESQL\"),\n\t\t\tVersion:       pulumi.String(\"10\"),\n\t\t\tMode:          pulumi.String(\"MANAGED\"),\n\t\t\tInstanceType:  pulumi.String(\"db.t3.micro\"),\n\t\t\tAccessibility: pulumi.String(\"PRIVATE\"),\n\t\t\tStorage:       pulumi.Int(10),\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\tqovery_environment.My_environment,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.qovery.Database;\nimport com.pulumi.qovery.DatabaseArgs;\nimport com.pulumi.resources.CustomResourceOptions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myContainerDatabase = new Database(\"myContainerDatabase\", DatabaseArgs.builder()        \n            .environmentId(qovery_environment.my_environment().id())\n            .type(\"POSTGRESQL\")\n            .version(\"10\")\n            .mode(\"CONTAINER\")\n            .accessibility(\"PRIVATE\")\n            .cpu(250)\n            .memory(256)\n            .storage(10)\n            .build(), CustomResourceOptions.builder()\n                .dependsOn(qovery_environment.my_environment())\n                .build());\n\n        var myManagedDatabase = new Database(\"myManagedDatabase\", DatabaseArgs.builder()        \n            .environmentId(qovery_environment.my_environment().id())\n            .type(\"POSTGRESQL\")\n            .version(\"10\")\n            .mode(\"MANAGED\")\n            .instanceType(\"db.t3.micro\")\n            .accessibility(\"PRIVATE\")\n            .storage(10)\n            .build(), CustomResourceOptions.builder()\n                .dependsOn(qovery_environment.my_environment())\n                .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myContainerDatabase:\n    type: qovery:Database\n    properties:\n      # Required\n      environmentId: ${qovery_environment.my_environment.id}\n      type: POSTGRESQL\n      version: '10'\n      mode: CONTAINER\n      # Optional\n      accessibility: PRIVATE\n      cpu: 250\n      memory: 256\n      storage: 10\n    options:\n      dependson:\n        - ${qovery_environment.my_environment}\n  myManagedDatabase:\n    type: qovery:Database\n    properties:\n      # Required\n      environmentId: ${qovery_environment.my_environment.id}\n      type: POSTGRESQL\n      version: '10'\n      mode: MANAGED\n      # Instance type to be set for managed databases\n      instanceType: db.t3.micro\n      # Optional\n      accessibility: PRIVATE\n      storage: 10\n    options:\n      dependson:\n        - ${qovery_environment.my_environment}\n```\n\n\n## Import\n\n\n\n```sh\n $ pulumi import qovery:index/database:Database my_database \"\u003cdatabase_id\u003e\"\n```\n\n ",
            "properties": {
                "accessibility": {
                    "type": "string",
                    "description": "Accessibility of the database. - Can be: `PRIVATE`, `PUBLIC`. - Default: `PUBLIC`.\n"
                },
                "cpu": {
                    "type": "integer",
                    "description": "CPU of the database in millicores (m) [1000m = 1 CPU]. - Must be: `\u003e= 250`. - Default: `250`.\n"
                },
                "deploymentStageId": {
                    "type": "string",
                    "description": "Id of the deployment stage.\n"
                },
                "environmentId": {
                    "type": "string",
                    "description": "Id of the environment.\n"
                },
                "externalHost": {
                    "type": "string",
                    "description": "The database external FQDN host [NOTE: only if your container is using a publicly accessible port].\n"
                },
                "instanceType": {
                    "type": "string",
                    "description": "Instance type of the database.\n"
                },
                "internalHost": {
                    "type": "string",
                    "description": "The database internal host (Recommended for your application)\n"
                },
                "login": {
                    "type": "string",
                    "description": "The login to connect to your database\n"
                },
                "memory": {
                    "type": "integer",
                    "description": "RAM of the database in MB [1024MB = 1GB]. - Must be: `\u003e= 100`. - Default: `256`.\n"
                },
                "mode": {
                    "type": "string",
                    "description": "Mode of the database [NOTE: can't be updated after creation]. - Can be: `CONTAINER`, `MANAGED`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the database.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to connect to your database\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port to connect to your database\n"
                },
                "storage": {
                    "type": "integer",
                    "description": "Storage of the database in GB [1024MB = 1GB] [NOTE: can't be updated after creation]. - Must be: `\u003e= 10`. - Default:\n`10`.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the database [NOTE: can't be updated after creation]. - Can be: `MONGODB`, `MYSQL`, `POSTGRESQL`, `REDIS`.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Version of the database\n"
                }
            },
            "required": [
                "accessibility",
                "cpu",
                "deploymentStageId",
                "environmentId",
                "externalHost",
                "instanceType",
                "internalHost",
                "login",
                "memory",
                "mode",
                "name",
                "password",
                "port",
                "storage",
                "type",
                "version"
            ],
            "inputProperties": {
                "accessibility": {
                    "type": "string",
                    "description": "Accessibility of the database. - Can be: `PRIVATE`, `PUBLIC`. - Default: `PUBLIC`.\n"
                },
                "cpu": {
                    "type": "integer",
                    "description": "CPU of the database in millicores (m) [1000m = 1 CPU]. - Must be: `\u003e= 250`. - Default: `250`.\n"
                },
                "deploymentStageId": {
                    "type": "string",
                    "description": "Id of the deployment stage.\n"
                },
                "environmentId": {
                    "type": "string",
                    "description": "Id of the environment.\n"
                },
                "instanceType": {
                    "type": "string",
                    "description": "Instance type of the database.\n"
                },
                "memory": {
                    "type": "integer",
                    "description": "RAM of the database in MB [1024MB = 1GB]. - Must be: `\u003e= 100`. - Default: `256`.\n"
                },
                "mode": {
                    "type": "string",
                    "description": "Mode of the database [NOTE: can't be updated after creation]. - Can be: `CONTAINER`, `MANAGED`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the database.\n"
                },
                "storage": {
                    "type": "integer",
                    "description": "Storage of the database in GB [1024MB = 1GB] [NOTE: can't be updated after creation]. - Must be: `\u003e= 10`. - Default:\n`10`.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the database [NOTE: can't be updated after creation]. - Can be: `MONGODB`, `MYSQL`, `POSTGRESQL`, `REDIS`.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Version of the database\n"
                }
            },
            "requiredInputs": [
                "environmentId",
                "mode",
                "type",
                "version"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Database resources.\n",
                "properties": {
                    "accessibility": {
                        "type": "string",
                        "description": "Accessibility of the database. - Can be: `PRIVATE`, `PUBLIC`. - Default: `PUBLIC`.\n"
                    },
                    "cpu": {
                        "type": "integer",
                        "description": "CPU of the database in millicores (m) [1000m = 1 CPU]. - Must be: `\u003e= 250`. - Default: `250`.\n"
                    },
                    "deploymentStageId": {
                        "type": "string",
                        "description": "Id of the deployment stage.\n"
                    },
                    "environmentId": {
                        "type": "string",
                        "description": "Id of the environment.\n"
                    },
                    "externalHost": {
                        "type": "string",
                        "description": "The database external FQDN host [NOTE: only if your container is using a publicly accessible port].\n"
                    },
                    "instanceType": {
                        "type": "string",
                        "description": "Instance type of the database.\n"
                    },
                    "internalHost": {
                        "type": "string",
                        "description": "The database internal host (Recommended for your application)\n"
                    },
                    "login": {
                        "type": "string",
                        "description": "The login to connect to your database\n"
                    },
                    "memory": {
                        "type": "integer",
                        "description": "RAM of the database in MB [1024MB = 1GB]. - Must be: `\u003e= 100`. - Default: `256`.\n"
                    },
                    "mode": {
                        "type": "string",
                        "description": "Mode of the database [NOTE: can't be updated after creation]. - Can be: `CONTAINER`, `MANAGED`.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the database.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "The password to connect to your database\n"
                    },
                    "port": {
                        "type": "integer",
                        "description": "The port to connect to your database\n"
                    },
                    "storage": {
                        "type": "integer",
                        "description": "Storage of the database in GB [1024MB = 1GB] [NOTE: can't be updated after creation]. - Must be: `\u003e= 10`. - Default:\n`10`.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the database [NOTE: can't be updated after creation]. - Can be: `MONGODB`, `MYSQL`, `POSTGRESQL`, `REDIS`.\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "Version of the database\n"
                    }
                },
                "type": "object"
            }
        },
        "qovery:index/deployment:Deployment": {
            "description": "## # qovery.Deployment (Resource)\n\nProvides a Qovery deployment stage resource. This can be used to create and manage Qovery deployment stages.\n\n\n## Example\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as qovery from \"@ediri/qovery\";\n\nconst myDeployment = new qovery.Deployment(\"myDeployment\", {\n    environmentId: qovery_environment.my_environment.id,\n    desiredState: \"RUNNING\",\n    version: \"random_uuid_to_force_retrigger_terraform_apply\",\n}, {\n    dependsOn: [\n        qovery_application.my_application,\n        qovery_database.my_database,\n        qovery_container.my_container,\n    ],\n});\n```\n```python\nimport pulumi\nimport ediri_qovery as qovery\n\nmy_deployment = qovery.Deployment(\"myDeployment\",\n    environment_id=qovery_environment[\"my_environment\"][\"id\"],\n    desired_state=\"RUNNING\",\n    version=\"random_uuid_to_force_retrigger_terraform_apply\",\n    opts=pulumi.ResourceOptions(depends_on=[\n            qovery_application[\"my_application\"],\n            qovery_database[\"my_database\"],\n            qovery_container[\"my_container\"],\n        ]))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Qovery = ediri.Qovery;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myDeployment = new Qovery.Deployment(\"myDeployment\", new()\n    {\n        EnvironmentId = qovery_environment.My_environment.Id,\n        DesiredState = \"RUNNING\",\n        Version = \"random_uuid_to_force_retrigger_terraform_apply\",\n    }, new CustomResourceOptions\n    {\n        DependsOn = new[]\n        {\n            qovery_application.My_application,\n            qovery_database.My_database,\n            qovery_container.My_container,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-qovery/sdk/go/qovery\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := qovery.NewDeployment(ctx, \"myDeployment\", \u0026qovery.DeploymentArgs{\n\t\t\tEnvironmentId: pulumi.Any(qovery_environment.My_environment.Id),\n\t\t\tDesiredState:  pulumi.String(\"RUNNING\"),\n\t\t\tVersion:       pulumi.String(\"random_uuid_to_force_retrigger_terraform_apply\"),\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\tqovery_application.My_application,\n\t\t\tqovery_database.My_database,\n\t\t\tqovery_container.My_container,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.qovery.Deployment;\nimport com.pulumi.qovery.DeploymentArgs;\nimport com.pulumi.resources.CustomResourceOptions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myDeployment = new Deployment(\"myDeployment\", DeploymentArgs.builder()        \n            .environmentId(qovery_environment.my_environment().id())\n            .desiredState(\"RUNNING\")\n            .version(\"random_uuid_to_force_retrigger_terraform_apply\")\n            .build(), CustomResourceOptions.builder()\n                .dependsOn(                \n                    qovery_application.my_application(),\n                    qovery_database.my_database(),\n                    qovery_container.my_container())\n                .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myDeployment:\n    type: qovery:Deployment\n    properties:\n      # Required\n      environmentId: ${qovery_environment.my_environment.id}\n      desiredState: RUNNING\n      version: random_uuid_to_force_retrigger_terraform_apply\n    options:\n      dependson:\n        - ${qovery_application.my_application}\n        - ${qovery_database.my_database}\n        - ${qovery_container.my_container}\n```\n",
            "properties": {
                "desiredState": {
                    "type": "string",
                    "description": "Desired state of the deployment. - Can be: `RESTARTED`, `RUNNING`, `STOPPED`.\n"
                },
                "environmentId": {
                    "type": "string",
                    "description": "Id of the environment.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Version to force trigger a deployment when desired_state doesn't change (e.g redeploy a deployment having the 'RUNNING'\nstate)\n"
                }
            },
            "required": [
                "desiredState",
                "environmentId"
            ],
            "inputProperties": {
                "desiredState": {
                    "type": "string",
                    "description": "Desired state of the deployment. - Can be: `RESTARTED`, `RUNNING`, `STOPPED`.\n"
                },
                "environmentId": {
                    "type": "string",
                    "description": "Id of the environment.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Version to force trigger a deployment when desired_state doesn't change (e.g redeploy a deployment having the 'RUNNING'\nstate)\n"
                }
            },
            "requiredInputs": [
                "desiredState",
                "environmentId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Deployment resources.\n",
                "properties": {
                    "desiredState": {
                        "type": "string",
                        "description": "Desired state of the deployment. - Can be: `RESTARTED`, `RUNNING`, `STOPPED`.\n"
                    },
                    "environmentId": {
                        "type": "string",
                        "description": "Id of the environment.\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "Version to force trigger a deployment when desired_state doesn't change (e.g redeploy a deployment having the 'RUNNING'\nstate)\n"
                    }
                },
                "type": "object"
            }
        },
        "qovery:index/deploymentStage:DeploymentStage": {
            "description": "\n\n\n## Import\n\n\n\n```sh\n $ pulumi import qovery:index/deploymentStage:DeploymentStage my_deployment_stage \"\u003cdeployment_stage_id\u003e\"\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the deployment stage.\n"
                },
                "environmentId": {
                    "type": "string",
                    "description": "Id of the environment.\n"
                },
                "isAfter": {
                    "type": "string",
                    "description": "Move the current deployment stage after the target deployment stage\n"
                },
                "isBefore": {
                    "type": "string",
                    "description": "Move the current deployment stage before the target deployment stage\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the deployment stage.\n"
                }
            },
            "required": [
                "environmentId",
                "name"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the deployment stage.\n"
                },
                "environmentId": {
                    "type": "string",
                    "description": "Id of the environment.\n"
                },
                "isAfter": {
                    "type": "string",
                    "description": "Move the current deployment stage after the target deployment stage\n"
                },
                "isBefore": {
                    "type": "string",
                    "description": "Move the current deployment stage before the target deployment stage\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the deployment stage.\n"
                }
            },
            "requiredInputs": [
                "environmentId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DeploymentStage resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the deployment stage.\n"
                    },
                    "environmentId": {
                        "type": "string",
                        "description": "Id of the environment.\n"
                    },
                    "isAfter": {
                        "type": "string",
                        "description": "Move the current deployment stage after the target deployment stage\n"
                    },
                    "isBefore": {
                        "type": "string",
                        "description": "Move the current deployment stage before the target deployment stage\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the deployment stage.\n"
                    }
                },
                "type": "object"
            }
        },
        "qovery:index/environment:Environment": {
            "description": "\n\n\n## Import\n\n\n\n```sh\n $ pulumi import qovery:index/environment:Environment my_environment \"\u003cenvironment_id\u003e\"\n```\n\n ",
            "properties": {
                "builtInEnvironmentVariables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/qovery:index/EnvironmentBuiltInEnvironmentVariable:EnvironmentBuiltInEnvironmentVariable"
                    },
                    "description": "List of built-in environment variables linked to this environment.\n"
                },
                "clusterId": {
                    "type": "string",
                    "description": "Id of the cluster [NOTE: can't be updated after creation].\n"
                },
                "environmentVariableAliases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/qovery:index/EnvironmentEnvironmentVariableAlias:EnvironmentEnvironmentVariableAlias"
                    },
                    "description": "List of environment variable aliases linked to this environment.\n"
                },
                "environmentVariableOverrides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/qovery:index/EnvironmentEnvironmentVariableOverride:EnvironmentEnvironmentVariableOverride"
                    },
                    "description": "List of environment variable overrides linked to this environment.\n"
                },
                "environmentVariables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/qovery:index/EnvironmentEnvironmentVariable:EnvironmentEnvironmentVariable"
                    },
                    "description": "List of environment variables linked to this environment.\n"
                },
                "mode": {
                    "type": "string",
                    "description": "Mode of the environment [NOTE: can't be updated after creation]. - Can be: `DEVELOPMENT`, `PREVIEW`, `PRODUCTION`,\n`STAGING`. - Default: `DEVELOPMENT`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the environment.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Id of the project.\n"
                },
                "secretAliases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/qovery:index/EnvironmentSecretAlias:EnvironmentSecretAlias"
                    },
                    "description": "List of secret aliases linked to this environment.\n"
                },
                "secretOverrides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/qovery:index/EnvironmentSecretOverride:EnvironmentSecretOverride"
                    },
                    "description": "List of secret overrides linked to this environment.\n"
                },
                "secrets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/qovery:index/EnvironmentSecret:EnvironmentSecret"
                    },
                    "description": "List of secrets linked to this environment.\n"
                }
            },
            "required": [
                "builtInEnvironmentVariables",
                "clusterId",
                "mode",
                "name",
                "projectId"
            ],
            "inputProperties": {
                "clusterId": {
                    "type": "string",
                    "description": "Id of the cluster [NOTE: can't be updated after creation].\n"
                },
                "environmentVariableAliases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/qovery:index/EnvironmentEnvironmentVariableAlias:EnvironmentEnvironmentVariableAlias"
                    },
                    "description": "List of environment variable aliases linked to this environment.\n"
                },
                "environmentVariableOverrides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/qovery:index/EnvironmentEnvironmentVariableOverride:EnvironmentEnvironmentVariableOverride"
                    },
                    "description": "List of environment variable overrides linked to this environment.\n"
                },
                "environmentVariables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/qovery:index/EnvironmentEnvironmentVariable:EnvironmentEnvironmentVariable"
                    },
                    "description": "List of environment variables linked to this environment.\n"
                },
                "mode": {
                    "type": "string",
                    "description": "Mode of the environment [NOTE: can't be updated after creation]. - Can be: `DEVELOPMENT`, `PREVIEW`, `PRODUCTION`,\n`STAGING`. - Default: `DEVELOPMENT`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the environment.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Id of the project.\n"
                },
                "secretAliases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/qovery:index/EnvironmentSecretAlias:EnvironmentSecretAlias"
                    },
                    "description": "List of secret aliases linked to this environment.\n"
                },
                "secretOverrides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/qovery:index/EnvironmentSecretOverride:EnvironmentSecretOverride"
                    },
                    "description": "List of secret overrides linked to this environment.\n"
                },
                "secrets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/qovery:index/EnvironmentSecret:EnvironmentSecret"
                    },
                    "description": "List of secrets linked to this environment.\n"
                }
            },
            "requiredInputs": [
                "clusterId",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Environment resources.\n",
                "properties": {
                    "builtInEnvironmentVariables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/EnvironmentBuiltInEnvironmentVariable:EnvironmentBuiltInEnvironmentVariable"
                        },
                        "description": "List of built-in environment variables linked to this environment.\n"
                    },
                    "clusterId": {
                        "type": "string",
                        "description": "Id of the cluster [NOTE: can't be updated after creation].\n"
                    },
                    "environmentVariableAliases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/EnvironmentEnvironmentVariableAlias:EnvironmentEnvironmentVariableAlias"
                        },
                        "description": "List of environment variable aliases linked to this environment.\n"
                    },
                    "environmentVariableOverrides": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/EnvironmentEnvironmentVariableOverride:EnvironmentEnvironmentVariableOverride"
                        },
                        "description": "List of environment variable overrides linked to this environment.\n"
                    },
                    "environmentVariables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/EnvironmentEnvironmentVariable:EnvironmentEnvironmentVariable"
                        },
                        "description": "List of environment variables linked to this environment.\n"
                    },
                    "mode": {
                        "type": "string",
                        "description": "Mode of the environment [NOTE: can't be updated after creation]. - Can be: `DEVELOPMENT`, `PREVIEW`, `PRODUCTION`,\n`STAGING`. - Default: `DEVELOPMENT`.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the environment.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Id of the project.\n"
                    },
                    "secretAliases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/EnvironmentSecretAlias:EnvironmentSecretAlias"
                        },
                        "description": "List of secret aliases linked to this environment.\n"
                    },
                    "secretOverrides": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/EnvironmentSecretOverride:EnvironmentSecretOverride"
                        },
                        "description": "List of secret overrides linked to this environment.\n"
                    },
                    "secrets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/EnvironmentSecret:EnvironmentSecret"
                        },
                        "description": "List of secrets linked to this environment.\n"
                    }
                },
                "type": "object"
            }
        },
        "qovery:index/gitToken:GitToken": {
            "description": "## # qovery.GitToken (Resource)\n\nProvides a Qovery git token resource. This can be used to create and manage Qovery git token.\n\n\n## Example\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as qovery from \"@ediri/qovery\";\n\nconst myGitToken = new qovery.GitToken(\"myGitToken\", {\n    organizationId: qovery_organization.my_organization.id,\n    type: \"GITHUB\",\n    token: \"my-git-provider-token\",\n    description: \"Github token\",\n    bitbucketWorkspace: \"workspace-bitbucket\",\n});\n```\n```python\nimport pulumi\nimport ediri_qovery as qovery\n\nmy_git_token = qovery.GitToken(\"myGitToken\",\n    organization_id=qovery_organization[\"my_organization\"][\"id\"],\n    type=\"GITHUB\",\n    token=\"my-git-provider-token\",\n    description=\"Github token\",\n    bitbucket_workspace=\"workspace-bitbucket\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Qovery = ediri.Qovery;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myGitToken = new Qovery.GitToken(\"myGitToken\", new()\n    {\n        OrganizationId = qovery_organization.My_organization.Id,\n        Type = \"GITHUB\",\n        Token = \"my-git-provider-token\",\n        Description = \"Github token\",\n        BitbucketWorkspace = \"workspace-bitbucket\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-qovery/sdk/go/qovery\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := qovery.NewGitToken(ctx, \"myGitToken\", \u0026qovery.GitTokenArgs{\n\t\t\tOrganizationId:     pulumi.Any(qovery_organization.My_organization.Id),\n\t\t\tType:               pulumi.String(\"GITHUB\"),\n\t\t\tToken:              pulumi.String(\"my-git-provider-token\"),\n\t\t\tDescription:        pulumi.String(\"Github token\"),\n\t\t\tBitbucketWorkspace: pulumi.String(\"workspace-bitbucket\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.qovery.GitToken;\nimport com.pulumi.qovery.GitTokenArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myGitToken = new GitToken(\"myGitToken\", GitTokenArgs.builder()        \n            .organizationId(qovery_organization.my_organization().id())\n            .type(\"GITHUB\")\n            .token(\"my-git-provider-token\")\n            .description(\"Github token\")\n            .bitbucketWorkspace(\"workspace-bitbucket\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myGitToken:\n    type: qovery:GitToken\n    properties:\n      # Required\n      organizationId: ${qovery_organization.my_organization.id}\n      type: GITHUB\n      token: my-git-provider-token\n      # Optional\n      description: Github token\n      # Only necessary for BITBUCKET git tokens\n      bitbucketWorkspace: workspace-bitbucket\n```\n\n\n## Import\n\n\n\n```sh\n $ pulumi import qovery:index/gitToken:GitToken my_git_token \"\u003corganization_id\u003e,\u003cgit_token_id\u003e\"\n```\n\n ",
            "properties": {
                "bitbucketWorkspace": {
                    "type": "string",
                    "description": "(Mandatory only for Bitbucket git token) Workspace where the token has permissions .\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the git token.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the git token.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "Id of the organization.\n"
                },
                "token": {
                    "type": "string",
                    "description": "Value of the git token.\n",
                    "secret": true
                },
                "type": {
                    "type": "string",
                    "description": "Type of the git token. - Can be: `BITBUCKET`, `GITHUB`, `GITLAB`.\n"
                }
            },
            "required": [
                "bitbucketWorkspace",
                "description",
                "name",
                "organizationId",
                "token",
                "type"
            ],
            "inputProperties": {
                "bitbucketWorkspace": {
                    "type": "string",
                    "description": "(Mandatory only for Bitbucket git token) Workspace where the token has permissions .\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the git token.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the git token.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "Id of the organization.\n"
                },
                "token": {
                    "type": "string",
                    "description": "Value of the git token.\n",
                    "secret": true
                },
                "type": {
                    "type": "string",
                    "description": "Type of the git token. - Can be: `BITBUCKET`, `GITHUB`, `GITLAB`.\n"
                }
            },
            "requiredInputs": [
                "organizationId",
                "token",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GitToken resources.\n",
                "properties": {
                    "bitbucketWorkspace": {
                        "type": "string",
                        "description": "(Mandatory only for Bitbucket git token) Workspace where the token has permissions .\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the git token.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the git token.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "Id of the organization.\n"
                    },
                    "token": {
                        "type": "string",
                        "description": "Value of the git token.\n",
                        "secret": true
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the git token. - Can be: `BITBUCKET`, `GITHUB`, `GITLAB`.\n"
                    }
                },
                "type": "object"
            }
        },
        "qovery:index/helm:Helm": {
            "description": "## # qovery.Helm (Resource)\n\nProvides a Qovery helm resource. This can be used to create and manage Qovery helm registry.\n\n\n## Example\n\n```yaml\nresources:\n  myHelm:\n    type: qovery:Helm\n    properties:\n      # Required\n      environmentId: ${qovery_environment.my_environment.id}\n      allowClusterWideResources: false\n      source:\n        helm_repository:\n          helmRepositoryId: 5a4a2dd6-02e1-4e3a-a3cc-8ebb97e135a9\n          chartName: httpbin\n          chartVersion: 1.0.0\n      valuesOverride:\n        set:\n          key1: 6600\n          key2: values1\n        set_string:\n          s-key1: value1\n          s-key2: value2\n        set_json:\n          j-key1: '{}'\n          j-key2: '{}'\n        file:\n          raw:\n            file1:\n              content: \"--- \\n ssss\"\n            file2:\n              content: \"a \\n eee\"\n      # Optional\n      autoPreview: 'true'\n      environmentVariables:\n        - key: MY_TERRAFORM_HELM_VARIABLE\n          value: MY_TERRAFORM_HELM_VARIABLE_VALUE\n      environmentVariableAliases:\n        - key: ENV_VAR_KEY_ALIAS\n          value: ENV_VAR_KEY\n      environmentVariableOverrides:\n        - key: SOME_PROJECT_VARIABLE\n          value: OVERRIDDEN_VALUE\n      secrets:\n        - key: MY_TERRAFORM_HELM_SECRET\n          value: MY_TERRAFORM_HELM_SECRET_VALUE\n      secretAliases:\n        - key: SECRET_KEY_ALIAS\n          value: SECRET_KEY\n      secretOverrides:\n        - key: SOME_PROJECT_SECRET\n          value: OVERRIDDEN_VALUE\n      advancedSettingsJson:\n        fn::toJSON: {}\n    options:\n      dependson:\n        - ${qovery_environment.my_environment}\n```\n\n\n## Import\n\n\n\n```sh\n $ pulumi import qovery:index/helm:Helm my_helm \"\u003chelm_id\u003e\"\n```\n\n ",
            "properties": {
                "advancedSettingsJson": {
                    "type": "string",
                    "description": "Advanced settings.\n"
                },
                "allowClusterWideResources": {
                    "type": "boolean",
                    "description": "Allow this chart to deploy resources outside of this environment namespace (including CRDs or non-namespaced resources)\n"
                },
                "arguments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Helm arguments\n"
                },
                "autoDeploy": {
                    "type": "boolean",
                    "description": "Specify if the service will be automatically updated on every new commit on the branch.\n"
                },
                "autoPreview": {
                    "type": "boolean",
                    "description": "Specify if the environment preview option is activated or not for this helm.\n"
                },
                "builtInEnvironmentVariables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/qovery:index/HelmBuiltInEnvironmentVariable:HelmBuiltInEnvironmentVariable"
                    },
                    "description": "List of built-in environment variables linked to this helm.\n"
                },
                "deploymentStageId": {
                    "type": "string",
                    "description": "Id of the deployment stage.\n"
                },
                "environmentId": {
                    "type": "string",
                    "description": "Id of the environment.\n"
                },
                "environmentVariableAliases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/qovery:index/HelmEnvironmentVariableAlias:HelmEnvironmentVariableAlias"
                    },
                    "description": "List of environment variable aliases linked to this helm.\n"
                },
                "environmentVariableOverrides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/qovery:index/HelmEnvironmentVariableOverride:HelmEnvironmentVariableOverride"
                    },
                    "description": "List of environment variable overrides linked to this helm.\n"
                },
                "environmentVariables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/qovery:index/HelmEnvironmentVariable:HelmEnvironmentVariable"
                    },
                    "description": "List of environment variables linked to this helm.\n"
                },
                "externalHost": {
                    "type": "string",
                    "description": "The helm external FQDN host [NOTE: only if your helm is using a publicly accessible port].\n"
                },
                "internalHost": {
                    "type": "string",
                    "description": "The helm internal host.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the helm.\n"
                },
                "ports": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/qovery:index/HelmPorts:HelmPorts"
                    },
                    "description": "List of ports linked to this helm.\n"
                },
                "secretAliases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/qovery:index/HelmSecretAlias:HelmSecretAlias"
                    },
                    "description": "List of secret aliases linked to this helm.\n"
                },
                "secretOverrides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/qovery:index/HelmSecretOverride:HelmSecretOverride"
                    },
                    "description": "List of secret overrides linked to this helm.\n"
                },
                "secrets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/qovery:index/HelmSecret:HelmSecret"
                    },
                    "description": "List of secrets linked to this helm.\n"
                },
                "source": {
                    "$ref": "#/types/qovery:index/HelmSource:HelmSource",
                    "description": "Helm chart from a Helm repository or from a git repository\n"
                },
                "timeoutSec": {
                    "type": "integer",
                    "description": "Helm timeout in second\n"
                },
                "valuesOverride": {
                    "$ref": "#/types/qovery:index/HelmValuesOverride:HelmValuesOverride",
                    "description": "Define your own overrides to customize the helm chart behaviour.\n"
                }
            },
            "required": [
                "advancedSettingsJson",
                "allowClusterWideResources",
                "arguments",
                "autoDeploy",
                "autoPreview",
                "builtInEnvironmentVariables",
                "deploymentStageId",
                "environmentId",
                "externalHost",
                "internalHost",
                "name",
                "source",
                "timeoutSec",
                "valuesOverride"
            ],
            "inputProperties": {
                "advancedSettingsJson": {
                    "type": "string",
                    "description": "Advanced settings.\n"
                },
                "allowClusterWideResources": {
                    "type": "boolean",
                    "description": "Allow this chart to deploy resources outside of this environment namespace (including CRDs or non-namespaced resources)\n"
                },
                "arguments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Helm arguments\n"
                },
                "autoDeploy": {
                    "type": "boolean",
                    "description": "Specify if the service will be automatically updated on every new commit on the branch.\n"
                },
                "autoPreview": {
                    "type": "boolean",
                    "description": "Specify if the environment preview option is activated or not for this helm.\n"
                },
                "deploymentStageId": {
                    "type": "string",
                    "description": "Id of the deployment stage.\n"
                },
                "environmentId": {
                    "type": "string",
                    "description": "Id of the environment.\n"
                },
                "environmentVariableAliases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/qovery:index/HelmEnvironmentVariableAlias:HelmEnvironmentVariableAlias"
                    },
                    "description": "List of environment variable aliases linked to this helm.\n"
                },
                "environmentVariableOverrides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/qovery:index/HelmEnvironmentVariableOverride:HelmEnvironmentVariableOverride"
                    },
                    "description": "List of environment variable overrides linked to this helm.\n"
                },
                "environmentVariables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/qovery:index/HelmEnvironmentVariable:HelmEnvironmentVariable"
                    },
                    "description": "List of environment variables linked to this helm.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the helm.\n"
                },
                "ports": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/qovery:index/HelmPorts:HelmPorts"
                    },
                    "description": "List of ports linked to this helm.\n"
                },
                "secretAliases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/qovery:index/HelmSecretAlias:HelmSecretAlias"
                    },
                    "description": "List of secret aliases linked to this helm.\n"
                },
                "secretOverrides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/qovery:index/HelmSecretOverride:HelmSecretOverride"
                    },
                    "description": "List of secret overrides linked to this helm.\n"
                },
                "secrets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/qovery:index/HelmSecret:HelmSecret"
                    },
                    "description": "List of secrets linked to this helm.\n"
                },
                "source": {
                    "$ref": "#/types/qovery:index/HelmSource:HelmSource",
                    "description": "Helm chart from a Helm repository or from a git repository\n"
                },
                "timeoutSec": {
                    "type": "integer",
                    "description": "Helm timeout in second\n"
                },
                "valuesOverride": {
                    "$ref": "#/types/qovery:index/HelmValuesOverride:HelmValuesOverride",
                    "description": "Define your own overrides to customize the helm chart behaviour.\n"
                }
            },
            "requiredInputs": [
                "allowClusterWideResources",
                "environmentId",
                "source",
                "valuesOverride"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Helm resources.\n",
                "properties": {
                    "advancedSettingsJson": {
                        "type": "string",
                        "description": "Advanced settings.\n"
                    },
                    "allowClusterWideResources": {
                        "type": "boolean",
                        "description": "Allow this chart to deploy resources outside of this environment namespace (including CRDs or non-namespaced resources)\n"
                    },
                    "arguments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Helm arguments\n"
                    },
                    "autoDeploy": {
                        "type": "boolean",
                        "description": "Specify if the service will be automatically updated on every new commit on the branch.\n"
                    },
                    "autoPreview": {
                        "type": "boolean",
                        "description": "Specify if the environment preview option is activated or not for this helm.\n"
                    },
                    "builtInEnvironmentVariables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/HelmBuiltInEnvironmentVariable:HelmBuiltInEnvironmentVariable"
                        },
                        "description": "List of built-in environment variables linked to this helm.\n"
                    },
                    "deploymentStageId": {
                        "type": "string",
                        "description": "Id of the deployment stage.\n"
                    },
                    "environmentId": {
                        "type": "string",
                        "description": "Id of the environment.\n"
                    },
                    "environmentVariableAliases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/HelmEnvironmentVariableAlias:HelmEnvironmentVariableAlias"
                        },
                        "description": "List of environment variable aliases linked to this helm.\n"
                    },
                    "environmentVariableOverrides": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/HelmEnvironmentVariableOverride:HelmEnvironmentVariableOverride"
                        },
                        "description": "List of environment variable overrides linked to this helm.\n"
                    },
                    "environmentVariables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/HelmEnvironmentVariable:HelmEnvironmentVariable"
                        },
                        "description": "List of environment variables linked to this helm.\n"
                    },
                    "externalHost": {
                        "type": "string",
                        "description": "The helm external FQDN host [NOTE: only if your helm is using a publicly accessible port].\n"
                    },
                    "internalHost": {
                        "type": "string",
                        "description": "The helm internal host.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the helm.\n"
                    },
                    "ports": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/types/qovery:index/HelmPorts:HelmPorts"
                        },
                        "description": "List of ports linked to this helm.\n"
                    },
                    "secretAliases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/HelmSecretAlias:HelmSecretAlias"
                        },
                        "description": "List of secret aliases linked to this helm.\n"
                    },
                    "secretOverrides": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/HelmSecretOverride:HelmSecretOverride"
                        },
                        "description": "List of secret overrides linked to this helm.\n"
                    },
                    "secrets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/HelmSecret:HelmSecret"
                        },
                        "description": "List of secrets linked to this helm.\n"
                    },
                    "source": {
                        "$ref": "#/types/qovery:index/HelmSource:HelmSource",
                        "description": "Helm chart from a Helm repository or from a git repository\n"
                    },
                    "timeoutSec": {
                        "type": "integer",
                        "description": "Helm timeout in second\n"
                    },
                    "valuesOverride": {
                        "$ref": "#/types/qovery:index/HelmValuesOverride:HelmValuesOverride",
                        "description": "Define your own overrides to customize the helm chart behaviour.\n"
                    }
                },
                "type": "object"
            }
        },
        "qovery:index/helmRepository:HelmRepository": {
            "description": "## # qovery.HelmRepository (Resource)\n\nProvides a Qovery helm repository resource. This can be used to create and manage Qovery helm repository.\n\n\n## Example\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.qovery.HelmRepository;\nimport com.pulumi.qovery.HelmRepositoryArgs;\nimport com.pulumi.qovery.inputs.HelmRepositoryConfigArgs;\nimport com.pulumi.resources.CustomResourceOptions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myHelmRepository = new HelmRepository(\"myHelmRepository\", HelmRepositoryArgs.builder()        \n            .organizationId(qovery_organization.my_organization().id())\n            .kind(\"OCI_DOCKER_HUB\")\n            .url(\"https://docker.io\")\n            .skipTlsCertificate(false)\n            .description(\"My Helm repository\")\n            .config(HelmRepositoryConfigArgs.builder()\n                .username(\"\u003cmy_username\u003e\")\n                .password(\"\u003cmy_password\u003e\")\n                .build())\n            .build(), CustomResourceOptions.builder()\n                .dependsOn(qovery_organization.my_organization())\n                .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myHelmRepository:\n    type: qovery:HelmRepository\n    properties:\n      # Required\n      organizationId: ${qovery_organization.my_organization.id}\n      kind: OCI_DOCKER_HUB\n      url: https://docker.io\n      skipTlsCertificate: false\n      # Optional\n      description: My Helm repository\n      config:\n        username: \u003cmy_username\u003e\n        password: \u003cmy_password\u003e\n    options:\n      dependson:\n        - ${qovery_organization.my_organization}\n```\n\n\n## Import\n\n\n\n```sh\n $ pulumi import qovery:index/helmRepository:HelmRepository my_helm_repository \"\u003corganization_id\u003e,\u003chelm_repository_id\u003e\"\n```\n\n ",
            "properties": {
                "config": {
                    "$ref": "#/types/qovery:index/HelmRepositoryConfig:HelmRepositoryConfig",
                    "description": "Configuration needed to authenticate the helm repository.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the helm repository.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "Kind of the helm repository. - Can be: `HTTPS`, `OCI_DOCKER_HUB`, `OCI_DOCR`, `OCI_ECR`, `OCI_GENERIC_CR`,\n`OCI_GITHUB_CR`, `OCI_GITLAB_CR`, `OCI_PUBLIC_ECR`, `OCI_SCALEWAY_CR`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the helm repository.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "Id of the organization.\n"
                },
                "skipTlsVerification": {
                    "type": "boolean",
                    "description": "Bypass tls certificate verification when connecting to repository\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the helm repository.\n"
                }
            },
            "required": [
                "description",
                "kind",
                "name",
                "organizationId",
                "skipTlsVerification",
                "url"
            ],
            "inputProperties": {
                "config": {
                    "$ref": "#/types/qovery:index/HelmRepositoryConfig:HelmRepositoryConfig",
                    "description": "Configuration needed to authenticate the helm repository.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the helm repository.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "Kind of the helm repository. - Can be: `HTTPS`, `OCI_DOCKER_HUB`, `OCI_DOCR`, `OCI_ECR`, `OCI_GENERIC_CR`,\n`OCI_GITHUB_CR`, `OCI_GITLAB_CR`, `OCI_PUBLIC_ECR`, `OCI_SCALEWAY_CR`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the helm repository.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "Id of the organization.\n"
                },
                "skipTlsVerification": {
                    "type": "boolean",
                    "description": "Bypass tls certificate verification when connecting to repository\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the helm repository.\n"
                }
            },
            "requiredInputs": [
                "kind",
                "organizationId",
                "skipTlsVerification",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering HelmRepository resources.\n",
                "properties": {
                    "config": {
                        "$ref": "#/types/qovery:index/HelmRepositoryConfig:HelmRepositoryConfig",
                        "description": "Configuration needed to authenticate the helm repository.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the helm repository.\n"
                    },
                    "kind": {
                        "type": "string",
                        "description": "Kind of the helm repository. - Can be: `HTTPS`, `OCI_DOCKER_HUB`, `OCI_DOCR`, `OCI_ECR`, `OCI_GENERIC_CR`,\n`OCI_GITHUB_CR`, `OCI_GITLAB_CR`, `OCI_PUBLIC_ECR`, `OCI_SCALEWAY_CR`.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the helm repository.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "Id of the organization.\n"
                    },
                    "skipTlsVerification": {
                        "type": "boolean",
                        "description": "Bypass tls certificate verification when connecting to repository\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the helm repository.\n"
                    }
                },
                "type": "object"
            }
        },
        "qovery:index/job:Job": {
            "description": "\n\n\n## Import\n\n\n\n```sh\n $ pulumi import qovery:index/job:Job my_job \"\u003cjob_id\u003e\"\n```\n\n ",
            "properties": {
                "advancedSettingsJson": {
                    "type": "string",
                    "description": "Advanced settings.\n"
                },
                "autoDeploy": {
                    "type": "boolean",
                    "description": "Specify if the job will be automatically updated after receiving a new image tag.\n"
                },
                "autoPreview": {
                    "type": "boolean",
                    "description": "Specify if the environment preview option is activated or not for this job.\n"
                },
                "builtInEnvironmentVariables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/qovery:index/JobBuiltInEnvironmentVariable:JobBuiltInEnvironmentVariable"
                    },
                    "description": "List of built-in environment variables linked to this job.\n"
                },
                "cpu": {
                    "type": "integer",
                    "description": "CPU of the job in millicores (m) [1000m = 1 CPU]. - Must be: `\u003e= 10`. - Default: `500`.\n"
                },
                "deploymentStageId": {
                    "type": "string",
                    "description": "Id of the deployment stage.\n"
                },
                "environmentId": {
                    "type": "string",
                    "description": "Id of the environment.\n"
                },
                "environmentVariableAliases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/qovery:index/JobEnvironmentVariableAlias:JobEnvironmentVariableAlias"
                    },
                    "description": "List of environment variable aliases linked to this job.\n"
                },
                "environmentVariableOverrides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/qovery:index/JobEnvironmentVariableOverride:JobEnvironmentVariableOverride"
                    },
                    "description": "List of environment variable overrides linked to this job.\n"
                },
                "environmentVariables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/qovery:index/JobEnvironmentVariable:JobEnvironmentVariable"
                    },
                    "description": "List of environment variables linked to this job.\n"
                },
                "externalHost": {
                    "type": "string",
                    "description": "The job external FQDN host [NOTE: only if your job is using a publicly accessible port].\n"
                },
                "healthchecks": {
                    "$ref": "#/types/qovery:index/JobHealthchecks:JobHealthchecks",
                    "description": "Configuration for the healthchecks that are going to be executed against your service\n"
                },
                "internalHost": {
                    "type": "string",
                    "description": "The job internal host.\n"
                },
                "maxDurationSeconds": {
                    "type": "integer",
                    "description": "Job's max duration in seconds. - Must be: `\u003e= 0`. - Default: `300`.\n"
                },
                "maxNbRestart": {
                    "type": "integer",
                    "description": "Job's max number of restarts. - Must be: `\u003e= 0`. - Default: `0`.\n"
                },
                "memory": {
                    "type": "integer",
                    "description": "RAM of the job in MB [1024MB = 1GB]. - Must be: `\u003e= 1`. - Default: `512`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the job.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Job's probes port. - Must be: `\u003e= 1` and `\u003c= 65535`.\n"
                },
                "schedule": {
                    "$ref": "#/types/qovery:index/JobSchedule:JobSchedule",
                    "description": "Job's schedule.\n"
                },
                "secretAliases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/qovery:index/JobSecretAlias:JobSecretAlias"
                    },
                    "description": "List of secret aliases linked to this job.\n"
                },
                "secretOverrides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/qovery:index/JobSecretOverride:JobSecretOverride"
                    },
                    "description": "List of secret overrides linked to this job.\n"
                },
                "secrets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/qovery:index/JobSecret:JobSecret"
                    },
                    "description": "List of secrets linked to this job.\n"
                },
                "source": {
                    "$ref": "#/types/qovery:index/JobSource:JobSource",
                    "description": "Job's source.\n"
                }
            },
            "required": [
                "advancedSettingsJson",
                "autoDeploy",
                "autoPreview",
                "builtInEnvironmentVariables",
                "cpu",
                "deploymentStageId",
                "environmentId",
                "externalHost",
                "healthchecks",
                "internalHost",
                "maxDurationSeconds",
                "maxNbRestart",
                "memory",
                "name",
                "schedule"
            ],
            "inputProperties": {
                "advancedSettingsJson": {
                    "type": "string",
                    "description": "Advanced settings.\n"
                },
                "autoDeploy": {
                    "type": "boolean",
                    "description": "Specify if the job will be automatically updated after receiving a new image tag.\n"
                },
                "autoPreview": {
                    "type": "boolean",
                    "description": "Specify if the environment preview option is activated or not for this job.\n"
                },
                "cpu": {
                    "type": "integer",
                    "description": "CPU of the job in millicores (m) [1000m = 1 CPU]. - Must be: `\u003e= 10`. - Default: `500`.\n"
                },
                "deploymentStageId": {
                    "type": "string",
                    "description": "Id of the deployment stage.\n"
                },
                "environmentId": {
                    "type": "string",
                    "description": "Id of the environment.\n"
                },
                "environmentVariableAliases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/qovery:index/JobEnvironmentVariableAlias:JobEnvironmentVariableAlias"
                    },
                    "description": "List of environment variable aliases linked to this job.\n"
                },
                "environmentVariableOverrides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/qovery:index/JobEnvironmentVariableOverride:JobEnvironmentVariableOverride"
                    },
                    "description": "List of environment variable overrides linked to this job.\n"
                },
                "environmentVariables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/qovery:index/JobEnvironmentVariable:JobEnvironmentVariable"
                    },
                    "description": "List of environment variables linked to this job.\n"
                },
                "healthchecks": {
                    "$ref": "#/types/qovery:index/JobHealthchecks:JobHealthchecks",
                    "description": "Configuration for the healthchecks that are going to be executed against your service\n"
                },
                "maxDurationSeconds": {
                    "type": "integer",
                    "description": "Job's max duration in seconds. - Must be: `\u003e= 0`. - Default: `300`.\n"
                },
                "maxNbRestart": {
                    "type": "integer",
                    "description": "Job's max number of restarts. - Must be: `\u003e= 0`. - Default: `0`.\n"
                },
                "memory": {
                    "type": "integer",
                    "description": "RAM of the job in MB [1024MB = 1GB]. - Must be: `\u003e= 1`. - Default: `512`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the job.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Job's probes port. - Must be: `\u003e= 1` and `\u003c= 65535`.\n"
                },
                "schedule": {
                    "$ref": "#/types/qovery:index/JobSchedule:JobSchedule",
                    "description": "Job's schedule.\n"
                },
                "secretAliases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/qovery:index/JobSecretAlias:JobSecretAlias"
                    },
                    "description": "List of secret aliases linked to this job.\n"
                },
                "secretOverrides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/qovery:index/JobSecretOverride:JobSecretOverride"
                    },
                    "description": "List of secret overrides linked to this job.\n"
                },
                "secrets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/qovery:index/JobSecret:JobSecret"
                    },
                    "description": "List of secrets linked to this job.\n"
                },
                "source": {
                    "$ref": "#/types/qovery:index/JobSource:JobSource",
                    "description": "Job's source.\n"
                }
            },
            "requiredInputs": [
                "environmentId",
                "healthchecks",
                "schedule"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Job resources.\n",
                "properties": {
                    "advancedSettingsJson": {
                        "type": "string",
                        "description": "Advanced settings.\n"
                    },
                    "autoDeploy": {
                        "type": "boolean",
                        "description": "Specify if the job will be automatically updated after receiving a new image tag.\n"
                    },
                    "autoPreview": {
                        "type": "boolean",
                        "description": "Specify if the environment preview option is activated or not for this job.\n"
                    },
                    "builtInEnvironmentVariables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/JobBuiltInEnvironmentVariable:JobBuiltInEnvironmentVariable"
                        },
                        "description": "List of built-in environment variables linked to this job.\n"
                    },
                    "cpu": {
                        "type": "integer",
                        "description": "CPU of the job in millicores (m) [1000m = 1 CPU]. - Must be: `\u003e= 10`. - Default: `500`.\n"
                    },
                    "deploymentStageId": {
                        "type": "string",
                        "description": "Id of the deployment stage.\n"
                    },
                    "environmentId": {
                        "type": "string",
                        "description": "Id of the environment.\n"
                    },
                    "environmentVariableAliases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/JobEnvironmentVariableAlias:JobEnvironmentVariableAlias"
                        },
                        "description": "List of environment variable aliases linked to this job.\n"
                    },
                    "environmentVariableOverrides": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/JobEnvironmentVariableOverride:JobEnvironmentVariableOverride"
                        },
                        "description": "List of environment variable overrides linked to this job.\n"
                    },
                    "environmentVariables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/JobEnvironmentVariable:JobEnvironmentVariable"
                        },
                        "description": "List of environment variables linked to this job.\n"
                    },
                    "externalHost": {
                        "type": "string",
                        "description": "The job external FQDN host [NOTE: only if your job is using a publicly accessible port].\n"
                    },
                    "healthchecks": {
                        "$ref": "#/types/qovery:index/JobHealthchecks:JobHealthchecks",
                        "description": "Configuration for the healthchecks that are going to be executed against your service\n"
                    },
                    "internalHost": {
                        "type": "string",
                        "description": "The job internal host.\n"
                    },
                    "maxDurationSeconds": {
                        "type": "integer",
                        "description": "Job's max duration in seconds. - Must be: `\u003e= 0`. - Default: `300`.\n"
                    },
                    "maxNbRestart": {
                        "type": "integer",
                        "description": "Job's max number of restarts. - Must be: `\u003e= 0`. - Default: `0`.\n"
                    },
                    "memory": {
                        "type": "integer",
                        "description": "RAM of the job in MB [1024MB = 1GB]. - Must be: `\u003e= 1`. - Default: `512`.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the job.\n"
                    },
                    "port": {
                        "type": "integer",
                        "description": "Job's probes port. - Must be: `\u003e= 1` and `\u003c= 65535`.\n"
                    },
                    "schedule": {
                        "$ref": "#/types/qovery:index/JobSchedule:JobSchedule",
                        "description": "Job's schedule.\n"
                    },
                    "secretAliases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/JobSecretAlias:JobSecretAlias"
                        },
                        "description": "List of secret aliases linked to this job.\n"
                    },
                    "secretOverrides": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/JobSecretOverride:JobSecretOverride"
                        },
                        "description": "List of secret overrides linked to this job.\n"
                    },
                    "secrets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/JobSecret:JobSecret"
                        },
                        "description": "List of secrets linked to this job.\n"
                    },
                    "source": {
                        "$ref": "#/types/qovery:index/JobSource:JobSource",
                        "description": "Job's source.\n"
                    }
                },
                "type": "object"
            }
        },
        "qovery:index/organization:Organization": {
            "description": "## # qovery.Organization (Resource)\n\nProvides a Qovery organization resource. This can be used to create and manage Qovery organizations.\n\n\n## Example\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as qovery from \"@ediri/qovery\";\n\nconst myOrganization = new qovery.Organization(\"myOrganization\", {\n    description: \"My organization description\",\n    plan: \"FREE\",\n});\n```\n```python\nimport pulumi\nimport ediri_qovery as qovery\n\nmy_organization = qovery.Organization(\"myOrganization\",\n    description=\"My organization description\",\n    plan=\"FREE\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Qovery = ediri.Qovery;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myOrganization = new Qovery.Organization(\"myOrganization\", new()\n    {\n        Description = \"My organization description\",\n        Plan = \"FREE\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-qovery/sdk/go/qovery\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := qovery.NewOrganization(ctx, \"myOrganization\", \u0026qovery.OrganizationArgs{\n\t\t\tDescription: pulumi.String(\"My organization description\"),\n\t\t\tPlan:        pulumi.String(\"FREE\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.qovery.Organization;\nimport com.pulumi.qovery.OrganizationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myOrganization = new Organization(\"myOrganization\", OrganizationArgs.builder()        \n            .description(\"My organization description\")\n            .plan(\"FREE\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myOrganization:\n    type: qovery:Organization\n    properties:\n      # Optional\n      description: My organization description\n      plan: FREE\n```\n\n\n## Import\n\n\n\n```sh\n $ pulumi import qovery:index/organization:Organization my_organization \"\u003corganization_id\u003e\"\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the organization.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the organization.\n"
                },
                "plan": {
                    "type": "string",
                    "description": "Plan of the organization. - Can be: `BUSINESS`, `ENTERPRISE`, `ENTERPRISE_YEARLY`, `FREE`, `PROFESSIONAL`, `TEAM`,\n`TEAM_YEARLY`.\n"
                }
            },
            "required": [
                "description",
                "name",
                "plan"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the organization.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the organization.\n"
                },
                "plan": {
                    "type": "string",
                    "description": "Plan of the organization. - Can be: `BUSINESS`, `ENTERPRISE`, `ENTERPRISE_YEARLY`, `FREE`, `PROFESSIONAL`, `TEAM`,\n`TEAM_YEARLY`.\n"
                }
            },
            "requiredInputs": [
                "plan"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Organization resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the organization.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the organization.\n"
                    },
                    "plan": {
                        "type": "string",
                        "description": "Plan of the organization. - Can be: `BUSINESS`, `ENTERPRISE`, `ENTERPRISE_YEARLY`, `FREE`, `PROFESSIONAL`, `TEAM`,\n`TEAM_YEARLY`.\n"
                    }
                },
                "type": "object"
            }
        },
        "qovery:index/project:Project": {
            "description": "## # qovery.Project (Resource)\n\nProvides a Qovery project resource. This can be used to create and manage Qovery projects.\n\n\n## Example\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as qovery from \"@ediri/qovery\";\n\nconst myProject = new qovery.Project(\"myProject\", {\n    organizationId: qovery_organization.my_organization.id,\n    description: \"My project description\",\n    environmentVariables: [{\n        key: \"ENV_VAR_KEY\",\n        value: \"ENV_VAR_VALUE\",\n    }],\n    environmentVariableAliases: [{\n        key: \"ENV_VAR_KEY_ALIAS\",\n        value: \"ENV_VAR_KEY\",\n    }],\n    secrets: [{\n        key: \"SECRET_KEY\",\n        value: \"SECRET_VALUE\",\n    }],\n    secretAliases: [{\n        key: \"SECRET_KEY_ALIAS\",\n        value: \"SECRET_KEY\",\n    }],\n}, {\n    dependsOn: [qovery_organization.my_organization],\n});\n```\n```python\nimport pulumi\nimport ediri_qovery as qovery\n\nmy_project = qovery.Project(\"myProject\",\n    organization_id=qovery_organization[\"my_organization\"][\"id\"],\n    description=\"My project description\",\n    environment_variables=[qovery.ProjectEnvironmentVariableArgs(\n        key=\"ENV_VAR_KEY\",\n        value=\"ENV_VAR_VALUE\",\n    )],\n    environment_variable_aliases=[qovery.ProjectEnvironmentVariableAliasArgs(\n        key=\"ENV_VAR_KEY_ALIAS\",\n        value=\"ENV_VAR_KEY\",\n    )],\n    secrets=[qovery.ProjectSecretArgs(\n        key=\"SECRET_KEY\",\n        value=\"SECRET_VALUE\",\n    )],\n    secret_aliases=[qovery.ProjectSecretAliasArgs(\n        key=\"SECRET_KEY_ALIAS\",\n        value=\"SECRET_KEY\",\n    )],\n    opts=pulumi.ResourceOptions(depends_on=[qovery_organization[\"my_organization\"]]))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Qovery = ediri.Qovery;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myProject = new Qovery.Project(\"myProject\", new()\n    {\n        OrganizationId = qovery_organization.My_organization.Id,\n        Description = \"My project description\",\n        EnvironmentVariables = new[]\n        {\n            new Qovery.Inputs.ProjectEnvironmentVariableArgs\n            {\n                Key = \"ENV_VAR_KEY\",\n                Value = \"ENV_VAR_VALUE\",\n            },\n        },\n        EnvironmentVariableAliases = new[]\n        {\n            new Qovery.Inputs.ProjectEnvironmentVariableAliasArgs\n            {\n                Key = \"ENV_VAR_KEY_ALIAS\",\n                Value = \"ENV_VAR_KEY\",\n            },\n        },\n        Secrets = new[]\n        {\n            new Qovery.Inputs.ProjectSecretArgs\n            {\n                Key = \"SECRET_KEY\",\n                Value = \"SECRET_VALUE\",\n            },\n        },\n        SecretAliases = new[]\n        {\n            new Qovery.Inputs.ProjectSecretAliasArgs\n            {\n                Key = \"SECRET_KEY_ALIAS\",\n                Value = \"SECRET_KEY\",\n            },\n        },\n    }, new CustomResourceOptions\n    {\n        DependsOn = new[]\n        {\n            qovery_organization.My_organization,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-qovery/sdk/go/qovery\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := qovery.NewProject(ctx, \"myProject\", \u0026qovery.ProjectArgs{\n\t\t\tOrganizationId: pulumi.Any(qovery_organization.My_organization.Id),\n\t\t\tDescription:    pulumi.String(\"My project description\"),\n\t\t\tEnvironmentVariables: qovery.ProjectEnvironmentVariableArray{\n\t\t\t\t\u0026qovery.ProjectEnvironmentVariableArgs{\n\t\t\t\t\tKey:   pulumi.String(\"ENV_VAR_KEY\"),\n\t\t\t\t\tValue: pulumi.String(\"ENV_VAR_VALUE\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tEnvironmentVariableAliases: qovery.ProjectEnvironmentVariableAliasArray{\n\t\t\t\t\u0026qovery.ProjectEnvironmentVariableAliasArgs{\n\t\t\t\t\tKey:   pulumi.String(\"ENV_VAR_KEY_ALIAS\"),\n\t\t\t\t\tValue: pulumi.String(\"ENV_VAR_KEY\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tSecrets: qovery.ProjectSecretArray{\n\t\t\t\t\u0026qovery.ProjectSecretArgs{\n\t\t\t\t\tKey:   pulumi.String(\"SECRET_KEY\"),\n\t\t\t\t\tValue: pulumi.String(\"SECRET_VALUE\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tSecretAliases: qovery.ProjectSecretAliasArray{\n\t\t\t\t\u0026qovery.ProjectSecretAliasArgs{\n\t\t\t\t\tKey:   pulumi.String(\"SECRET_KEY_ALIAS\"),\n\t\t\t\t\tValue: pulumi.String(\"SECRET_KEY\"),\n\t\t\t\t},\n\t\t\t},\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\tqovery_organization.My_organization,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.qovery.Project;\nimport com.pulumi.qovery.ProjectArgs;\nimport com.pulumi.qovery.inputs.ProjectEnvironmentVariableArgs;\nimport com.pulumi.qovery.inputs.ProjectEnvironmentVariableAliasArgs;\nimport com.pulumi.qovery.inputs.ProjectSecretArgs;\nimport com.pulumi.qovery.inputs.ProjectSecretAliasArgs;\nimport com.pulumi.resources.CustomResourceOptions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myProject = new Project(\"myProject\", ProjectArgs.builder()        \n            .organizationId(qovery_organization.my_organization().id())\n            .description(\"My project description\")\n            .environmentVariables(ProjectEnvironmentVariableArgs.builder()\n                .key(\"ENV_VAR_KEY\")\n                .value(\"ENV_VAR_VALUE\")\n                .build())\n            .environmentVariableAliases(ProjectEnvironmentVariableAliasArgs.builder()\n                .key(\"ENV_VAR_KEY_ALIAS\")\n                .value(\"ENV_VAR_KEY\")\n                .build())\n            .secrets(ProjectSecretArgs.builder()\n                .key(\"SECRET_KEY\")\n                .value(\"SECRET_VALUE\")\n                .build())\n            .secretAliases(ProjectSecretAliasArgs.builder()\n                .key(\"SECRET_KEY_ALIAS\")\n                .value(\"SECRET_KEY\")\n                .build())\n            .build(), CustomResourceOptions.builder()\n                .dependsOn(qovery_organization.my_organization())\n                .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myProject:\n    type: qovery:Project\n    properties:\n      # Required\n      organizationId: ${qovery_organization.my_organization.id}\n      # Optional\n      description: My project description\n      environmentVariables:\n        - key: ENV_VAR_KEY\n          value: ENV_VAR_VALUE\n      environmentVariableAliases:\n        - key: ENV_VAR_KEY_ALIAS\n          value: ENV_VAR_KEY\n      secrets:\n        - key: SECRET_KEY\n          value: SECRET_VALUE\n      secretAliases:\n        - key: SECRET_KEY_ALIAS\n          value: SECRET_KEY\n    options:\n      dependson:\n        - ${qovery_organization.my_organization}\n```\n\n\n## Import\n\n\n\n```sh\n $ pulumi import qovery:index/project:Project my_project \"\u003cproject_id\u003e\"\n```\n\n ",
            "properties": {
                "builtInEnvironmentVariables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/qovery:index/ProjectBuiltInEnvironmentVariable:ProjectBuiltInEnvironmentVariable"
                    },
                    "description": "List of built-in environment variables linked to this project.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the project.\n"
                },
                "environmentVariableAliases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/qovery:index/ProjectEnvironmentVariableAlias:ProjectEnvironmentVariableAlias"
                    },
                    "description": "List of environment variable aliases linked to this project.\n"
                },
                "environmentVariables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/qovery:index/ProjectEnvironmentVariable:ProjectEnvironmentVariable"
                    },
                    "description": "List of environment variables linked to this project.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the project.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "Id of the organization.\n"
                },
                "secretAliases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/qovery:index/ProjectSecretAlias:ProjectSecretAlias"
                    },
                    "description": "List of secret aliases linked to this project.\n"
                },
                "secrets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/qovery:index/ProjectSecret:ProjectSecret"
                    },
                    "description": "List of secrets linked to this project.\n"
                }
            },
            "required": [
                "builtInEnvironmentVariables",
                "description",
                "name",
                "organizationId"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the project.\n"
                },
                "environmentVariableAliases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/qovery:index/ProjectEnvironmentVariableAlias:ProjectEnvironmentVariableAlias"
                    },
                    "description": "List of environment variable aliases linked to this project.\n"
                },
                "environmentVariables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/qovery:index/ProjectEnvironmentVariable:ProjectEnvironmentVariable"
                    },
                    "description": "List of environment variables linked to this project.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the project.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "Id of the organization.\n"
                },
                "secretAliases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/qovery:index/ProjectSecretAlias:ProjectSecretAlias"
                    },
                    "description": "List of secret aliases linked to this project.\n"
                },
                "secrets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/qovery:index/ProjectSecret:ProjectSecret"
                    },
                    "description": "List of secrets linked to this project.\n"
                }
            },
            "requiredInputs": [
                "organizationId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Project resources.\n",
                "properties": {
                    "builtInEnvironmentVariables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/ProjectBuiltInEnvironmentVariable:ProjectBuiltInEnvironmentVariable"
                        },
                        "description": "List of built-in environment variables linked to this project.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the project.\n"
                    },
                    "environmentVariableAliases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/ProjectEnvironmentVariableAlias:ProjectEnvironmentVariableAlias"
                        },
                        "description": "List of environment variable aliases linked to this project.\n"
                    },
                    "environmentVariables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/ProjectEnvironmentVariable:ProjectEnvironmentVariable"
                        },
                        "description": "List of environment variables linked to this project.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the project.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "Id of the organization.\n"
                    },
                    "secretAliases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/ProjectSecretAlias:ProjectSecretAlias"
                        },
                        "description": "List of secret aliases linked to this project.\n"
                    },
                    "secrets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/ProjectSecret:ProjectSecret"
                        },
                        "description": "List of secrets linked to this project.\n"
                    }
                },
                "type": "object"
            }
        },
        "qovery:index/scalewayCredentials:ScalewayCredentials": {
            "description": "## # qovery.ScalewayCredentials (Resource)\n\nProvides a Qovery SCALEWAY credentials resource. This can be used to create and manage Qovery SCALEWAY credentials.\n\n\n## Example\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as qovery from \"@ediri/qovery\";\n\nconst myScalewayCreds = new qovery.ScalewayCredentials(\"myScalewayCreds\", {\n    organizationId: qovery_organization.my_organization.id,\n    scalewayAccessKey: \"\u003cyour-scaleway-access-key\u003e\",\n    scalewaySecretKey: \"\u003cyour-scaleway-secret-key\u003e\",\n    scalewayProjectId: \"\u003cyour-scaleway-project-id\u003e\",\n}, {\n    dependsOn: [qovery_organization.my_organization],\n});\n```\n```python\nimport pulumi\nimport ediri_qovery as qovery\n\nmy_scaleway_creds = qovery.ScalewayCredentials(\"myScalewayCreds\",\n    organization_id=qovery_organization[\"my_organization\"][\"id\"],\n    scaleway_access_key=\"\u003cyour-scaleway-access-key\u003e\",\n    scaleway_secret_key=\"\u003cyour-scaleway-secret-key\u003e\",\n    scaleway_project_id=\"\u003cyour-scaleway-project-id\u003e\",\n    opts=pulumi.ResourceOptions(depends_on=[qovery_organization[\"my_organization\"]]))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Qovery = ediri.Qovery;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myScalewayCreds = new Qovery.ScalewayCredentials(\"myScalewayCreds\", new()\n    {\n        OrganizationId = qovery_organization.My_organization.Id,\n        ScalewayAccessKey = \"\u003cyour-scaleway-access-key\u003e\",\n        ScalewaySecretKey = \"\u003cyour-scaleway-secret-key\u003e\",\n        ScalewayProjectId = \"\u003cyour-scaleway-project-id\u003e\",\n    }, new CustomResourceOptions\n    {\n        DependsOn = new[]\n        {\n            qovery_organization.My_organization,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-qovery/sdk/go/qovery\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := qovery.NewScalewayCredentials(ctx, \"myScalewayCreds\", \u0026qovery.ScalewayCredentialsArgs{\n\t\t\tOrganizationId:    pulumi.Any(qovery_organization.My_organization.Id),\n\t\t\tScalewayAccessKey: pulumi.String(\"\u003cyour-scaleway-access-key\u003e\"),\n\t\t\tScalewaySecretKey: pulumi.String(\"\u003cyour-scaleway-secret-key\u003e\"),\n\t\t\tScalewayProjectId: pulumi.String(\"\u003cyour-scaleway-project-id\u003e\"),\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\tqovery_organization.My_organization,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.qovery.ScalewayCredentials;\nimport com.pulumi.qovery.ScalewayCredentialsArgs;\nimport com.pulumi.resources.CustomResourceOptions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myScalewayCreds = new ScalewayCredentials(\"myScalewayCreds\", ScalewayCredentialsArgs.builder()        \n            .organizationId(qovery_organization.my_organization().id())\n            .scalewayAccessKey(\"\u003cyour-scaleway-access-key\u003e\")\n            .scalewaySecretKey(\"\u003cyour-scaleway-secret-key\u003e\")\n            .scalewayProjectId(\"\u003cyour-scaleway-project-id\u003e\")\n            .build(), CustomResourceOptions.builder()\n                .dependsOn(qovery_organization.my_organization())\n                .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myScalewayCreds:\n    type: qovery:ScalewayCredentials\n    properties:\n      # Required\n      organizationId: ${qovery_organization.my_organization.id}\n      scalewayAccessKey: \u003cyour-scaleway-access-key\u003e\n      scalewaySecretKey: \u003cyour-scaleway-secret-key\u003e\n      scalewayProjectId: \u003cyour-scaleway-project-id\u003e\n    options:\n      dependson:\n        - ${qovery_organization.my_organization}\n```\n\n\n## Import\n\n\n\n```sh\n $ pulumi import qovery:index/scalewayCredentials:ScalewayCredentials my_scaleway_creds \"\u003corganization_id\u003e,\u003cscaleway_credentials_id\u003e\"\n```\n\n ",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the scaleway credentials.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "Id of the organization.\n"
                },
                "scalewayAccessKey": {
                    "type": "string",
                    "description": "Your SCALEWAY access key id.\n"
                },
                "scalewayOrganizationId": {
                    "type": "string",
                    "description": "Your SCALEWAY organization ID.\n"
                },
                "scalewayProjectId": {
                    "type": "string",
                    "description": "Your SCALEWAY project ID.\n"
                },
                "scalewaySecretKey": {
                    "type": "string",
                    "description": "Your SCALEWAY secret key.\n",
                    "secret": true
                }
            },
            "required": [
                "name",
                "organizationId",
                "scalewayAccessKey",
                "scalewayOrganizationId",
                "scalewayProjectId",
                "scalewaySecretKey"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "Name of the scaleway credentials.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "Id of the organization.\n"
                },
                "scalewayAccessKey": {
                    "type": "string",
                    "description": "Your SCALEWAY access key id.\n"
                },
                "scalewayOrganizationId": {
                    "type": "string",
                    "description": "Your SCALEWAY organization ID.\n"
                },
                "scalewayProjectId": {
                    "type": "string",
                    "description": "Your SCALEWAY project ID.\n"
                },
                "scalewaySecretKey": {
                    "type": "string",
                    "description": "Your SCALEWAY secret key.\n",
                    "secret": true
                }
            },
            "requiredInputs": [
                "organizationId",
                "scalewayAccessKey",
                "scalewayOrganizationId",
                "scalewayProjectId",
                "scalewaySecretKey"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ScalewayCredentials resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the scaleway credentials.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "Id of the organization.\n"
                    },
                    "scalewayAccessKey": {
                        "type": "string",
                        "description": "Your SCALEWAY access key id.\n"
                    },
                    "scalewayOrganizationId": {
                        "type": "string",
                        "description": "Your SCALEWAY organization ID.\n"
                    },
                    "scalewayProjectId": {
                        "type": "string",
                        "description": "Your SCALEWAY project ID.\n"
                    },
                    "scalewaySecretKey": {
                        "type": "string",
                        "description": "Your SCALEWAY secret key.\n",
                        "secret": true
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "qovery:index/getApplication:getApplication": {
            "description": "## # qovery.Application (Data Source)\n\nProvides a Qovery application resource. This can be used to create and manage Qovery applications.\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as qovery from \"@pulumi/qovery\";\n\nconst myApplication = qovery.getApplication({\n    id: \"\u003capplication_id\u003e\",\n});\n```\n```python\nimport pulumi\nimport pulumi_qovery as qovery\n\nmy_application = qovery.get_application(id=\"\u003capplication_id\u003e\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Qovery = Pulumi.Qovery;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myApplication = Qovery.GetApplication.Invoke(new()\n    {\n        Id = \"\u003capplication_id\u003e\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-qovery/sdk/go/qovery\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := qovery.LookupApplication(ctx, \u0026qovery.LookupApplicationArgs{\n\t\t\tId: \"\u003capplication_id\u003e\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.qovery.QoveryFunctions;\nimport com.pulumi.qovery.inputs.GetApplicationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myApplication = QoveryFunctions.getApplication(GetApplicationArgs.builder()\n            .id(\"\u003capplication_id\u003e\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myApplication:\n    fn::invoke:\n      Function: qovery:getApplication\n      Arguments:\n        id: \u003capplication_id\u003e\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getApplication.\n",
                "properties": {
                    "advancedSettingsJson": {
                        "type": "string"
                    },
                    "arguments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "autoDeploy": {
                        "type": "boolean"
                    },
                    "autoPreview": {
                        "type": "boolean"
                    },
                    "buildpackLanguage": {
                        "type": "string"
                    },
                    "cpu": {
                        "type": "integer"
                    },
                    "customDomains": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/getApplicationCustomDomain:getApplicationCustomDomain"
                        }
                    },
                    "deploymentStageId": {
                        "type": "string"
                    },
                    "dockerfilePath": {
                        "type": "string"
                    },
                    "entrypoint": {
                        "type": "string"
                    },
                    "environmentVariableAliases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/getApplicationEnvironmentVariableAlias:getApplicationEnvironmentVariableAlias"
                        }
                    },
                    "environmentVariableOverrides": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/getApplicationEnvironmentVariableOverride:getApplicationEnvironmentVariableOverride"
                        }
                    },
                    "environmentVariables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/getApplicationEnvironmentVariable:getApplicationEnvironmentVariable"
                        }
                    },
                    "healthchecks": {
                        "$ref": "#/types/qovery:index/getApplicationHealthchecks:getApplicationHealthchecks"
                    },
                    "id": {
                        "type": "string"
                    },
                    "maxRunningInstances": {
                        "type": "integer"
                    },
                    "memory": {
                        "type": "integer"
                    },
                    "minRunningInstances": {
                        "type": "integer"
                    },
                    "secretAliases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/getApplicationSecretAlias:getApplicationSecretAlias"
                        }
                    },
                    "secretOverrides": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/getApplicationSecretOverride:getApplicationSecretOverride"
                        }
                    },
                    "secrets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/getApplicationSecret:getApplicationSecret"
                        }
                    },
                    "storages": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/getApplicationStorage:getApplicationStorage"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getApplication.\n",
                "properties": {
                    "advancedSettingsJson": {
                        "type": "string"
                    },
                    "arguments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "autoDeploy": {
                        "type": "boolean"
                    },
                    "autoPreview": {
                        "type": "boolean"
                    },
                    "buildMode": {
                        "type": "string"
                    },
                    "buildpackLanguage": {
                        "type": "string"
                    },
                    "builtInEnvironmentVariables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/getApplicationBuiltInEnvironmentVariable:getApplicationBuiltInEnvironmentVariable"
                        }
                    },
                    "cpu": {
                        "type": "integer"
                    },
                    "customDomains": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/getApplicationCustomDomain:getApplicationCustomDomain"
                        }
                    },
                    "deploymentStageId": {
                        "type": "string"
                    },
                    "dockerfilePath": {
                        "type": "string"
                    },
                    "entrypoint": {
                        "type": "string"
                    },
                    "environmentId": {
                        "type": "string"
                    },
                    "environmentVariableAliases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/getApplicationEnvironmentVariableAlias:getApplicationEnvironmentVariableAlias"
                        }
                    },
                    "environmentVariableOverrides": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/getApplicationEnvironmentVariableOverride:getApplicationEnvironmentVariableOverride"
                        }
                    },
                    "environmentVariables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/getApplicationEnvironmentVariable:getApplicationEnvironmentVariable"
                        }
                    },
                    "externalHost": {
                        "type": "string"
                    },
                    "gitRepository": {
                        "$ref": "#/types/qovery:index/getApplicationGitRepository:getApplicationGitRepository"
                    },
                    "healthchecks": {
                        "$ref": "#/types/qovery:index/getApplicationHealthchecks:getApplicationHealthchecks"
                    },
                    "id": {
                        "type": "string"
                    },
                    "internalHost": {
                        "type": "string"
                    },
                    "maxRunningInstances": {
                        "type": "integer"
                    },
                    "memory": {
                        "type": "integer"
                    },
                    "minRunningInstances": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "ports": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/getApplicationPort:getApplicationPort"
                        }
                    },
                    "secretAliases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/getApplicationSecretAlias:getApplicationSecretAlias"
                        }
                    },
                    "secretOverrides": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/getApplicationSecretOverride:getApplicationSecretOverride"
                        }
                    },
                    "secrets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/getApplicationSecret:getApplicationSecret"
                        }
                    },
                    "storages": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/getApplicationStorage:getApplicationStorage"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "advancedSettingsJson",
                    "arguments",
                    "autoDeploy",
                    "autoPreview",
                    "buildMode",
                    "buildpackLanguage",
                    "builtInEnvironmentVariables",
                    "cpu",
                    "deploymentStageId",
                    "dockerfilePath",
                    "entrypoint",
                    "environmentId",
                    "externalHost",
                    "gitRepository",
                    "id",
                    "internalHost",
                    "maxRunningInstances",
                    "memory",
                    "minRunningInstances",
                    "name",
                    "ports",
                    "storages"
                ]
            }
        },
        "qovery:index/getAwsCredentials:getAwsCredentials": {
            "description": "## # qovery.AwsCredentials (Data Source)\n\nProvides a Qovery AWS credentials resource. This can be used to create and manage Qovery AWS credentials.\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as qovery from \"@pulumi/qovery\";\n\nconst myAwsCreds = qovery.getAwsCredentials({\n    id: \"\u003ccredentials_id\u003e\",\n    organizationId: \"\u003corganization_id\u003e\",\n});\n```\n```python\nimport pulumi\nimport pulumi_qovery as qovery\n\nmy_aws_creds = qovery.get_aws_credentials(id=\"\u003ccredentials_id\u003e\",\n    organization_id=\"\u003corganization_id\u003e\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Qovery = Pulumi.Qovery;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myAwsCreds = Qovery.GetAwsCredentials.Invoke(new()\n    {\n        Id = \"\u003ccredentials_id\u003e\",\n        OrganizationId = \"\u003corganization_id\u003e\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-qovery/sdk/go/qovery\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := qovery.LookupAwsCredentials(ctx, \u0026qovery.LookupAwsCredentialsArgs{\n\t\t\tId:             \"\u003ccredentials_id\u003e\",\n\t\t\tOrganizationId: \"\u003corganization_id\u003e\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.qovery.QoveryFunctions;\nimport com.pulumi.qovery.inputs.GetAwsCredentialsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myAwsCreds = QoveryFunctions.getAwsCredentials(GetAwsCredentialsArgs.builder()\n            .id(\"\u003ccredentials_id\u003e\")\n            .organizationId(\"\u003corganization_id\u003e\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myAwsCreds:\n    fn::invoke:\n      Function: qovery:getAwsCredentials\n      Arguments:\n        id: \u003ccredentials_id\u003e\n        organizationId: \u003corganization_id\u003e\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getAwsCredentials.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Id of the AWS credentials.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "Id of the organization.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "organizationId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAwsCredentials.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Id of the AWS credentials.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the aws credentials.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "Id of the organization.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "name",
                    "organizationId"
                ]
            }
        },
        "qovery:index/getCluster:getCluster": {
            "description": "## # qovery.Cluster (Data Source)\n\nProvides a Qovery cluster resource. This can be used to create and manage Qovery cluster.\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as qovery from \"@pulumi/qovery\";\n\nconst myCluster = qovery.getCluster({\n    id: \"\u003ccluster_id\u003e\",\n    organizationId: \"\u003corganization_id\u003e\",\n});\n```\n```python\nimport pulumi\nimport pulumi_qovery as qovery\n\nmy_cluster = qovery.get_cluster(id=\"\u003ccluster_id\u003e\",\n    organization_id=\"\u003corganization_id\u003e\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Qovery = Pulumi.Qovery;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myCluster = Qovery.GetCluster.Invoke(new()\n    {\n        Id = \"\u003ccluster_id\u003e\",\n        OrganizationId = \"\u003corganization_id\u003e\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-qovery/sdk/go/qovery\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := qovery.LookupCluster(ctx, \u0026qovery.LookupClusterArgs{\n\t\t\tId:             \"\u003ccluster_id\u003e\",\n\t\t\tOrganizationId: \"\u003corganization_id\u003e\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.qovery.QoveryFunctions;\nimport com.pulumi.qovery.inputs.GetClusterArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myCluster = QoveryFunctions.getCluster(GetClusterArgs.builder()\n            .id(\"\u003ccluster_id\u003e\")\n            .organizationId(\"\u003corganization_id\u003e\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myCluster:\n    fn::invoke:\n      Function: qovery:getCluster\n      Arguments:\n        id: \u003ccluster_id\u003e\n        organizationId: \u003corganization_id\u003e\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getCluster.\n",
                "properties": {
                    "advancedSettingsJson": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "diskSize": {
                        "type": "integer"
                    },
                    "features": {
                        "$ref": "#/types/qovery:index/getClusterFeatures:getClusterFeatures"
                    },
                    "id": {
                        "type": "string"
                    },
                    "kubernetesMode": {
                        "type": "string"
                    },
                    "maxRunningNodes": {
                        "type": "integer"
                    },
                    "minRunningNodes": {
                        "type": "integer"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "routingTables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/getClusterRoutingTable:getClusterRoutingTable"
                        }
                    },
                    "state": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "organizationId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getCluster.\n",
                "properties": {
                    "advancedSettingsJson": {
                        "type": "string"
                    },
                    "cloudProvider": {
                        "type": "string"
                    },
                    "credentialsId": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "diskSize": {
                        "type": "integer"
                    },
                    "features": {
                        "$ref": "#/types/qovery:index/getClusterFeatures:getClusterFeatures"
                    },
                    "id": {
                        "type": "string"
                    },
                    "instanceType": {
                        "type": "string"
                    },
                    "kubernetesMode": {
                        "type": "string"
                    },
                    "maxRunningNodes": {
                        "type": "integer"
                    },
                    "minRunningNodes": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    },
                    "routingTables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/getClusterRoutingTable:getClusterRoutingTable"
                        }
                    },
                    "state": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "advancedSettingsJson",
                    "cloudProvider",
                    "credentialsId",
                    "description",
                    "diskSize",
                    "features",
                    "id",
                    "instanceType",
                    "kubernetesMode",
                    "maxRunningNodes",
                    "minRunningNodes",
                    "name",
                    "organizationId",
                    "region",
                    "routingTables",
                    "state"
                ]
            }
        },
        "qovery:index/getContainer:getContainer": {
            "description": "## # qovery.Container (Data Source)\n\nProvides a Qovery container resource. This can be used to create and manage Qovery container registry.\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as qovery from \"@pulumi/qovery\";\n\nconst myContainer = qovery.getContainer({\n    id: \"\u003ccontainer_id\u003e\",\n});\n```\n```python\nimport pulumi\nimport pulumi_qovery as qovery\n\nmy_container = qovery.get_container(id=\"\u003ccontainer_id\u003e\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Qovery = Pulumi.Qovery;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myContainer = Qovery.GetContainer.Invoke(new()\n    {\n        Id = \"\u003ccontainer_id\u003e\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-qovery/sdk/go/qovery\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := qovery.LookupContainer(ctx, \u0026qovery.LookupContainerArgs{\n\t\t\tId: \"\u003ccontainer_id\u003e\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.qovery.QoveryFunctions;\nimport com.pulumi.qovery.inputs.GetContainerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myContainer = QoveryFunctions.getContainer(GetContainerArgs.builder()\n            .id(\"\u003ccontainer_id\u003e\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myContainer:\n    fn::invoke:\n      Function: qovery:getContainer\n      Arguments:\n        id: \u003ccontainer_id\u003e\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getContainer.\n",
                "properties": {
                    "advancedSettingsJson": {
                        "type": "string"
                    },
                    "arguments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "autoDeploy": {
                        "type": "boolean"
                    },
                    "autoPreview": {
                        "type": "boolean"
                    },
                    "cpu": {
                        "type": "integer"
                    },
                    "customDomains": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/getContainerCustomDomain:getContainerCustomDomain"
                        }
                    },
                    "deploymentStageId": {
                        "type": "string"
                    },
                    "entrypoint": {
                        "type": "string"
                    },
                    "environmentVariableAliases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/getContainerEnvironmentVariableAlias:getContainerEnvironmentVariableAlias"
                        }
                    },
                    "environmentVariableOverrides": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/getContainerEnvironmentVariableOverride:getContainerEnvironmentVariableOverride"
                        }
                    },
                    "environmentVariables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/getContainerEnvironmentVariable:getContainerEnvironmentVariable"
                        }
                    },
                    "healthchecks": {
                        "$ref": "#/types/qovery:index/getContainerHealthchecks:getContainerHealthchecks"
                    },
                    "id": {
                        "type": "string"
                    },
                    "maxRunningInstances": {
                        "type": "integer"
                    },
                    "memory": {
                        "type": "integer"
                    },
                    "minRunningInstances": {
                        "type": "integer"
                    },
                    "ports": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/getContainerPort:getContainerPort"
                        }
                    },
                    "secretAliases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/getContainerSecretAlias:getContainerSecretAlias"
                        }
                    },
                    "secretOverrides": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/getContainerSecretOverride:getContainerSecretOverride"
                        }
                    },
                    "secrets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/getContainerSecret:getContainerSecret"
                        }
                    },
                    "storages": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/getContainerStorage:getContainerStorage"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getContainer.\n",
                "properties": {
                    "advancedSettingsJson": {
                        "type": "string"
                    },
                    "arguments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "autoDeploy": {
                        "type": "boolean"
                    },
                    "autoPreview": {
                        "type": "boolean"
                    },
                    "builtInEnvironmentVariables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/getContainerBuiltInEnvironmentVariable:getContainerBuiltInEnvironmentVariable"
                        }
                    },
                    "cpu": {
                        "type": "integer"
                    },
                    "customDomains": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/getContainerCustomDomain:getContainerCustomDomain"
                        }
                    },
                    "deploymentStageId": {
                        "type": "string"
                    },
                    "entrypoint": {
                        "type": "string"
                    },
                    "environmentId": {
                        "type": "string"
                    },
                    "environmentVariableAliases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/getContainerEnvironmentVariableAlias:getContainerEnvironmentVariableAlias"
                        }
                    },
                    "environmentVariableOverrides": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/getContainerEnvironmentVariableOverride:getContainerEnvironmentVariableOverride"
                        }
                    },
                    "environmentVariables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/getContainerEnvironmentVariable:getContainerEnvironmentVariable"
                        }
                    },
                    "externalHost": {
                        "type": "string"
                    },
                    "healthchecks": {
                        "$ref": "#/types/qovery:index/getContainerHealthchecks:getContainerHealthchecks"
                    },
                    "id": {
                        "type": "string"
                    },
                    "imageName": {
                        "type": "string"
                    },
                    "internalHost": {
                        "type": "string"
                    },
                    "maxRunningInstances": {
                        "type": "integer"
                    },
                    "memory": {
                        "type": "integer"
                    },
                    "minRunningInstances": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "ports": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/getContainerPort:getContainerPort"
                        }
                    },
                    "registryId": {
                        "type": "string"
                    },
                    "secretAliases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/getContainerSecretAlias:getContainerSecretAlias"
                        }
                    },
                    "secretOverrides": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/getContainerSecretOverride:getContainerSecretOverride"
                        }
                    },
                    "secrets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/getContainerSecret:getContainerSecret"
                        }
                    },
                    "storages": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/getContainerStorage:getContainerStorage"
                        }
                    },
                    "tag": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "advancedSettingsJson",
                    "autoDeploy",
                    "autoPreview",
                    "builtInEnvironmentVariables",
                    "cpu",
                    "deploymentStageId",
                    "entrypoint",
                    "environmentId",
                    "externalHost",
                    "id",
                    "imageName",
                    "internalHost",
                    "maxRunningInstances",
                    "memory",
                    "minRunningInstances",
                    "name",
                    "ports",
                    "registryId",
                    "storages",
                    "tag"
                ]
            }
        },
        "qovery:index/getContainerRegistry:getContainerRegistry": {
            "description": "## # qovery.ContainerRegistry (Data Source)\n\nProvides a Qovery container registry resource. This can be used to create and manage Qovery container registry.\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as qovery from \"@pulumi/qovery\";\n\nconst myContainerRegistry = qovery.getContainerRegistry({\n    id: \"\u003ccontainer_registry_id\u003e\",\n});\n```\n```python\nimport pulumi\nimport pulumi_qovery as qovery\n\nmy_container_registry = qovery.get_container_registry(id=\"\u003ccontainer_registry_id\u003e\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Qovery = Pulumi.Qovery;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myContainerRegistry = Qovery.GetContainerRegistry.Invoke(new()\n    {\n        Id = \"\u003ccontainer_registry_id\u003e\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-qovery/sdk/go/qovery\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := qovery.LookupContainerRegistry(ctx, \u0026qovery.LookupContainerRegistryArgs{\n\t\t\tId: \"\u003ccontainer_registry_id\u003e\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.qovery.QoveryFunctions;\nimport com.pulumi.qovery.inputs.GetContainerRegistryArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myContainerRegistry = QoveryFunctions.getContainerRegistry(GetContainerRegistryArgs.builder()\n            .id(\"\u003ccontainer_registry_id\u003e\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myContainerRegistry:\n    fn::invoke:\n      Function: qovery:getContainerRegistry\n      Arguments:\n        id: \u003ccontainer_registry_id\u003e\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getContainerRegistry.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "organizationId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getContainerRegistry.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "kind": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "id",
                    "kind",
                    "name",
                    "organizationId",
                    "url"
                ]
            }
        },
        "qovery:index/getDatabase:getDatabase": {
            "description": "## # qovery.Database (Data Source)\n\nProvides a Qovery database resource. This can be used to create and manage Qovery databases.\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as qovery from \"@pulumi/qovery\";\n\nconst myDatabase = qovery.getDatabase({\n    id: \"\u003cdatabase_id\u003e\",\n});\n```\n```python\nimport pulumi\nimport pulumi_qovery as qovery\n\nmy_database = qovery.get_database(id=\"\u003cdatabase_id\u003e\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Qovery = Pulumi.Qovery;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myDatabase = Qovery.GetDatabase.Invoke(new()\n    {\n        Id = \"\u003cdatabase_id\u003e\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-qovery/sdk/go/qovery\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := qovery.LookupDatabase(ctx, \u0026qovery.LookupDatabaseArgs{\n\t\t\tId: \"\u003cdatabase_id\u003e\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.qovery.QoveryFunctions;\nimport com.pulumi.qovery.inputs.GetDatabaseArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myDatabase = QoveryFunctions.getDatabase(GetDatabaseArgs.builder()\n            .id(\"\u003cdatabase_id\u003e\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myDatabase:\n    fn::invoke:\n      Function: qovery:getDatabase\n      Arguments:\n        id: \u003cdatabase_id\u003e\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDatabase.\n",
                "properties": {
                    "accessibility": {
                        "type": "string"
                    },
                    "cpu": {
                        "type": "integer"
                    },
                    "deploymentStageId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "instanceType": {
                        "type": "string"
                    },
                    "memory": {
                        "type": "integer"
                    },
                    "storage": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDatabase.\n",
                "properties": {
                    "accessibility": {
                        "type": "string"
                    },
                    "cpu": {
                        "type": "integer"
                    },
                    "deploymentStageId": {
                        "type": "string"
                    },
                    "environmentId": {
                        "type": "string"
                    },
                    "externalHost": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "instanceType": {
                        "type": "string"
                    },
                    "internalHost": {
                        "type": "string"
                    },
                    "login": {
                        "type": "string"
                    },
                    "memory": {
                        "type": "integer"
                    },
                    "mode": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "password": {
                        "type": "string"
                    },
                    "port": {
                        "type": "integer"
                    },
                    "storage": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string"
                    },
                    "version": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "deploymentStageId",
                    "environmentId",
                    "externalHost",
                    "id",
                    "instanceType",
                    "internalHost",
                    "login",
                    "mode",
                    "name",
                    "password",
                    "port",
                    "type",
                    "version"
                ]
            }
        },
        "qovery:index/getDeployment:getDeployment": {
            "description": "## # qovery.Deployment (Data Source)\n\nProvides a Qovery deployment stage resource. This can be used to create and manage Qovery deployment stages.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDeployment.\n",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "version": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDeployment.\n",
                "properties": {
                    "desiredState": {
                        "type": "string"
                    },
                    "environmentId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "version": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "desiredState",
                    "environmentId",
                    "id"
                ]
            }
        },
        "qovery:index/getDeploymentStage:getDeploymentStage": {
            "description": "## # qovery.DeploymentStage (Data Source)\n\nProvides a Qovery deployment stage resource. This can be used to create and manage Qovery deployment stages.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDeploymentStage.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "isAfter": {
                        "type": "string"
                    },
                    "isBefore": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDeploymentStage.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "environmentId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "isAfter": {
                        "type": "string"
                    },
                    "isBefore": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "environmentId",
                    "id",
                    "isAfter",
                    "isBefore",
                    "name"
                ]
            }
        },
        "qovery:index/getEnvironment:getEnvironment": {
            "description": "## # qovery.Environment (Data Source)\n\nProvides a Qovery environment resource. This can be used to create and manage Qovery environments.\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as qovery from \"@pulumi/qovery\";\n\nconst myEnvironment = qovery.getEnvironment({\n    id: \"\u003cenvironment_id\u003e\",\n});\n```\n```python\nimport pulumi\nimport pulumi_qovery as qovery\n\nmy_environment = qovery.get_environment(id=\"\u003cenvironment_id\u003e\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Qovery = Pulumi.Qovery;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myEnvironment = Qovery.GetEnvironment.Invoke(new()\n    {\n        Id = \"\u003cenvironment_id\u003e\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-qovery/sdk/go/qovery\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := qovery.LookupEnvironment(ctx, \u0026qovery.LookupEnvironmentArgs{\n\t\t\tId: \"\u003cenvironment_id\u003e\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.qovery.QoveryFunctions;\nimport com.pulumi.qovery.inputs.GetEnvironmentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myEnvironment = QoveryFunctions.getEnvironment(GetEnvironmentArgs.builder()\n            .id(\"\u003cenvironment_id\u003e\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myEnvironment:\n    fn::invoke:\n      Function: qovery:getEnvironment\n      Arguments:\n        id: \u003cenvironment_id\u003e\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getEnvironment.\n",
                "properties": {
                    "environmentVariableAliases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/getEnvironmentEnvironmentVariableAlias:getEnvironmentEnvironmentVariableAlias"
                        }
                    },
                    "environmentVariableOverrides": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/getEnvironmentEnvironmentVariableOverride:getEnvironmentEnvironmentVariableOverride"
                        }
                    },
                    "environmentVariables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/getEnvironmentEnvironmentVariable:getEnvironmentEnvironmentVariable"
                        }
                    },
                    "id": {
                        "type": "string"
                    },
                    "mode": {
                        "type": "string"
                    },
                    "secretAliases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/getEnvironmentSecretAlias:getEnvironmentSecretAlias"
                        }
                    },
                    "secretOverrides": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/getEnvironmentSecretOverride:getEnvironmentSecretOverride"
                        }
                    },
                    "secrets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/getEnvironmentSecret:getEnvironmentSecret"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getEnvironment.\n",
                "properties": {
                    "builtInEnvironmentVariables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/getEnvironmentBuiltInEnvironmentVariable:getEnvironmentBuiltInEnvironmentVariable"
                        }
                    },
                    "clusterId": {
                        "type": "string"
                    },
                    "environmentVariableAliases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/getEnvironmentEnvironmentVariableAlias:getEnvironmentEnvironmentVariableAlias"
                        }
                    },
                    "environmentVariableOverrides": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/getEnvironmentEnvironmentVariableOverride:getEnvironmentEnvironmentVariableOverride"
                        }
                    },
                    "environmentVariables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/getEnvironmentEnvironmentVariable:getEnvironmentEnvironmentVariable"
                        }
                    },
                    "id": {
                        "type": "string"
                    },
                    "mode": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "secretAliases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/getEnvironmentSecretAlias:getEnvironmentSecretAlias"
                        }
                    },
                    "secretOverrides": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/getEnvironmentSecretOverride:getEnvironmentSecretOverride"
                        }
                    },
                    "secrets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/getEnvironmentSecret:getEnvironmentSecret"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "builtInEnvironmentVariables",
                    "clusterId",
                    "environmentVariableAliases",
                    "environmentVariableOverrides",
                    "environmentVariables",
                    "id",
                    "mode",
                    "name",
                    "projectId",
                    "secretAliases",
                    "secrets"
                ]
            }
        },
        "qovery:index/getGitToken:getGitToken": {
            "description": "## # qovery.GitToken (Data Source)\n\nProvides a Qovery git token resource. This can be used to create and manage Qovery git token.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getGitToken.\n",
                "properties": {
                    "bitbucketWorkspace": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGitToken.\n",
                "properties": {
                    "bitbucketWorkspace": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "token": {
                        "type": "string",
                        "secret": true
                    },
                    "type": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "bitbucketWorkspace",
                    "description",
                    "id",
                    "name",
                    "organizationId",
                    "token",
                    "type"
                ]
            }
        },
        "qovery:index/getHelm:getHelm": {
            "description": "## # qovery.Helm (Data Source)\n\nProvides a Qovery helm resource.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getHelm.\n",
                "properties": {
                    "advancedSettingsJson": {
                        "type": "string"
                    },
                    "deploymentStageId": {
                        "type": "string"
                    },
                    "environmentVariableAliases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/getHelmEnvironmentVariableAlias:getHelmEnvironmentVariableAlias"
                        }
                    },
                    "environmentVariableOverrides": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/getHelmEnvironmentVariableOverride:getHelmEnvironmentVariableOverride"
                        }
                    },
                    "environmentVariables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/getHelmEnvironmentVariable:getHelmEnvironmentVariable"
                        }
                    },
                    "id": {
                        "type": "string"
                    },
                    "secretAliases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/getHelmSecretAlias:getHelmSecretAlias"
                        }
                    },
                    "secretOverrides": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/getHelmSecretOverride:getHelmSecretOverride"
                        }
                    },
                    "secrets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/getHelmSecret:getHelmSecret"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getHelm.\n",
                "properties": {
                    "advancedSettingsJson": {
                        "type": "string"
                    },
                    "builtInEnvironmentVariables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/getHelmBuiltInEnvironmentVariable:getHelmBuiltInEnvironmentVariable"
                        }
                    },
                    "deploymentStageId": {
                        "type": "string"
                    },
                    "environmentId": {
                        "type": "string"
                    },
                    "environmentVariableAliases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/getHelmEnvironmentVariableAlias:getHelmEnvironmentVariableAlias"
                        }
                    },
                    "environmentVariableOverrides": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/getHelmEnvironmentVariableOverride:getHelmEnvironmentVariableOverride"
                        }
                    },
                    "environmentVariables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/getHelmEnvironmentVariable:getHelmEnvironmentVariable"
                        }
                    },
                    "externalHost": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "internalHost": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secretAliases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/getHelmSecretAlias:getHelmSecretAlias"
                        }
                    },
                    "secretOverrides": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/getHelmSecretOverride:getHelmSecretOverride"
                        }
                    },
                    "secrets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/getHelmSecret:getHelmSecret"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "advancedSettingsJson",
                    "builtInEnvironmentVariables",
                    "deploymentStageId",
                    "environmentId",
                    "environmentVariableAliases",
                    "externalHost",
                    "id",
                    "internalHost",
                    "name"
                ]
            }
        },
        "qovery:index/getHelmRepository:getHelmRepository": {
            "description": "## # qovery.HelmRepository (Data Source)\n\nProvides a Qovery helm repository resource. This can be used to create and manage Qovery helm repository.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getHelmRepository.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "organizationId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getHelmRepository.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "kind": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "id",
                    "kind",
                    "name",
                    "organizationId",
                    "url"
                ]
            }
        },
        "qovery:index/getJob:getJob": {
            "description": "## # qovery.Job (Data Source)\n\nProvides a Qovery job resource. This can be used to create and manage Qovery job registry.\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as qovery from \"@pulumi/qovery\";\n\nconst myJob = qovery.getJob({\n    id: \"\u003cjob_id\u003e\",\n});\n```\n```python\nimport pulumi\nimport pulumi_qovery as qovery\n\nmy_job = qovery.get_job(id=\"\u003cjob_id\u003e\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Qovery = Pulumi.Qovery;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myJob = Qovery.GetJob.Invoke(new()\n    {\n        Id = \"\u003cjob_id\u003e\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-qovery/sdk/go/qovery\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := qovery.LookupJob(ctx, \u0026qovery.LookupJobArgs{\n\t\t\tId: \"\u003cjob_id\u003e\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.qovery.QoveryFunctions;\nimport com.pulumi.qovery.inputs.GetJobArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myJob = QoveryFunctions.getJob(GetJobArgs.builder()\n            .id(\"\u003cjob_id\u003e\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myJob:\n    fn::invoke:\n      Function: qovery:getJob\n      Arguments:\n        id: \u003cjob_id\u003e\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getJob.\n",
                "properties": {
                    "advancedSettingsJson": {
                        "type": "string"
                    },
                    "autoDeploy": {
                        "type": "boolean"
                    },
                    "autoPreview": {
                        "type": "boolean"
                    },
                    "cpu": {
                        "type": "integer"
                    },
                    "deploymentStageId": {
                        "type": "string"
                    },
                    "environmentVariableAliases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/getJobEnvironmentVariableAlias:getJobEnvironmentVariableAlias"
                        }
                    },
                    "environmentVariableOverrides": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/getJobEnvironmentVariableOverride:getJobEnvironmentVariableOverride"
                        }
                    },
                    "environmentVariables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/getJobEnvironmentVariable:getJobEnvironmentVariable"
                        }
                    },
                    "healthchecks": {
                        "$ref": "#/types/qovery:index/getJobHealthchecks:getJobHealthchecks"
                    },
                    "id": {
                        "type": "string"
                    },
                    "maxDurationSeconds": {
                        "type": "integer"
                    },
                    "maxNbRestart": {
                        "type": "integer"
                    },
                    "memory": {
                        "type": "integer"
                    },
                    "port": {
                        "type": "integer"
                    },
                    "secretAliases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/getJobSecretAlias:getJobSecretAlias"
                        }
                    },
                    "secretOverrides": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/getJobSecretOverride:getJobSecretOverride"
                        }
                    },
                    "secrets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/getJobSecret:getJobSecret"
                        }
                    },
                    "source": {
                        "$ref": "#/types/qovery:index/getJobSource:getJobSource"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getJob.\n",
                "properties": {
                    "advancedSettingsJson": {
                        "type": "string"
                    },
                    "autoDeploy": {
                        "type": "boolean"
                    },
                    "autoPreview": {
                        "type": "boolean"
                    },
                    "builtInEnvironmentVariables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/getJobBuiltInEnvironmentVariable:getJobBuiltInEnvironmentVariable"
                        }
                    },
                    "cpu": {
                        "type": "integer"
                    },
                    "deploymentStageId": {
                        "type": "string"
                    },
                    "environmentId": {
                        "type": "string"
                    },
                    "environmentVariableAliases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/getJobEnvironmentVariableAlias:getJobEnvironmentVariableAlias"
                        }
                    },
                    "environmentVariableOverrides": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/getJobEnvironmentVariableOverride:getJobEnvironmentVariableOverride"
                        }
                    },
                    "environmentVariables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/getJobEnvironmentVariable:getJobEnvironmentVariable"
                        }
                    },
                    "externalHost": {
                        "type": "string"
                    },
                    "healthchecks": {
                        "$ref": "#/types/qovery:index/getJobHealthchecks:getJobHealthchecks"
                    },
                    "id": {
                        "type": "string"
                    },
                    "internalHost": {
                        "type": "string"
                    },
                    "maxDurationSeconds": {
                        "type": "integer"
                    },
                    "maxNbRestart": {
                        "type": "integer"
                    },
                    "memory": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "port": {
                        "type": "integer"
                    },
                    "schedule": {
                        "$ref": "#/types/qovery:index/getJobSchedule:getJobSchedule"
                    },
                    "secretAliases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/getJobSecretAlias:getJobSecretAlias"
                        }
                    },
                    "secretOverrides": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/getJobSecretOverride:getJobSecretOverride"
                        }
                    },
                    "secrets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/getJobSecret:getJobSecret"
                        }
                    },
                    "source": {
                        "$ref": "#/types/qovery:index/getJobSource:getJobSource"
                    }
                },
                "type": "object",
                "required": [
                    "advancedSettingsJson",
                    "autoDeploy",
                    "autoPreview",
                    "builtInEnvironmentVariables",
                    "deploymentStageId",
                    "environmentId",
                    "environmentVariableAliases",
                    "externalHost",
                    "id",
                    "internalHost",
                    "maxDurationSeconds",
                    "maxNbRestart",
                    "name",
                    "port",
                    "schedule",
                    "source"
                ]
            }
        },
        "qovery:index/getOrganization:getOrganization": {
            "description": "## # qovery.Organization (Data Source)\n\nProvides a Qovery organization resource. This can be used to create and manage Qovery organizations.\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as qovery from \"@pulumi/qovery\";\n\nconst myOrganization = qovery.getOrganization({\n    id: \"\u003corganization_id\u003e\",\n});\n```\n```python\nimport pulumi\nimport pulumi_qovery as qovery\n\nmy_organization = qovery.get_organization(id=\"\u003corganization_id\u003e\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Qovery = Pulumi.Qovery;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myOrganization = Qovery.GetOrganization.Invoke(new()\n    {\n        Id = \"\u003corganization_id\u003e\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-qovery/sdk/go/qovery\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := qovery.LookupOrganization(ctx, \u0026qovery.LookupOrganizationArgs{\n\t\t\tId: \"\u003corganization_id\u003e\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.qovery.QoveryFunctions;\nimport com.pulumi.qovery.inputs.GetOrganizationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myOrganization = QoveryFunctions.getOrganization(GetOrganizationArgs.builder()\n            .id(\"\u003corganization_id\u003e\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myOrganization:\n    fn::invoke:\n      Function: qovery:getOrganization\n      Arguments:\n        id: \u003corganization_id\u003e\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getOrganization.\n",
                "properties": {
                    "id": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getOrganization.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "plan": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "id",
                    "name",
                    "plan"
                ]
            }
        },
        "qovery:index/getProject:getProject": {
            "description": "## # qovery.Project (Data Source)\n\nProvides a Qovery project resource. This can be used to create and manage Qovery projects.\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as qovery from \"@pulumi/qovery\";\n\nconst myProject = qovery.getProject({\n    id: \"\u003cproject_id\u003e\",\n});\n```\n```python\nimport pulumi\nimport pulumi_qovery as qovery\n\nmy_project = qovery.get_project(id=\"\u003cproject_id\u003e\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Qovery = Pulumi.Qovery;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myProject = Qovery.GetProject.Invoke(new()\n    {\n        Id = \"\u003cproject_id\u003e\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/dirien/pulumi-qovery/sdk/go/qovery\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := qovery.LookupProject(ctx, \u0026qovery.LookupProjectArgs{\n\t\t\tId: \"\u003cproject_id\u003e\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.qovery.QoveryFunctions;\nimport com.pulumi.qovery.inputs.GetProjectArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myProject = QoveryFunctions.getProject(GetProjectArgs.builder()\n            .id(\"\u003cproject_id\u003e\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myProject:\n    fn::invoke:\n      Function: qovery:getProject\n      Arguments:\n        id: \u003cproject_id\u003e\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getProject.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the project.\n"
                    },
                    "environmentVariableAliases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/getProjectEnvironmentVariableAlias:getProjectEnvironmentVariableAlias"
                        },
                        "description": "List of environment variable aliases linked to this project.\n"
                    },
                    "environmentVariables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/getProjectEnvironmentVariable:getProjectEnvironmentVariable"
                        },
                        "description": "List of environment variables linked to this project.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Id of the environment variable.\n"
                    },
                    "secretAliases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/getProjectSecretAlias:getProjectSecretAlias"
                        },
                        "description": "List of secret aliases linked to this project.\n"
                    },
                    "secrets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/getProjectSecret:getProjectSecret"
                        },
                        "description": "List of secrets linked to this project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getProject.\n",
                "properties": {
                    "builtInEnvironmentVariables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/getProjectBuiltInEnvironmentVariable:getProjectBuiltInEnvironmentVariable"
                        },
                        "description": "List of built-in environment variables linked to this project.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the project.\n"
                    },
                    "environmentVariableAliases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/getProjectEnvironmentVariableAlias:getProjectEnvironmentVariableAlias"
                        },
                        "description": "List of environment variable aliases linked to this project.\n"
                    },
                    "environmentVariables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/getProjectEnvironmentVariable:getProjectEnvironmentVariable"
                        },
                        "description": "List of environment variables linked to this project.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Id of the project.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the project.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "Id of the organization.\n"
                    },
                    "secretAliases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/getProjectSecretAlias:getProjectSecretAlias"
                        },
                        "description": "List of secret aliases linked to this project.\n"
                    },
                    "secrets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/qovery:index/getProjectSecret:getProjectSecret"
                        },
                        "description": "List of secrets linked to this project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "builtInEnvironmentVariables",
                    "description",
                    "environmentVariableAliases",
                    "environmentVariables",
                    "id",
                    "name",
                    "organizationId",
                    "secretAliases",
                    "secrets"
                ]
            }
        },
        "qovery:index/getScalewayCredentials:getScalewayCredentials": {
            "description": "## # qovery.ScalewayCredentials (Data Source)\n\nUse this data source to retrieve information about an existing Scaleway credentials.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getScalewayCredentials.\n",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "organizationId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getScalewayCredentials.\n",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "name",
                    "organizationId"
                ]
            }
        }
    }
}