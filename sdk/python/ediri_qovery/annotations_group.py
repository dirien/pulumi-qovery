# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['AnnotationsGroupArgs', 'AnnotationsGroup']

@pulumi.input_type
class AnnotationsGroupArgs:
    def __init__(__self__, *,
                 annotations: pulumi.Input[Mapping[str, pulumi.Input[str]]],
                 organization_id: pulumi.Input[str],
                 scopes: pulumi.Input[Sequence[pulumi.Input[str]]],
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a AnnotationsGroup resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] annotations: annotations
        :param pulumi.Input[str] organization_id: Id of the organization.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] scopes: scopes of the annotations group
        :param pulumi.Input[str] name: name of the annotations group
        """
        pulumi.set(__self__, "annotations", annotations)
        pulumi.set(__self__, "organization_id", organization_id)
        pulumi.set(__self__, "scopes", scopes)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def annotations(self) -> pulumi.Input[Mapping[str, pulumi.Input[str]]]:
        """
        annotations
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: pulumi.Input[Mapping[str, pulumi.Input[str]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> pulumi.Input[str]:
        """
        Id of the organization.
        """
        return pulumi.get(self, "organization_id")

    @organization_id.setter
    def organization_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "organization_id", value)

    @property
    @pulumi.getter
    def scopes(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        scopes of the annotations group
        """
        return pulumi.get(self, "scopes")

    @scopes.setter
    def scopes(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "scopes", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the annotations group
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _AnnotationsGroupState:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 organization_id: Optional[pulumi.Input[str]] = None,
                 scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering AnnotationsGroup resources.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] annotations: annotations
        :param pulumi.Input[str] name: name of the annotations group
        :param pulumi.Input[str] organization_id: Id of the organization.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] scopes: scopes of the annotations group
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if organization_id is not None:
            pulumi.set(__self__, "organization_id", organization_id)
        if scopes is not None:
            pulumi.set(__self__, "scopes", scopes)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        annotations
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the annotations group
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> Optional[pulumi.Input[str]]:
        """
        Id of the organization.
        """
        return pulumi.get(self, "organization_id")

    @organization_id.setter
    def organization_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "organization_id", value)

    @property
    @pulumi.getter
    def scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        scopes of the annotations group
        """
        return pulumi.get(self, "scopes")

    @scopes.setter
    def scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "scopes", value)


class AnnotationsGroup(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 organization_id: Optional[pulumi.Input[str]] = None,
                 scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        ## # AnnotationsGroup (Resource)

        Provides a Qovery annotations group resource

        ## Example

        ```python
        import pulumi
        import ediri_qovery as qovery

        annotations_group1 = qovery.AnnotationsGroup("annotationsGroup1",
            organization_id=qovery_organization["my_organization"]["id"],
            annotations={
                "key1": "value1",
                "key2": "value2",
            },
            scopes=[
                "PODS",
                "DEPLOYMENTS",
            ])
        ```

        ## Import

        ```sh
        $ pulumi import qovery:index/annotationsGroup:AnnotationsGroup my_qovery_annotations_group "<annotations_group_id>"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] annotations: annotations
        :param pulumi.Input[str] name: name of the annotations group
        :param pulumi.Input[str] organization_id: Id of the organization.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] scopes: scopes of the annotations group
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AnnotationsGroupArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## # AnnotationsGroup (Resource)

        Provides a Qovery annotations group resource

        ## Example

        ```python
        import pulumi
        import ediri_qovery as qovery

        annotations_group1 = qovery.AnnotationsGroup("annotationsGroup1",
            organization_id=qovery_organization["my_organization"]["id"],
            annotations={
                "key1": "value1",
                "key2": "value2",
            },
            scopes=[
                "PODS",
                "DEPLOYMENTS",
            ])
        ```

        ## Import

        ```sh
        $ pulumi import qovery:index/annotationsGroup:AnnotationsGroup my_qovery_annotations_group "<annotations_group_id>"
        ```

        :param str resource_name: The name of the resource.
        :param AnnotationsGroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AnnotationsGroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 organization_id: Optional[pulumi.Input[str]] = None,
                 scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AnnotationsGroupArgs.__new__(AnnotationsGroupArgs)

            if annotations is None and not opts.urn:
                raise TypeError("Missing required property 'annotations'")
            __props__.__dict__["annotations"] = annotations
            __props__.__dict__["name"] = name
            if organization_id is None and not opts.urn:
                raise TypeError("Missing required property 'organization_id'")
            __props__.__dict__["organization_id"] = organization_id
            if scopes is None and not opts.urn:
                raise TypeError("Missing required property 'scopes'")
            __props__.__dict__["scopes"] = scopes
        super(AnnotationsGroup, __self__).__init__(
            'qovery:index/annotationsGroup:AnnotationsGroup',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            organization_id: Optional[pulumi.Input[str]] = None,
            scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None) -> 'AnnotationsGroup':
        """
        Get an existing AnnotationsGroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] annotations: annotations
        :param pulumi.Input[str] name: name of the annotations group
        :param pulumi.Input[str] organization_id: Id of the organization.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] scopes: scopes of the annotations group
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AnnotationsGroupState.__new__(_AnnotationsGroupState)

        __props__.__dict__["annotations"] = annotations
        __props__.__dict__["name"] = name
        __props__.__dict__["organization_id"] = organization_id
        __props__.__dict__["scopes"] = scopes
        return AnnotationsGroup(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def annotations(self) -> pulumi.Output[Mapping[str, str]]:
        """
        annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        name of the annotations group
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> pulumi.Output[str]:
        """
        Id of the organization.
        """
        return pulumi.get(self, "organization_id")

    @property
    @pulumi.getter
    def scopes(self) -> pulumi.Output[Sequence[str]]:
        """
        scopes of the annotations group
        """
        return pulumi.get(self, "scopes")

