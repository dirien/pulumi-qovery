# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetAnnotationsGroupResult',
    'AwaitableGetAnnotationsGroupResult',
    'get_annotations_group',
    'get_annotations_group_output',
]

@pulumi.output_type
class GetAnnotationsGroupResult:
    """
    A collection of values returned by getAnnotationsGroup.
    """
    def __init__(__self__, annotations=None, id=None, name=None, organization_id=None, scopes=None):
        if annotations and not isinstance(annotations, dict):
            raise TypeError("Expected argument 'annotations' to be a dict")
        pulumi.set(__self__, "annotations", annotations)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if organization_id and not isinstance(organization_id, str):
            raise TypeError("Expected argument 'organization_id' to be a str")
        pulumi.set(__self__, "organization_id", organization_id)
        if scopes and not isinstance(scopes, list):
            raise TypeError("Expected argument 'scopes' to be a list")
        pulumi.set(__self__, "scopes", scopes)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Id of the annotations group
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the annotations group
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> str:
        """
        Id of the organization.
        """
        return pulumi.get(self, "organization_id")

    @property
    @pulumi.getter
    def scopes(self) -> Optional[Sequence[str]]:
        """
        scopes of the annotations group
        """
        return pulumi.get(self, "scopes")


class AwaitableGetAnnotationsGroupResult(GetAnnotationsGroupResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAnnotationsGroupResult(
            annotations=self.annotations,
            id=self.id,
            name=self.name,
            organization_id=self.organization_id,
            scopes=self.scopes)


def get_annotations_group(annotations: Optional[Mapping[str, str]] = None,
                          id: Optional[str] = None,
                          name: Optional[str] = None,
                          organization_id: Optional[str] = None,
                          scopes: Optional[Sequence[str]] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAnnotationsGroupResult:
    """
    ## # AnnotationsGroup (Data Source)

    Provides a Qovery annotations group resource
    ## Example Usage

    ```python
    import pulumi
    import pulumi_qovery as qovery

    my_annotations_group = qovery.get_annotations_group(id="<annotations_group_id>",
        organization_id="<organization_id>")
    ```


    :param Mapping[str, str] annotations: annotations
    :param str id: Id of the annotations group
    :param str name: name of the annotations group
    :param str organization_id: Id of the organization.
    :param Sequence[str] scopes: scopes of the annotations group
    """
    __args__ = dict()
    __args__['annotations'] = annotations
    __args__['id'] = id
    __args__['name'] = name
    __args__['organizationId'] = organization_id
    __args__['scopes'] = scopes
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('qovery:index/getAnnotationsGroup:getAnnotationsGroup', __args__, opts=opts, typ=GetAnnotationsGroupResult).value

    return AwaitableGetAnnotationsGroupResult(
        annotations=pulumi.get(__ret__, 'annotations'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        organization_id=pulumi.get(__ret__, 'organization_id'),
        scopes=pulumi.get(__ret__, 'scopes'))


@_utilities.lift_output_func(get_annotations_group)
def get_annotations_group_output(annotations: Optional[pulumi.Input[Optional[Mapping[str, str]]]] = None,
                                 id: Optional[pulumi.Input[str]] = None,
                                 name: Optional[pulumi.Input[Optional[str]]] = None,
                                 organization_id: Optional[pulumi.Input[str]] = None,
                                 scopes: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAnnotationsGroupResult]:
    """
    ## # AnnotationsGroup (Data Source)

    Provides a Qovery annotations group resource
    ## Example Usage

    ```python
    import pulumi
    import pulumi_qovery as qovery

    my_annotations_group = qovery.get_annotations_group(id="<annotations_group_id>",
        organization_id="<organization_id>")
    ```


    :param Mapping[str, str] annotations: annotations
    :param str id: Id of the annotations group
    :param str name: name of the annotations group
    :param str organization_id: Id of the organization.
    :param Sequence[str] scopes: scopes of the annotations group
    """
    ...
