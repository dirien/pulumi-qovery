# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetGitTokenResult',
    'AwaitableGetGitTokenResult',
    'get_git_token',
    'get_git_token_output',
]

@pulumi.output_type
class GetGitTokenResult:
    """
    A collection of values returned by getGitToken.
    """
    def __init__(__self__, bitbucket_workspace=None, description=None, id=None, name=None, organization_id=None, token=None, type=None):
        if bitbucket_workspace and not isinstance(bitbucket_workspace, str):
            raise TypeError("Expected argument 'bitbucket_workspace' to be a str")
        pulumi.set(__self__, "bitbucket_workspace", bitbucket_workspace)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if organization_id and not isinstance(organization_id, str):
            raise TypeError("Expected argument 'organization_id' to be a str")
        pulumi.set(__self__, "organization_id", organization_id)
        if token and not isinstance(token, str):
            raise TypeError("Expected argument 'token' to be a str")
        pulumi.set(__self__, "token", token)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="bitbucketWorkspace")
    def bitbucket_workspace(self) -> str:
        return pulumi.get(self, "bitbucket_workspace")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> str:
        return pulumi.get(self, "organization_id")

    @property
    @pulumi.getter
    def token(self) -> str:
        return pulumi.get(self, "token")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


class AwaitableGetGitTokenResult(GetGitTokenResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetGitTokenResult(
            bitbucket_workspace=self.bitbucket_workspace,
            description=self.description,
            id=self.id,
            name=self.name,
            organization_id=self.organization_id,
            token=self.token,
            type=self.type)


def get_git_token(bitbucket_workspace: Optional[str] = None,
                  description: Optional[str] = None,
                  id: Optional[str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetGitTokenResult:
    """
    ## # GitToken (Data Source)

    Provides a Qovery git token resource. This can be used to create and manage Qovery git token.
    """
    __args__ = dict()
    __args__['bitbucketWorkspace'] = bitbucket_workspace
    __args__['description'] = description
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('qovery:index/getGitToken:getGitToken', __args__, opts=opts, typ=GetGitTokenResult).value

    return AwaitableGetGitTokenResult(
        bitbucket_workspace=pulumi.get(__ret__, 'bitbucket_workspace'),
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        organization_id=pulumi.get(__ret__, 'organization_id'),
        token=pulumi.get(__ret__, 'token'),
        type=pulumi.get(__ret__, 'type'))


@_utilities.lift_output_func(get_git_token)
def get_git_token_output(bitbucket_workspace: Optional[pulumi.Input[Optional[str]]] = None,
                         description: Optional[pulumi.Input[Optional[str]]] = None,
                         id: Optional[pulumi.Input[str]] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetGitTokenResult]:
    """
    ## # GitToken (Data Source)

    Provides a Qovery git token resource. This can be used to create and manage Qovery git token.
    """
    ...
