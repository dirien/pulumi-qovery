# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ClusterArgs', 'Cluster']

@pulumi.input_type
class ClusterArgs:
    def __init__(__self__, *,
                 cloud_provider: pulumi.Input[str],
                 credentials_id: pulumi.Input[str],
                 instance_type: pulumi.Input[str],
                 organization_id: pulumi.Input[str],
                 region: pulumi.Input[str],
                 advanced_settings_json: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 disk_size: Optional[pulumi.Input[int]] = None,
                 features: Optional[pulumi.Input['ClusterFeaturesArgs']] = None,
                 kubernetes_mode: Optional[pulumi.Input[str]] = None,
                 max_running_nodes: Optional[pulumi.Input[int]] = None,
                 min_running_nodes: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 routing_tables: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterRoutingTableArgs']]]] = None,
                 state: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Cluster resource.
        :param pulumi.Input[str] cloud_provider: Cloud provider of the cluster. - Can be: `AWS`, `DO`, `SCW`.
        :param pulumi.Input[str] credentials_id: Id of the credentials.
        :param pulumi.Input[str] instance_type: Instance type of the cluster. I.e: For Aws `t3a.xlarge`, for Scaleway `DEV-L`
        :param pulumi.Input[str] organization_id: Id of the organization.
        :param pulumi.Input[str] region: Region of the cluster.
        :param pulumi.Input[str] advanced_settings_json: Advanced settings of the cluster.
        :param pulumi.Input[str] description: Description of the cluster. - Default: ``.
        :param pulumi.Input['ClusterFeaturesArgs'] features: Features of the cluster.
        :param pulumi.Input[str] kubernetes_mode: Kubernetes mode of the cluster. - Can be: `K3S`, `MANAGED`. - Default: `MANAGED`.
        :param pulumi.Input[int] max_running_nodes: Maximum number of nodes running for the cluster. [NOTE: have to be set to 1 in case of K3S clusters] - Must be: `>= 1`.
               - Default: `10`.
        :param pulumi.Input[int] min_running_nodes: Minimum number of nodes running for the cluster. [NOTE: have to be set to 1 in case of K3S clusters]. - Must be: `>= 1`.
               - Default: `3`.
        :param pulumi.Input[str] name: Name of the cluster.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterRoutingTableArgs']]] routing_tables: List of routes of the cluster.
        :param pulumi.Input[str] state: State of the cluster. - Can be: `DEPLOYED`, `STOPPED`. - Default: `DEPLOYED`.
        """
        pulumi.set(__self__, "cloud_provider", cloud_provider)
        pulumi.set(__self__, "credentials_id", credentials_id)
        pulumi.set(__self__, "instance_type", instance_type)
        pulumi.set(__self__, "organization_id", organization_id)
        pulumi.set(__self__, "region", region)
        if advanced_settings_json is not None:
            pulumi.set(__self__, "advanced_settings_json", advanced_settings_json)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if disk_size is not None:
            pulumi.set(__self__, "disk_size", disk_size)
        if features is not None:
            pulumi.set(__self__, "features", features)
        if kubernetes_mode is not None:
            pulumi.set(__self__, "kubernetes_mode", kubernetes_mode)
        if max_running_nodes is not None:
            pulumi.set(__self__, "max_running_nodes", max_running_nodes)
        if min_running_nodes is not None:
            pulumi.set(__self__, "min_running_nodes", min_running_nodes)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if routing_tables is not None:
            pulumi.set(__self__, "routing_tables", routing_tables)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="cloudProvider")
    def cloud_provider(self) -> pulumi.Input[str]:
        """
        Cloud provider of the cluster. - Can be: `AWS`, `DO`, `SCW`.
        """
        return pulumi.get(self, "cloud_provider")

    @cloud_provider.setter
    def cloud_provider(self, value: pulumi.Input[str]):
        pulumi.set(self, "cloud_provider", value)

    @property
    @pulumi.getter(name="credentialsId")
    def credentials_id(self) -> pulumi.Input[str]:
        """
        Id of the credentials.
        """
        return pulumi.get(self, "credentials_id")

    @credentials_id.setter
    def credentials_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "credentials_id", value)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        Instance type of the cluster. I.e: For Aws `t3a.xlarge`, for Scaleway `DEV-L`
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> pulumi.Input[str]:
        """
        Id of the organization.
        """
        return pulumi.get(self, "organization_id")

    @organization_id.setter
    def organization_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "organization_id", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        """
        Region of the cluster.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="advancedSettingsJson")
    def advanced_settings_json(self) -> Optional[pulumi.Input[str]]:
        """
        Advanced settings of the cluster.
        """
        return pulumi.get(self, "advanced_settings_json")

    @advanced_settings_json.setter
    def advanced_settings_json(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "advanced_settings_json", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the cluster. - Default: ``.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "disk_size")

    @disk_size.setter
    def disk_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disk_size", value)

    @property
    @pulumi.getter
    def features(self) -> Optional[pulumi.Input['ClusterFeaturesArgs']]:
        """
        Features of the cluster.
        """
        return pulumi.get(self, "features")

    @features.setter
    def features(self, value: Optional[pulumi.Input['ClusterFeaturesArgs']]):
        pulumi.set(self, "features", value)

    @property
    @pulumi.getter(name="kubernetesMode")
    def kubernetes_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Kubernetes mode of the cluster. - Can be: `K3S`, `MANAGED`. - Default: `MANAGED`.
        """
        return pulumi.get(self, "kubernetes_mode")

    @kubernetes_mode.setter
    def kubernetes_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kubernetes_mode", value)

    @property
    @pulumi.getter(name="maxRunningNodes")
    def max_running_nodes(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of nodes running for the cluster. [NOTE: have to be set to 1 in case of K3S clusters] - Must be: `>= 1`.
        - Default: `10`.
        """
        return pulumi.get(self, "max_running_nodes")

    @max_running_nodes.setter
    def max_running_nodes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_running_nodes", value)

    @property
    @pulumi.getter(name="minRunningNodes")
    def min_running_nodes(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum number of nodes running for the cluster. [NOTE: have to be set to 1 in case of K3S clusters]. - Must be: `>= 1`.
        - Default: `3`.
        """
        return pulumi.get(self, "min_running_nodes")

    @min_running_nodes.setter
    def min_running_nodes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_running_nodes", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the cluster.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="routingTables")
    def routing_tables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterRoutingTableArgs']]]]:
        """
        List of routes of the cluster.
        """
        return pulumi.get(self, "routing_tables")

    @routing_tables.setter
    def routing_tables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterRoutingTableArgs']]]]):
        pulumi.set(self, "routing_tables", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        State of the cluster. - Can be: `DEPLOYED`, `STOPPED`. - Default: `DEPLOYED`.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)


@pulumi.input_type
class _ClusterState:
    def __init__(__self__, *,
                 advanced_settings_json: Optional[pulumi.Input[str]] = None,
                 cloud_provider: Optional[pulumi.Input[str]] = None,
                 credentials_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 disk_size: Optional[pulumi.Input[int]] = None,
                 features: Optional[pulumi.Input['ClusterFeaturesArgs']] = None,
                 instance_type: Optional[pulumi.Input[str]] = None,
                 kubernetes_mode: Optional[pulumi.Input[str]] = None,
                 max_running_nodes: Optional[pulumi.Input[int]] = None,
                 min_running_nodes: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 organization_id: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 routing_tables: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterRoutingTableArgs']]]] = None,
                 state: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Cluster resources.
        :param pulumi.Input[str] advanced_settings_json: Advanced settings of the cluster.
        :param pulumi.Input[str] cloud_provider: Cloud provider of the cluster. - Can be: `AWS`, `DO`, `SCW`.
        :param pulumi.Input[str] credentials_id: Id of the credentials.
        :param pulumi.Input[str] description: Description of the cluster. - Default: ``.
        :param pulumi.Input['ClusterFeaturesArgs'] features: Features of the cluster.
        :param pulumi.Input[str] instance_type: Instance type of the cluster. I.e: For Aws `t3a.xlarge`, for Scaleway `DEV-L`
        :param pulumi.Input[str] kubernetes_mode: Kubernetes mode of the cluster. - Can be: `K3S`, `MANAGED`. - Default: `MANAGED`.
        :param pulumi.Input[int] max_running_nodes: Maximum number of nodes running for the cluster. [NOTE: have to be set to 1 in case of K3S clusters] - Must be: `>= 1`.
               - Default: `10`.
        :param pulumi.Input[int] min_running_nodes: Minimum number of nodes running for the cluster. [NOTE: have to be set to 1 in case of K3S clusters]. - Must be: `>= 1`.
               - Default: `3`.
        :param pulumi.Input[str] name: Name of the cluster.
        :param pulumi.Input[str] organization_id: Id of the organization.
        :param pulumi.Input[str] region: Region of the cluster.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterRoutingTableArgs']]] routing_tables: List of routes of the cluster.
        :param pulumi.Input[str] state: State of the cluster. - Can be: `DEPLOYED`, `STOPPED`. - Default: `DEPLOYED`.
        """
        if advanced_settings_json is not None:
            pulumi.set(__self__, "advanced_settings_json", advanced_settings_json)
        if cloud_provider is not None:
            pulumi.set(__self__, "cloud_provider", cloud_provider)
        if credentials_id is not None:
            pulumi.set(__self__, "credentials_id", credentials_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if disk_size is not None:
            pulumi.set(__self__, "disk_size", disk_size)
        if features is not None:
            pulumi.set(__self__, "features", features)
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if kubernetes_mode is not None:
            pulumi.set(__self__, "kubernetes_mode", kubernetes_mode)
        if max_running_nodes is not None:
            pulumi.set(__self__, "max_running_nodes", max_running_nodes)
        if min_running_nodes is not None:
            pulumi.set(__self__, "min_running_nodes", min_running_nodes)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if organization_id is not None:
            pulumi.set(__self__, "organization_id", organization_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if routing_tables is not None:
            pulumi.set(__self__, "routing_tables", routing_tables)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="advancedSettingsJson")
    def advanced_settings_json(self) -> Optional[pulumi.Input[str]]:
        """
        Advanced settings of the cluster.
        """
        return pulumi.get(self, "advanced_settings_json")

    @advanced_settings_json.setter
    def advanced_settings_json(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "advanced_settings_json", value)

    @property
    @pulumi.getter(name="cloudProvider")
    def cloud_provider(self) -> Optional[pulumi.Input[str]]:
        """
        Cloud provider of the cluster. - Can be: `AWS`, `DO`, `SCW`.
        """
        return pulumi.get(self, "cloud_provider")

    @cloud_provider.setter
    def cloud_provider(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_provider", value)

    @property
    @pulumi.getter(name="credentialsId")
    def credentials_id(self) -> Optional[pulumi.Input[str]]:
        """
        Id of the credentials.
        """
        return pulumi.get(self, "credentials_id")

    @credentials_id.setter
    def credentials_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "credentials_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the cluster. - Default: ``.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "disk_size")

    @disk_size.setter
    def disk_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disk_size", value)

    @property
    @pulumi.getter
    def features(self) -> Optional[pulumi.Input['ClusterFeaturesArgs']]:
        """
        Features of the cluster.
        """
        return pulumi.get(self, "features")

    @features.setter
    def features(self, value: Optional[pulumi.Input['ClusterFeaturesArgs']]):
        pulumi.set(self, "features", value)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[pulumi.Input[str]]:
        """
        Instance type of the cluster. I.e: For Aws `t3a.xlarge`, for Scaleway `DEV-L`
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="kubernetesMode")
    def kubernetes_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Kubernetes mode of the cluster. - Can be: `K3S`, `MANAGED`. - Default: `MANAGED`.
        """
        return pulumi.get(self, "kubernetes_mode")

    @kubernetes_mode.setter
    def kubernetes_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kubernetes_mode", value)

    @property
    @pulumi.getter(name="maxRunningNodes")
    def max_running_nodes(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of nodes running for the cluster. [NOTE: have to be set to 1 in case of K3S clusters] - Must be: `>= 1`.
        - Default: `10`.
        """
        return pulumi.get(self, "max_running_nodes")

    @max_running_nodes.setter
    def max_running_nodes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_running_nodes", value)

    @property
    @pulumi.getter(name="minRunningNodes")
    def min_running_nodes(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum number of nodes running for the cluster. [NOTE: have to be set to 1 in case of K3S clusters]. - Must be: `>= 1`.
        - Default: `3`.
        """
        return pulumi.get(self, "min_running_nodes")

    @min_running_nodes.setter
    def min_running_nodes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_running_nodes", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the cluster.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> Optional[pulumi.Input[str]]:
        """
        Id of the organization.
        """
        return pulumi.get(self, "organization_id")

    @organization_id.setter
    def organization_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "organization_id", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Region of the cluster.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="routingTables")
    def routing_tables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterRoutingTableArgs']]]]:
        """
        List of routes of the cluster.
        """
        return pulumi.get(self, "routing_tables")

    @routing_tables.setter
    def routing_tables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterRoutingTableArgs']]]]):
        pulumi.set(self, "routing_tables", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        State of the cluster. - Can be: `DEPLOYED`, `STOPPED`. - Default: `DEPLOYED`.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)


class Cluster(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 advanced_settings_json: Optional[pulumi.Input[str]] = None,
                 cloud_provider: Optional[pulumi.Input[str]] = None,
                 credentials_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 disk_size: Optional[pulumi.Input[int]] = None,
                 features: Optional[pulumi.Input[pulumi.InputType['ClusterFeaturesArgs']]] = None,
                 instance_type: Optional[pulumi.Input[str]] = None,
                 kubernetes_mode: Optional[pulumi.Input[str]] = None,
                 max_running_nodes: Optional[pulumi.Input[int]] = None,
                 min_running_nodes: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 organization_id: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 routing_tables: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClusterRoutingTableArgs']]]]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        ## Import

        ```sh
         $ pulumi import qovery:index/cluster:Cluster my_cluster "<organization_id>,<cluster_id>"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] advanced_settings_json: Advanced settings of the cluster.
        :param pulumi.Input[str] cloud_provider: Cloud provider of the cluster. - Can be: `AWS`, `DO`, `SCW`.
        :param pulumi.Input[str] credentials_id: Id of the credentials.
        :param pulumi.Input[str] description: Description of the cluster. - Default: ``.
        :param pulumi.Input[pulumi.InputType['ClusterFeaturesArgs']] features: Features of the cluster.
        :param pulumi.Input[str] instance_type: Instance type of the cluster. I.e: For Aws `t3a.xlarge`, for Scaleway `DEV-L`
        :param pulumi.Input[str] kubernetes_mode: Kubernetes mode of the cluster. - Can be: `K3S`, `MANAGED`. - Default: `MANAGED`.
        :param pulumi.Input[int] max_running_nodes: Maximum number of nodes running for the cluster. [NOTE: have to be set to 1 in case of K3S clusters] - Must be: `>= 1`.
               - Default: `10`.
        :param pulumi.Input[int] min_running_nodes: Minimum number of nodes running for the cluster. [NOTE: have to be set to 1 in case of K3S clusters]. - Must be: `>= 1`.
               - Default: `3`.
        :param pulumi.Input[str] name: Name of the cluster.
        :param pulumi.Input[str] organization_id: Id of the organization.
        :param pulumi.Input[str] region: Region of the cluster.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClusterRoutingTableArgs']]]] routing_tables: List of routes of the cluster.
        :param pulumi.Input[str] state: State of the cluster. - Can be: `DEPLOYED`, `STOPPED`. - Default: `DEPLOYED`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ClusterArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Import

        ```sh
         $ pulumi import qovery:index/cluster:Cluster my_cluster "<organization_id>,<cluster_id>"
        ```

        :param str resource_name: The name of the resource.
        :param ClusterArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ClusterArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 advanced_settings_json: Optional[pulumi.Input[str]] = None,
                 cloud_provider: Optional[pulumi.Input[str]] = None,
                 credentials_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 disk_size: Optional[pulumi.Input[int]] = None,
                 features: Optional[pulumi.Input[pulumi.InputType['ClusterFeaturesArgs']]] = None,
                 instance_type: Optional[pulumi.Input[str]] = None,
                 kubernetes_mode: Optional[pulumi.Input[str]] = None,
                 max_running_nodes: Optional[pulumi.Input[int]] = None,
                 min_running_nodes: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 organization_id: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 routing_tables: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClusterRoutingTableArgs']]]]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ClusterArgs.__new__(ClusterArgs)

            __props__.__dict__["advanced_settings_json"] = advanced_settings_json
            if cloud_provider is None and not opts.urn:
                raise TypeError("Missing required property 'cloud_provider'")
            __props__.__dict__["cloud_provider"] = cloud_provider
            if credentials_id is None and not opts.urn:
                raise TypeError("Missing required property 'credentials_id'")
            __props__.__dict__["credentials_id"] = credentials_id
            __props__.__dict__["description"] = description
            __props__.__dict__["disk_size"] = disk_size
            __props__.__dict__["features"] = features
            if instance_type is None and not opts.urn:
                raise TypeError("Missing required property 'instance_type'")
            __props__.__dict__["instance_type"] = instance_type
            __props__.__dict__["kubernetes_mode"] = kubernetes_mode
            __props__.__dict__["max_running_nodes"] = max_running_nodes
            __props__.__dict__["min_running_nodes"] = min_running_nodes
            __props__.__dict__["name"] = name
            if organization_id is None and not opts.urn:
                raise TypeError("Missing required property 'organization_id'")
            __props__.__dict__["organization_id"] = organization_id
            if region is None and not opts.urn:
                raise TypeError("Missing required property 'region'")
            __props__.__dict__["region"] = region
            __props__.__dict__["routing_tables"] = routing_tables
            __props__.__dict__["state"] = state
        super(Cluster, __self__).__init__(
            'qovery:index/cluster:Cluster',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            advanced_settings_json: Optional[pulumi.Input[str]] = None,
            cloud_provider: Optional[pulumi.Input[str]] = None,
            credentials_id: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            disk_size: Optional[pulumi.Input[int]] = None,
            features: Optional[pulumi.Input[pulumi.InputType['ClusterFeaturesArgs']]] = None,
            instance_type: Optional[pulumi.Input[str]] = None,
            kubernetes_mode: Optional[pulumi.Input[str]] = None,
            max_running_nodes: Optional[pulumi.Input[int]] = None,
            min_running_nodes: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            organization_id: Optional[pulumi.Input[str]] = None,
            region: Optional[pulumi.Input[str]] = None,
            routing_tables: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClusterRoutingTableArgs']]]]] = None,
            state: Optional[pulumi.Input[str]] = None) -> 'Cluster':
        """
        Get an existing Cluster resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] advanced_settings_json: Advanced settings of the cluster.
        :param pulumi.Input[str] cloud_provider: Cloud provider of the cluster. - Can be: `AWS`, `DO`, `SCW`.
        :param pulumi.Input[str] credentials_id: Id of the credentials.
        :param pulumi.Input[str] description: Description of the cluster. - Default: ``.
        :param pulumi.Input[pulumi.InputType['ClusterFeaturesArgs']] features: Features of the cluster.
        :param pulumi.Input[str] instance_type: Instance type of the cluster. I.e: For Aws `t3a.xlarge`, for Scaleway `DEV-L`
        :param pulumi.Input[str] kubernetes_mode: Kubernetes mode of the cluster. - Can be: `K3S`, `MANAGED`. - Default: `MANAGED`.
        :param pulumi.Input[int] max_running_nodes: Maximum number of nodes running for the cluster. [NOTE: have to be set to 1 in case of K3S clusters] - Must be: `>= 1`.
               - Default: `10`.
        :param pulumi.Input[int] min_running_nodes: Minimum number of nodes running for the cluster. [NOTE: have to be set to 1 in case of K3S clusters]. - Must be: `>= 1`.
               - Default: `3`.
        :param pulumi.Input[str] name: Name of the cluster.
        :param pulumi.Input[str] organization_id: Id of the organization.
        :param pulumi.Input[str] region: Region of the cluster.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClusterRoutingTableArgs']]]] routing_tables: List of routes of the cluster.
        :param pulumi.Input[str] state: State of the cluster. - Can be: `DEPLOYED`, `STOPPED`. - Default: `DEPLOYED`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ClusterState.__new__(_ClusterState)

        __props__.__dict__["advanced_settings_json"] = advanced_settings_json
        __props__.__dict__["cloud_provider"] = cloud_provider
        __props__.__dict__["credentials_id"] = credentials_id
        __props__.__dict__["description"] = description
        __props__.__dict__["disk_size"] = disk_size
        __props__.__dict__["features"] = features
        __props__.__dict__["instance_type"] = instance_type
        __props__.__dict__["kubernetes_mode"] = kubernetes_mode
        __props__.__dict__["max_running_nodes"] = max_running_nodes
        __props__.__dict__["min_running_nodes"] = min_running_nodes
        __props__.__dict__["name"] = name
        __props__.__dict__["organization_id"] = organization_id
        __props__.__dict__["region"] = region
        __props__.__dict__["routing_tables"] = routing_tables
        __props__.__dict__["state"] = state
        return Cluster(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="advancedSettingsJson")
    def advanced_settings_json(self) -> pulumi.Output[str]:
        """
        Advanced settings of the cluster.
        """
        return pulumi.get(self, "advanced_settings_json")

    @property
    @pulumi.getter(name="cloudProvider")
    def cloud_provider(self) -> pulumi.Output[str]:
        """
        Cloud provider of the cluster. - Can be: `AWS`, `DO`, `SCW`.
        """
        return pulumi.get(self, "cloud_provider")

    @property
    @pulumi.getter(name="credentialsId")
    def credentials_id(self) -> pulumi.Output[str]:
        """
        Id of the credentials.
        """
        return pulumi.get(self, "credentials_id")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        Description of the cluster. - Default: ``.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> pulumi.Output[int]:
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter
    def features(self) -> pulumi.Output['outputs.ClusterFeatures']:
        """
        Features of the cluster.
        """
        return pulumi.get(self, "features")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Output[str]:
        """
        Instance type of the cluster. I.e: For Aws `t3a.xlarge`, for Scaleway `DEV-L`
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="kubernetesMode")
    def kubernetes_mode(self) -> pulumi.Output[str]:
        """
        Kubernetes mode of the cluster. - Can be: `K3S`, `MANAGED`. - Default: `MANAGED`.
        """
        return pulumi.get(self, "kubernetes_mode")

    @property
    @pulumi.getter(name="maxRunningNodes")
    def max_running_nodes(self) -> pulumi.Output[int]:
        """
        Maximum number of nodes running for the cluster. [NOTE: have to be set to 1 in case of K3S clusters] - Must be: `>= 1`.
        - Default: `10`.
        """
        return pulumi.get(self, "max_running_nodes")

    @property
    @pulumi.getter(name="minRunningNodes")
    def min_running_nodes(self) -> pulumi.Output[int]:
        """
        Minimum number of nodes running for the cluster. [NOTE: have to be set to 1 in case of K3S clusters]. - Must be: `>= 1`.
        - Default: `3`.
        """
        return pulumi.get(self, "min_running_nodes")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the cluster.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> pulumi.Output[str]:
        """
        Id of the organization.
        """
        return pulumi.get(self, "organization_id")

    @property
    @pulumi.getter
    def region(self) -> pulumi.Output[str]:
        """
        Region of the cluster.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="routingTables")
    def routing_tables(self) -> pulumi.Output[Sequence['outputs.ClusterRoutingTable']]:
        """
        List of routes of the cluster.
        """
        return pulumi.get(self, "routing_tables")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        """
        State of the cluster. - Can be: `DEPLOYED`, `STOPPED`. - Default: `DEPLOYED`.
        """
        return pulumi.get(self, "state")

