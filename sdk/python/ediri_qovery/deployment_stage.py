# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['DeploymentStageArgs', 'DeploymentStage']

@pulumi.input_type
class DeploymentStageArgs:
    def __init__(__self__, *,
                 environment_id: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 is_after: Optional[pulumi.Input[str]] = None,
                 is_before: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a DeploymentStage resource.
        :param pulumi.Input[str] environment_id: Id of the environment.
        :param pulumi.Input[str] description: Description of the deployment stage.
        :param pulumi.Input[str] is_after: Move the current deployment stage after the target deployment stage
        :param pulumi.Input[str] is_before: Move the current deployment stage before the target deployment stage
        :param pulumi.Input[str] name: Name of the deployment stage.
        """
        pulumi.set(__self__, "environment_id", environment_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if is_after is not None:
            pulumi.set(__self__, "is_after", is_after)
        if is_before is not None:
            pulumi.set(__self__, "is_before", is_before)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> pulumi.Input[str]:
        """
        Id of the environment.
        """
        return pulumi.get(self, "environment_id")

    @environment_id.setter
    def environment_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "environment_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the deployment stage.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="isAfter")
    def is_after(self) -> Optional[pulumi.Input[str]]:
        """
        Move the current deployment stage after the target deployment stage
        """
        return pulumi.get(self, "is_after")

    @is_after.setter
    def is_after(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "is_after", value)

    @property
    @pulumi.getter(name="isBefore")
    def is_before(self) -> Optional[pulumi.Input[str]]:
        """
        Move the current deployment stage before the target deployment stage
        """
        return pulumi.get(self, "is_before")

    @is_before.setter
    def is_before(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "is_before", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the deployment stage.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _DeploymentStageState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 environment_id: Optional[pulumi.Input[str]] = None,
                 is_after: Optional[pulumi.Input[str]] = None,
                 is_before: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering DeploymentStage resources.
        :param pulumi.Input[str] description: Description of the deployment stage.
        :param pulumi.Input[str] environment_id: Id of the environment.
        :param pulumi.Input[str] is_after: Move the current deployment stage after the target deployment stage
        :param pulumi.Input[str] is_before: Move the current deployment stage before the target deployment stage
        :param pulumi.Input[str] name: Name of the deployment stage.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if environment_id is not None:
            pulumi.set(__self__, "environment_id", environment_id)
        if is_after is not None:
            pulumi.set(__self__, "is_after", is_after)
        if is_before is not None:
            pulumi.set(__self__, "is_before", is_before)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the deployment stage.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> Optional[pulumi.Input[str]]:
        """
        Id of the environment.
        """
        return pulumi.get(self, "environment_id")

    @environment_id.setter
    def environment_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "environment_id", value)

    @property
    @pulumi.getter(name="isAfter")
    def is_after(self) -> Optional[pulumi.Input[str]]:
        """
        Move the current deployment stage after the target deployment stage
        """
        return pulumi.get(self, "is_after")

    @is_after.setter
    def is_after(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "is_after", value)

    @property
    @pulumi.getter(name="isBefore")
    def is_before(self) -> Optional[pulumi.Input[str]]:
        """
        Move the current deployment stage before the target deployment stage
        """
        return pulumi.get(self, "is_before")

    @is_before.setter
    def is_before(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "is_before", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the deployment stage.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


class DeploymentStage(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 environment_id: Optional[pulumi.Input[str]] = None,
                 is_after: Optional[pulumi.Input[str]] = None,
                 is_before: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        ## Import

        ```sh
         $ pulumi import qovery:index/deploymentStage:DeploymentStage my_deployment_stage "<deployment_stage_id>"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Description of the deployment stage.
        :param pulumi.Input[str] environment_id: Id of the environment.
        :param pulumi.Input[str] is_after: Move the current deployment stage after the target deployment stage
        :param pulumi.Input[str] is_before: Move the current deployment stage before the target deployment stage
        :param pulumi.Input[str] name: Name of the deployment stage.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DeploymentStageArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Import

        ```sh
         $ pulumi import qovery:index/deploymentStage:DeploymentStage my_deployment_stage "<deployment_stage_id>"
        ```

        :param str resource_name: The name of the resource.
        :param DeploymentStageArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DeploymentStageArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 environment_id: Optional[pulumi.Input[str]] = None,
                 is_after: Optional[pulumi.Input[str]] = None,
                 is_before: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DeploymentStageArgs.__new__(DeploymentStageArgs)

            __props__.__dict__["description"] = description
            if environment_id is None and not opts.urn:
                raise TypeError("Missing required property 'environment_id'")
            __props__.__dict__["environment_id"] = environment_id
            __props__.__dict__["is_after"] = is_after
            __props__.__dict__["is_before"] = is_before
            __props__.__dict__["name"] = name
        super(DeploymentStage, __self__).__init__(
            'qovery:index/deploymentStage:DeploymentStage',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            environment_id: Optional[pulumi.Input[str]] = None,
            is_after: Optional[pulumi.Input[str]] = None,
            is_before: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None) -> 'DeploymentStage':
        """
        Get an existing DeploymentStage resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Description of the deployment stage.
        :param pulumi.Input[str] environment_id: Id of the environment.
        :param pulumi.Input[str] is_after: Move the current deployment stage after the target deployment stage
        :param pulumi.Input[str] is_before: Move the current deployment stage before the target deployment stage
        :param pulumi.Input[str] name: Name of the deployment stage.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DeploymentStageState.__new__(_DeploymentStageState)

        __props__.__dict__["description"] = description
        __props__.__dict__["environment_id"] = environment_id
        __props__.__dict__["is_after"] = is_after
        __props__.__dict__["is_before"] = is_before
        __props__.__dict__["name"] = name
        return DeploymentStage(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Description of the deployment stage.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> pulumi.Output[str]:
        """
        Id of the environment.
        """
        return pulumi.get(self, "environment_id")

    @property
    @pulumi.getter(name="isAfter")
    def is_after(self) -> pulumi.Output[Optional[str]]:
        """
        Move the current deployment stage after the target deployment stage
        """
        return pulumi.get(self, "is_after")

    @property
    @pulumi.getter(name="isBefore")
    def is_before(self) -> pulumi.Output[Optional[str]]:
        """
        Move the current deployment stage before the target deployment stage
        """
        return pulumi.get(self, "is_before")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the deployment stage.
        """
        return pulumi.get(self, "name")

