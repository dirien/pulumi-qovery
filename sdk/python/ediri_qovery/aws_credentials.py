# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['AwsCredentialsArgs', 'AwsCredentials']

@pulumi.input_type
class AwsCredentialsArgs:
    def __init__(__self__, *,
                 access_key_id: pulumi.Input[str],
                 organization_id: pulumi.Input[str],
                 secret_access_key: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a AwsCredentials resource.
        :param pulumi.Input[str] access_key_id: Your AWS access key id.
        :param pulumi.Input[str] organization_id: Id of the organization.
        :param pulumi.Input[str] secret_access_key: Your AWS secret access key.
        :param pulumi.Input[str] name: Name of the aws credentials.
        """
        pulumi.set(__self__, "access_key_id", access_key_id)
        pulumi.set(__self__, "organization_id", organization_id)
        pulumi.set(__self__, "secret_access_key", secret_access_key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="accessKeyId")
    def access_key_id(self) -> pulumi.Input[str]:
        """
        Your AWS access key id.
        """
        return pulumi.get(self, "access_key_id")

    @access_key_id.setter
    def access_key_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_key_id", value)

    @property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> pulumi.Input[str]:
        """
        Id of the organization.
        """
        return pulumi.get(self, "organization_id")

    @organization_id.setter
    def organization_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "organization_id", value)

    @property
    @pulumi.getter(name="secretAccessKey")
    def secret_access_key(self) -> pulumi.Input[str]:
        """
        Your AWS secret access key.
        """
        return pulumi.get(self, "secret_access_key")

    @secret_access_key.setter
    def secret_access_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_access_key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the aws credentials.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _AwsCredentialsState:
    def __init__(__self__, *,
                 access_key_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 organization_id: Optional[pulumi.Input[str]] = None,
                 secret_access_key: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering AwsCredentials resources.
        :param pulumi.Input[str] access_key_id: Your AWS access key id.
        :param pulumi.Input[str] name: Name of the aws credentials.
        :param pulumi.Input[str] organization_id: Id of the organization.
        :param pulumi.Input[str] secret_access_key: Your AWS secret access key.
        """
        if access_key_id is not None:
            pulumi.set(__self__, "access_key_id", access_key_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if organization_id is not None:
            pulumi.set(__self__, "organization_id", organization_id)
        if secret_access_key is not None:
            pulumi.set(__self__, "secret_access_key", secret_access_key)

    @property
    @pulumi.getter(name="accessKeyId")
    def access_key_id(self) -> Optional[pulumi.Input[str]]:
        """
        Your AWS access key id.
        """
        return pulumi.get(self, "access_key_id")

    @access_key_id.setter
    def access_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_key_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the aws credentials.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> Optional[pulumi.Input[str]]:
        """
        Id of the organization.
        """
        return pulumi.get(self, "organization_id")

    @organization_id.setter
    def organization_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "organization_id", value)

    @property
    @pulumi.getter(name="secretAccessKey")
    def secret_access_key(self) -> Optional[pulumi.Input[str]]:
        """
        Your AWS secret access key.
        """
        return pulumi.get(self, "secret_access_key")

    @secret_access_key.setter
    def secret_access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_access_key", value)


class AwsCredentials(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_key_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 organization_id: Optional[pulumi.Input[str]] = None,
                 secret_access_key: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        ## # AwsCredentials (Resource)

        Provides a Qovery AWS credentials resource. This can be used to create and manage Qovery AWS credentials.

        ## Example

        ```python
        import pulumi
        import ediri_qovery as qovery

        my_aws_creds = qovery.AwsCredentials("myAwsCreds",
            organization_id=qovery_organization["my_organization"]["id"],
            access_key_id="<your-aws-access-key-id>",
            secret_access_key="<your-aws-secret-access-key>",
            opts=pulumi.ResourceOptions(depends_on=[qovery_organization["my_organization"]]))
        ```

        ## Import

        ```sh
         $ pulumi import qovery:index/awsCredentials:AwsCredentials my_aws_creds "<organization_id>,<aws_credentials_id>"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] access_key_id: Your AWS access key id.
        :param pulumi.Input[str] name: Name of the aws credentials.
        :param pulumi.Input[str] organization_id: Id of the organization.
        :param pulumi.Input[str] secret_access_key: Your AWS secret access key.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AwsCredentialsArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## # AwsCredentials (Resource)

        Provides a Qovery AWS credentials resource. This can be used to create and manage Qovery AWS credentials.

        ## Example

        ```python
        import pulumi
        import ediri_qovery as qovery

        my_aws_creds = qovery.AwsCredentials("myAwsCreds",
            organization_id=qovery_organization["my_organization"]["id"],
            access_key_id="<your-aws-access-key-id>",
            secret_access_key="<your-aws-secret-access-key>",
            opts=pulumi.ResourceOptions(depends_on=[qovery_organization["my_organization"]]))
        ```

        ## Import

        ```sh
         $ pulumi import qovery:index/awsCredentials:AwsCredentials my_aws_creds "<organization_id>,<aws_credentials_id>"
        ```

        :param str resource_name: The name of the resource.
        :param AwsCredentialsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AwsCredentialsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_key_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 organization_id: Optional[pulumi.Input[str]] = None,
                 secret_access_key: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AwsCredentialsArgs.__new__(AwsCredentialsArgs)

            if access_key_id is None and not opts.urn:
                raise TypeError("Missing required property 'access_key_id'")
            __props__.__dict__["access_key_id"] = None if access_key_id is None else pulumi.Output.secret(access_key_id)
            __props__.__dict__["name"] = name
            if organization_id is None and not opts.urn:
                raise TypeError("Missing required property 'organization_id'")
            __props__.__dict__["organization_id"] = organization_id
            if secret_access_key is None and not opts.urn:
                raise TypeError("Missing required property 'secret_access_key'")
            __props__.__dict__["secret_access_key"] = None if secret_access_key is None else pulumi.Output.secret(secret_access_key)
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["accessKeyId", "secretAccessKey"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(AwsCredentials, __self__).__init__(
            'qovery:index/awsCredentials:AwsCredentials',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_key_id: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            organization_id: Optional[pulumi.Input[str]] = None,
            secret_access_key: Optional[pulumi.Input[str]] = None) -> 'AwsCredentials':
        """
        Get an existing AwsCredentials resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] access_key_id: Your AWS access key id.
        :param pulumi.Input[str] name: Name of the aws credentials.
        :param pulumi.Input[str] organization_id: Id of the organization.
        :param pulumi.Input[str] secret_access_key: Your AWS secret access key.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AwsCredentialsState.__new__(_AwsCredentialsState)

        __props__.__dict__["access_key_id"] = access_key_id
        __props__.__dict__["name"] = name
        __props__.__dict__["organization_id"] = organization_id
        __props__.__dict__["secret_access_key"] = secret_access_key
        return AwsCredentials(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accessKeyId")
    def access_key_id(self) -> pulumi.Output[str]:
        """
        Your AWS access key id.
        """
        return pulumi.get(self, "access_key_id")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the aws credentials.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> pulumi.Output[str]:
        """
        Id of the organization.
        """
        return pulumi.get(self, "organization_id")

    @property
    @pulumi.getter(name="secretAccessKey")
    def secret_access_key(self) -> pulumi.Output[str]:
        """
        Your AWS secret access key.
        """
        return pulumi.get(self, "secret_access_key")

