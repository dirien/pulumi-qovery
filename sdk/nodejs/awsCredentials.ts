// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## # qovery.AwsCredentials (Resource)
 *
 * Provides a Qovery AWS credentials resource. This can be used to create and manage Qovery AWS credentials.
 *
 * ## Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as qovery from "@ediri/qovery";
 *
 * const myAwsCreds = new qovery.AwsCredentials("myAwsCreds", {
 *     organizationId: qovery_organization.my_organization.id,
 *     accessKeyId: "<your-aws-access-key-id>",
 *     secretAccessKey: "<your-aws-secret-access-key>",
 * }, {
 *     dependsOn: [qovery_organization.my_organization],
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import qovery:index/awsCredentials:AwsCredentials my_aws_creds "<organization_id>,<aws_credentials_id>"
 * ```
 */
export class AwsCredentials extends pulumi.CustomResource {
    /**
     * Get an existing AwsCredentials resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AwsCredentialsState, opts?: pulumi.CustomResourceOptions): AwsCredentials {
        return new AwsCredentials(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'qovery:index/awsCredentials:AwsCredentials';

    /**
     * Returns true if the given object is an instance of AwsCredentials.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AwsCredentials {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AwsCredentials.__pulumiType;
    }

    /**
     * Your AWS access key id.
     */
    public readonly accessKeyId!: pulumi.Output<string>;
    /**
     * Name of the aws credentials.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Id of the organization.
     */
    public readonly organizationId!: pulumi.Output<string>;
    /**
     * Your AWS secret access key.
     */
    public readonly secretAccessKey!: pulumi.Output<string>;

    /**
     * Create a AwsCredentials resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AwsCredentialsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AwsCredentialsArgs | AwsCredentialsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AwsCredentialsState | undefined;
            resourceInputs["accessKeyId"] = state ? state.accessKeyId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["organizationId"] = state ? state.organizationId : undefined;
            resourceInputs["secretAccessKey"] = state ? state.secretAccessKey : undefined;
        } else {
            const args = argsOrState as AwsCredentialsArgs | undefined;
            if ((!args || args.accessKeyId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accessKeyId'");
            }
            if ((!args || args.organizationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'organizationId'");
            }
            if ((!args || args.secretAccessKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'secretAccessKey'");
            }
            resourceInputs["accessKeyId"] = args?.accessKeyId ? pulumi.secret(args.accessKeyId) : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["organizationId"] = args ? args.organizationId : undefined;
            resourceInputs["secretAccessKey"] = args?.secretAccessKey ? pulumi.secret(args.secretAccessKey) : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["accessKeyId", "secretAccessKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(AwsCredentials.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AwsCredentials resources.
 */
export interface AwsCredentialsState {
    /**
     * Your AWS access key id.
     */
    accessKeyId?: pulumi.Input<string>;
    /**
     * Name of the aws credentials.
     */
    name?: pulumi.Input<string>;
    /**
     * Id of the organization.
     */
    organizationId?: pulumi.Input<string>;
    /**
     * Your AWS secret access key.
     */
    secretAccessKey?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AwsCredentials resource.
 */
export interface AwsCredentialsArgs {
    /**
     * Your AWS access key id.
     */
    accessKeyId: pulumi.Input<string>;
    /**
     * Name of the aws credentials.
     */
    name?: pulumi.Input<string>;
    /**
     * Id of the organization.
     */
    organizationId: pulumi.Input<string>;
    /**
     * Your AWS secret access key.
     */
    secretAccessKey: pulumi.Input<string>;
}
