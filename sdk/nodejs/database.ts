// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## # qovery.Database (Resource)
 *
 * Provides a Qovery database resource. This can be used to create and manage Qovery databases.
 *
 * ## Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as qovery from "@ediri/qovery";
 *
 * const myContainerDatabase = new qovery.Database("myContainerDatabase", {
 *     environmentId: qovery_environment.my_environment.id,
 *     type: "POSTGRESQL",
 *     version: "10",
 *     mode: "CONTAINER",
 *     accessibility: "PRIVATE",
 *     cpu: 250,
 *     memory: 256,
 *     storage: 10,
 * }, {
 *     dependsOn: [qovery_environment.my_environment],
 * });
 * const myManagedDatabase = new qovery.Database("myManagedDatabase", {
 *     environmentId: qovery_environment.my_environment.id,
 *     type: "POSTGRESQL",
 *     version: "10",
 *     mode: "MANAGED",
 *     instanceType: "db.t3.micro",
 *     accessibility: "PRIVATE",
 *     storage: 10,
 * }, {
 *     dependsOn: [qovery_environment.my_environment],
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import qovery:index/database:Database my_database "<database_id>"
 * ```
 */
export class Database extends pulumi.CustomResource {
    /**
     * Get an existing Database resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatabaseState, opts?: pulumi.CustomResourceOptions): Database {
        return new Database(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'qovery:index/database:Database';

    /**
     * Returns true if the given object is an instance of Database.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Database {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Database.__pulumiType;
    }

    /**
     * Accessibility of the database. - Can be: `PRIVATE`, `PUBLIC`. - Default: `PUBLIC`.
     */
    public readonly accessibility!: pulumi.Output<string>;
    /**
     * List of annotations group ids
     */
    public readonly annotationsGroupIds!: pulumi.Output<string[] | undefined>;
    /**
     * CPU of the database in millicores (m) [1000m = 1 CPU]. - Must be: `>= 250`. - Default: `250`.
     */
    public readonly cpu!: pulumi.Output<number>;
    /**
     * Id of the deployment stage.
     */
    public readonly deploymentStageId!: pulumi.Output<string>;
    /**
     * Id of the environment.
     */
    public readonly environmentId!: pulumi.Output<string>;
    /**
     * The database external FQDN host [NOTE: only if your container is using a publicly accessible port].
     */
    public /*out*/ readonly externalHost!: pulumi.Output<string>;
    /**
     * Icon URI representing the database.
     */
    public readonly iconUri!: pulumi.Output<string>;
    /**
     * Instance type of the database.
     */
    public readonly instanceType!: pulumi.Output<string>;
    /**
     * The database internal host (Recommended for your application)
     */
    public /*out*/ readonly internalHost!: pulumi.Output<string>;
    /**
     * List of labels group ids
     */
    public readonly labelsGroupIds!: pulumi.Output<string[] | undefined>;
    /**
     * The login to connect to your database
     */
    public /*out*/ readonly login!: pulumi.Output<string>;
    /**
     * RAM of the database in MB [1024MB = 1GB]. - Must be: `>= 100`. - Default: `256`.
     */
    public readonly memory!: pulumi.Output<number>;
    /**
     * Mode of the database [NOTE: can't be updated after creation]. - Can be: `CONTAINER`, `MANAGED`.
     */
    public readonly mode!: pulumi.Output<string>;
    /**
     * Name of the database.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The password to connect to your database
     */
    public /*out*/ readonly password!: pulumi.Output<string>;
    /**
     * The port to connect to your database
     */
    public /*out*/ readonly port!: pulumi.Output<number>;
    /**
     * Storage of the database in GB [1024MB = 1GB] [NOTE: can't be updated after creation]. - Must be: `>= 10`. - Default:
     * `10`.
     */
    public readonly storage!: pulumi.Output<number>;
    /**
     * Type of the database [NOTE: can't be updated after creation]. - Can be: `MONGODB`, `MYSQL`, `POSTGRESQL`, `REDIS`.
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * Version of the database
     */
    public readonly version!: pulumi.Output<string>;

    /**
     * Create a Database resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatabaseArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatabaseArgs | DatabaseState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatabaseState | undefined;
            resourceInputs["accessibility"] = state ? state.accessibility : undefined;
            resourceInputs["annotationsGroupIds"] = state ? state.annotationsGroupIds : undefined;
            resourceInputs["cpu"] = state ? state.cpu : undefined;
            resourceInputs["deploymentStageId"] = state ? state.deploymentStageId : undefined;
            resourceInputs["environmentId"] = state ? state.environmentId : undefined;
            resourceInputs["externalHost"] = state ? state.externalHost : undefined;
            resourceInputs["iconUri"] = state ? state.iconUri : undefined;
            resourceInputs["instanceType"] = state ? state.instanceType : undefined;
            resourceInputs["internalHost"] = state ? state.internalHost : undefined;
            resourceInputs["labelsGroupIds"] = state ? state.labelsGroupIds : undefined;
            resourceInputs["login"] = state ? state.login : undefined;
            resourceInputs["memory"] = state ? state.memory : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["storage"] = state ? state.storage : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as DatabaseArgs | undefined;
            if ((!args || args.environmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environmentId'");
            }
            if ((!args || args.mode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mode'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            if ((!args || args.version === undefined) && !opts.urn) {
                throw new Error("Missing required property 'version'");
            }
            resourceInputs["accessibility"] = args ? args.accessibility : undefined;
            resourceInputs["annotationsGroupIds"] = args ? args.annotationsGroupIds : undefined;
            resourceInputs["cpu"] = args ? args.cpu : undefined;
            resourceInputs["deploymentStageId"] = args ? args.deploymentStageId : undefined;
            resourceInputs["environmentId"] = args ? args.environmentId : undefined;
            resourceInputs["iconUri"] = args ? args.iconUri : undefined;
            resourceInputs["instanceType"] = args ? args.instanceType : undefined;
            resourceInputs["labelsGroupIds"] = args ? args.labelsGroupIds : undefined;
            resourceInputs["memory"] = args ? args.memory : undefined;
            resourceInputs["mode"] = args ? args.mode : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["storage"] = args ? args.storage : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["externalHost"] = undefined /*out*/;
            resourceInputs["internalHost"] = undefined /*out*/;
            resourceInputs["login"] = undefined /*out*/;
            resourceInputs["password"] = undefined /*out*/;
            resourceInputs["port"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Database.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Database resources.
 */
export interface DatabaseState {
    /**
     * Accessibility of the database. - Can be: `PRIVATE`, `PUBLIC`. - Default: `PUBLIC`.
     */
    accessibility?: pulumi.Input<string>;
    /**
     * List of annotations group ids
     */
    annotationsGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * CPU of the database in millicores (m) [1000m = 1 CPU]. - Must be: `>= 250`. - Default: `250`.
     */
    cpu?: pulumi.Input<number>;
    /**
     * Id of the deployment stage.
     */
    deploymentStageId?: pulumi.Input<string>;
    /**
     * Id of the environment.
     */
    environmentId?: pulumi.Input<string>;
    /**
     * The database external FQDN host [NOTE: only if your container is using a publicly accessible port].
     */
    externalHost?: pulumi.Input<string>;
    /**
     * Icon URI representing the database.
     */
    iconUri?: pulumi.Input<string>;
    /**
     * Instance type of the database.
     */
    instanceType?: pulumi.Input<string>;
    /**
     * The database internal host (Recommended for your application)
     */
    internalHost?: pulumi.Input<string>;
    /**
     * List of labels group ids
     */
    labelsGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The login to connect to your database
     */
    login?: pulumi.Input<string>;
    /**
     * RAM of the database in MB [1024MB = 1GB]. - Must be: `>= 100`. - Default: `256`.
     */
    memory?: pulumi.Input<number>;
    /**
     * Mode of the database [NOTE: can't be updated after creation]. - Can be: `CONTAINER`, `MANAGED`.
     */
    mode?: pulumi.Input<string>;
    /**
     * Name of the database.
     */
    name?: pulumi.Input<string>;
    /**
     * The password to connect to your database
     */
    password?: pulumi.Input<string>;
    /**
     * The port to connect to your database
     */
    port?: pulumi.Input<number>;
    /**
     * Storage of the database in GB [1024MB = 1GB] [NOTE: can't be updated after creation]. - Must be: `>= 10`. - Default:
     * `10`.
     */
    storage?: pulumi.Input<number>;
    /**
     * Type of the database [NOTE: can't be updated after creation]. - Can be: `MONGODB`, `MYSQL`, `POSTGRESQL`, `REDIS`.
     */
    type?: pulumi.Input<string>;
    /**
     * Version of the database
     */
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Database resource.
 */
export interface DatabaseArgs {
    /**
     * Accessibility of the database. - Can be: `PRIVATE`, `PUBLIC`. - Default: `PUBLIC`.
     */
    accessibility?: pulumi.Input<string>;
    /**
     * List of annotations group ids
     */
    annotationsGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * CPU of the database in millicores (m) [1000m = 1 CPU]. - Must be: `>= 250`. - Default: `250`.
     */
    cpu?: pulumi.Input<number>;
    /**
     * Id of the deployment stage.
     */
    deploymentStageId?: pulumi.Input<string>;
    /**
     * Id of the environment.
     */
    environmentId: pulumi.Input<string>;
    /**
     * Icon URI representing the database.
     */
    iconUri?: pulumi.Input<string>;
    /**
     * Instance type of the database.
     */
    instanceType?: pulumi.Input<string>;
    /**
     * List of labels group ids
     */
    labelsGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * RAM of the database in MB [1024MB = 1GB]. - Must be: `>= 100`. - Default: `256`.
     */
    memory?: pulumi.Input<number>;
    /**
     * Mode of the database [NOTE: can't be updated after creation]. - Can be: `CONTAINER`, `MANAGED`.
     */
    mode: pulumi.Input<string>;
    /**
     * Name of the database.
     */
    name?: pulumi.Input<string>;
    /**
     * Storage of the database in GB [1024MB = 1GB] [NOTE: can't be updated after creation]. - Must be: `>= 10`. - Default:
     * `10`.
     */
    storage?: pulumi.Input<number>;
    /**
     * Type of the database [NOTE: can't be updated after creation]. - Can be: `MONGODB`, `MYSQL`, `POSTGRESQL`, `REDIS`.
     */
    type: pulumi.Input<string>;
    /**
     * Version of the database
     */
    version: pulumi.Input<string>;
}
