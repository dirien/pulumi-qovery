// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## # qovery.Helm (Resource)
 *
 * Provides a Qovery helm resource. This can be used to create and manage Qovery helm registry.
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import qovery:index/helm:Helm my_helm "<helm_id>"
 * ```
 */
export class Helm extends pulumi.CustomResource {
    /**
     * Get an existing Helm resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HelmState, opts?: pulumi.CustomResourceOptions): Helm {
        return new Helm(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'qovery:index/helm:Helm';

    /**
     * Returns true if the given object is an instance of Helm.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Helm {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Helm.__pulumiType;
    }

    /**
     * Advanced settings.
     */
    public readonly advancedSettingsJson!: pulumi.Output<string>;
    /**
     * Allow this chart to deploy resources outside of this environment namespace (including CRDs or non-namespaced resources)
     */
    public readonly allowClusterWideResources!: pulumi.Output<boolean>;
    /**
     * Helm arguments
     */
    public readonly arguments!: pulumi.Output<string[]>;
    /**
     * Specify if service will be automatically updated on every new commit on the branch.
     */
    public readonly autoDeploy!: pulumi.Output<boolean>;
    /**
     * Specify if the environment preview option is activated or not for this helm.
     */
    public readonly autoPreview!: pulumi.Output<boolean>;
    /**
     * List of built-in environment variables linked to this helm.
     */
    public /*out*/ readonly builtInEnvironmentVariables!: pulumi.Output<outputs.HelmBuiltInEnvironmentVariable[]>;
    /**
     * List of custom domains linked to this helm.
     */
    public readonly customDomains!: pulumi.Output<outputs.HelmCustomDomain[] | undefined>;
    /**
     * List of deployment restrictions
     */
    public readonly deploymentRestrictions!: pulumi.Output<outputs.HelmDeploymentRestriction[] | undefined>;
    /**
     * Id of the deployment stage.
     */
    public readonly deploymentStageId!: pulumi.Output<string>;
    /**
     * Id of the environment.
     */
    public readonly environmentId!: pulumi.Output<string>;
    /**
     * List of environment variable aliases linked to this helm.
     */
    public readonly environmentVariableAliases!: pulumi.Output<outputs.HelmEnvironmentVariableAlias[] | undefined>;
    /**
     * List of environment variable overrides linked to this helm.
     */
    public readonly environmentVariableOverrides!: pulumi.Output<outputs.HelmEnvironmentVariableOverride[] | undefined>;
    /**
     * List of environment variables linked to this helm.
     */
    public readonly environmentVariables!: pulumi.Output<outputs.HelmEnvironmentVariable[] | undefined>;
    /**
     * The helm external FQDN host [NOTE: only if your helm is using a publicly accessible port].
     */
    public /*out*/ readonly externalHost!: pulumi.Output<string>;
    /**
     * The helm internal host.
     */
    public /*out*/ readonly internalHost!: pulumi.Output<string>;
    /**
     * Name of the helm.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * List of ports linked to this helm.
     */
    public readonly ports!: pulumi.Output<{[key: string]: outputs.HelmPorts} | undefined>;
    /**
     * List of secret aliases linked to this helm.
     */
    public readonly secretAliases!: pulumi.Output<outputs.HelmSecretAlias[] | undefined>;
    /**
     * List of secret overrides linked to this helm.
     */
    public readonly secretOverrides!: pulumi.Output<outputs.HelmSecretOverride[] | undefined>;
    /**
     * List of secrets linked to this helm.
     */
    public readonly secrets!: pulumi.Output<outputs.HelmSecret[] | undefined>;
    /**
     * Helm chart from a Helm repository or from a git repository
     */
    public readonly source!: pulumi.Output<outputs.HelmSource>;
    /**
     * Helm timeout in seconds
     */
    public readonly timeoutSec!: pulumi.Output<number>;
    /**
     * Define your own overrides to customize the helm chart behaviour.
     */
    public readonly valuesOverride!: pulumi.Output<outputs.HelmValuesOverride>;

    /**
     * Create a Helm resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: HelmArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HelmArgs | HelmState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HelmState | undefined;
            resourceInputs["advancedSettingsJson"] = state ? state.advancedSettingsJson : undefined;
            resourceInputs["allowClusterWideResources"] = state ? state.allowClusterWideResources : undefined;
            resourceInputs["arguments"] = state ? state.arguments : undefined;
            resourceInputs["autoDeploy"] = state ? state.autoDeploy : undefined;
            resourceInputs["autoPreview"] = state ? state.autoPreview : undefined;
            resourceInputs["builtInEnvironmentVariables"] = state ? state.builtInEnvironmentVariables : undefined;
            resourceInputs["customDomains"] = state ? state.customDomains : undefined;
            resourceInputs["deploymentRestrictions"] = state ? state.deploymentRestrictions : undefined;
            resourceInputs["deploymentStageId"] = state ? state.deploymentStageId : undefined;
            resourceInputs["environmentId"] = state ? state.environmentId : undefined;
            resourceInputs["environmentVariableAliases"] = state ? state.environmentVariableAliases : undefined;
            resourceInputs["environmentVariableOverrides"] = state ? state.environmentVariableOverrides : undefined;
            resourceInputs["environmentVariables"] = state ? state.environmentVariables : undefined;
            resourceInputs["externalHost"] = state ? state.externalHost : undefined;
            resourceInputs["internalHost"] = state ? state.internalHost : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["ports"] = state ? state.ports : undefined;
            resourceInputs["secretAliases"] = state ? state.secretAliases : undefined;
            resourceInputs["secretOverrides"] = state ? state.secretOverrides : undefined;
            resourceInputs["secrets"] = state ? state.secrets : undefined;
            resourceInputs["source"] = state ? state.source : undefined;
            resourceInputs["timeoutSec"] = state ? state.timeoutSec : undefined;
            resourceInputs["valuesOverride"] = state ? state.valuesOverride : undefined;
        } else {
            const args = argsOrState as HelmArgs | undefined;
            if ((!args || args.allowClusterWideResources === undefined) && !opts.urn) {
                throw new Error("Missing required property 'allowClusterWideResources'");
            }
            if ((!args || args.environmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environmentId'");
            }
            if ((!args || args.source === undefined) && !opts.urn) {
                throw new Error("Missing required property 'source'");
            }
            if ((!args || args.valuesOverride === undefined) && !opts.urn) {
                throw new Error("Missing required property 'valuesOverride'");
            }
            resourceInputs["advancedSettingsJson"] = args ? args.advancedSettingsJson : undefined;
            resourceInputs["allowClusterWideResources"] = args ? args.allowClusterWideResources : undefined;
            resourceInputs["arguments"] = args ? args.arguments : undefined;
            resourceInputs["autoDeploy"] = args ? args.autoDeploy : undefined;
            resourceInputs["autoPreview"] = args ? args.autoPreview : undefined;
            resourceInputs["customDomains"] = args ? args.customDomains : undefined;
            resourceInputs["deploymentRestrictions"] = args ? args.deploymentRestrictions : undefined;
            resourceInputs["deploymentStageId"] = args ? args.deploymentStageId : undefined;
            resourceInputs["environmentId"] = args ? args.environmentId : undefined;
            resourceInputs["environmentVariableAliases"] = args ? args.environmentVariableAliases : undefined;
            resourceInputs["environmentVariableOverrides"] = args ? args.environmentVariableOverrides : undefined;
            resourceInputs["environmentVariables"] = args ? args.environmentVariables : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["ports"] = args ? args.ports : undefined;
            resourceInputs["secretAliases"] = args ? args.secretAliases : undefined;
            resourceInputs["secretOverrides"] = args ? args.secretOverrides : undefined;
            resourceInputs["secrets"] = args ? args.secrets : undefined;
            resourceInputs["source"] = args ? args.source : undefined;
            resourceInputs["timeoutSec"] = args ? args.timeoutSec : undefined;
            resourceInputs["valuesOverride"] = args ? args.valuesOverride : undefined;
            resourceInputs["builtInEnvironmentVariables"] = undefined /*out*/;
            resourceInputs["externalHost"] = undefined /*out*/;
            resourceInputs["internalHost"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Helm.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Helm resources.
 */
export interface HelmState {
    /**
     * Advanced settings.
     */
    advancedSettingsJson?: pulumi.Input<string>;
    /**
     * Allow this chart to deploy resources outside of this environment namespace (including CRDs or non-namespaced resources)
     */
    allowClusterWideResources?: pulumi.Input<boolean>;
    /**
     * Helm arguments
     */
    arguments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specify if service will be automatically updated on every new commit on the branch.
     */
    autoDeploy?: pulumi.Input<boolean>;
    /**
     * Specify if the environment preview option is activated or not for this helm.
     */
    autoPreview?: pulumi.Input<boolean>;
    /**
     * List of built-in environment variables linked to this helm.
     */
    builtInEnvironmentVariables?: pulumi.Input<pulumi.Input<inputs.HelmBuiltInEnvironmentVariable>[]>;
    /**
     * List of custom domains linked to this helm.
     */
    customDomains?: pulumi.Input<pulumi.Input<inputs.HelmCustomDomain>[]>;
    /**
     * List of deployment restrictions
     */
    deploymentRestrictions?: pulumi.Input<pulumi.Input<inputs.HelmDeploymentRestriction>[]>;
    /**
     * Id of the deployment stage.
     */
    deploymentStageId?: pulumi.Input<string>;
    /**
     * Id of the environment.
     */
    environmentId?: pulumi.Input<string>;
    /**
     * List of environment variable aliases linked to this helm.
     */
    environmentVariableAliases?: pulumi.Input<pulumi.Input<inputs.HelmEnvironmentVariableAlias>[]>;
    /**
     * List of environment variable overrides linked to this helm.
     */
    environmentVariableOverrides?: pulumi.Input<pulumi.Input<inputs.HelmEnvironmentVariableOverride>[]>;
    /**
     * List of environment variables linked to this helm.
     */
    environmentVariables?: pulumi.Input<pulumi.Input<inputs.HelmEnvironmentVariable>[]>;
    /**
     * The helm external FQDN host [NOTE: only if your helm is using a publicly accessible port].
     */
    externalHost?: pulumi.Input<string>;
    /**
     * The helm internal host.
     */
    internalHost?: pulumi.Input<string>;
    /**
     * Name of the helm.
     */
    name?: pulumi.Input<string>;
    /**
     * List of ports linked to this helm.
     */
    ports?: pulumi.Input<{[key: string]: pulumi.Input<inputs.HelmPorts>}>;
    /**
     * List of secret aliases linked to this helm.
     */
    secretAliases?: pulumi.Input<pulumi.Input<inputs.HelmSecretAlias>[]>;
    /**
     * List of secret overrides linked to this helm.
     */
    secretOverrides?: pulumi.Input<pulumi.Input<inputs.HelmSecretOverride>[]>;
    /**
     * List of secrets linked to this helm.
     */
    secrets?: pulumi.Input<pulumi.Input<inputs.HelmSecret>[]>;
    /**
     * Helm chart from a Helm repository or from a git repository
     */
    source?: pulumi.Input<inputs.HelmSource>;
    /**
     * Helm timeout in seconds
     */
    timeoutSec?: pulumi.Input<number>;
    /**
     * Define your own overrides to customize the helm chart behaviour.
     */
    valuesOverride?: pulumi.Input<inputs.HelmValuesOverride>;
}

/**
 * The set of arguments for constructing a Helm resource.
 */
export interface HelmArgs {
    /**
     * Advanced settings.
     */
    advancedSettingsJson?: pulumi.Input<string>;
    /**
     * Allow this chart to deploy resources outside of this environment namespace (including CRDs or non-namespaced resources)
     */
    allowClusterWideResources: pulumi.Input<boolean>;
    /**
     * Helm arguments
     */
    arguments?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specify if service will be automatically updated on every new commit on the branch.
     */
    autoDeploy?: pulumi.Input<boolean>;
    /**
     * Specify if the environment preview option is activated or not for this helm.
     */
    autoPreview?: pulumi.Input<boolean>;
    /**
     * List of custom domains linked to this helm.
     */
    customDomains?: pulumi.Input<pulumi.Input<inputs.HelmCustomDomain>[]>;
    /**
     * List of deployment restrictions
     */
    deploymentRestrictions?: pulumi.Input<pulumi.Input<inputs.HelmDeploymentRestriction>[]>;
    /**
     * Id of the deployment stage.
     */
    deploymentStageId?: pulumi.Input<string>;
    /**
     * Id of the environment.
     */
    environmentId: pulumi.Input<string>;
    /**
     * List of environment variable aliases linked to this helm.
     */
    environmentVariableAliases?: pulumi.Input<pulumi.Input<inputs.HelmEnvironmentVariableAlias>[]>;
    /**
     * List of environment variable overrides linked to this helm.
     */
    environmentVariableOverrides?: pulumi.Input<pulumi.Input<inputs.HelmEnvironmentVariableOverride>[]>;
    /**
     * List of environment variables linked to this helm.
     */
    environmentVariables?: pulumi.Input<pulumi.Input<inputs.HelmEnvironmentVariable>[]>;
    /**
     * Name of the helm.
     */
    name?: pulumi.Input<string>;
    /**
     * List of ports linked to this helm.
     */
    ports?: pulumi.Input<{[key: string]: pulumi.Input<inputs.HelmPorts>}>;
    /**
     * List of secret aliases linked to this helm.
     */
    secretAliases?: pulumi.Input<pulumi.Input<inputs.HelmSecretAlias>[]>;
    /**
     * List of secret overrides linked to this helm.
     */
    secretOverrides?: pulumi.Input<pulumi.Input<inputs.HelmSecretOverride>[]>;
    /**
     * List of secrets linked to this helm.
     */
    secrets?: pulumi.Input<pulumi.Input<inputs.HelmSecret>[]>;
    /**
     * Helm chart from a Helm repository or from a git repository
     */
    source: pulumi.Input<inputs.HelmSource>;
    /**
     * Helm timeout in seconds
     */
    timeoutSec?: pulumi.Input<number>;
    /**
     * Define your own overrides to customize the helm chart behaviour.
     */
    valuesOverride: pulumi.Input<inputs.HelmValuesOverride>;
}
