// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## # qovery.LabelsGroup (Resource)
 *
 * Provides a Qovery labels group resource
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import qovery:index/labelsGroup:LabelsGroup my_qovery_labels_group "<labels_group_id>"
 * ```
 */
export class LabelsGroup extends pulumi.CustomResource {
    /**
     * Get an existing LabelsGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LabelsGroupState, opts?: pulumi.CustomResourceOptions): LabelsGroup {
        return new LabelsGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'qovery:index/labelsGroup:LabelsGroup';

    /**
     * Returns true if the given object is an instance of LabelsGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LabelsGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LabelsGroup.__pulumiType;
    }

    /**
     * labels
     */
    public readonly labels!: pulumi.Output<outputs.LabelsGroupLabel[]>;
    /**
     * name of the labels group
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Id of the organization.
     */
    public readonly organizationId!: pulumi.Output<string>;

    /**
     * Create a LabelsGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LabelsGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LabelsGroupArgs | LabelsGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LabelsGroupState | undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["organizationId"] = state ? state.organizationId : undefined;
        } else {
            const args = argsOrState as LabelsGroupArgs | undefined;
            if ((!args || args.labels === undefined) && !opts.urn) {
                throw new Error("Missing required property 'labels'");
            }
            if ((!args || args.organizationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'organizationId'");
            }
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["organizationId"] = args ? args.organizationId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LabelsGroup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LabelsGroup resources.
 */
export interface LabelsGroupState {
    /**
     * labels
     */
    labels?: pulumi.Input<pulumi.Input<inputs.LabelsGroupLabel>[]>;
    /**
     * name of the labels group
     */
    name?: pulumi.Input<string>;
    /**
     * Id of the organization.
     */
    organizationId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LabelsGroup resource.
 */
export interface LabelsGroupArgs {
    /**
     * labels
     */
    labels: pulumi.Input<pulumi.Input<inputs.LabelsGroupLabel>[]>;
    /**
     * name of the labels group
     */
    name?: pulumi.Input<string>;
    /**
     * Id of the organization.
     */
    organizationId: pulumi.Input<string>;
}
