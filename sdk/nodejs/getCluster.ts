// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## # qovery.Cluster (Data Source)
 *
 * Provides a Qovery cluster resource. This can be used to create and manage Qovery cluster.
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as qovery from "@pulumi/qovery";
 *
 * const myCluster = qovery.getCluster({
 *     id: "<cluster_id>",
 *     organizationId: "<organization_id>",
 * });
 * ```
 */
export function getCluster(args: GetClusterArgs, opts?: pulumi.InvokeOptions): Promise<GetClusterResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("qovery:index/getCluster:getCluster", {
        "advancedSettingsJson": args.advancedSettingsJson,
        "description": args.description,
        "diskSize": args.diskSize,
        "features": args.features,
        "id": args.id,
        "instanceType": args.instanceType,
        "kubernetesMode": args.kubernetesMode,
        "maxRunningNodes": args.maxRunningNodes,
        "minRunningNodes": args.minRunningNodes,
        "organizationId": args.organizationId,
        "production": args.production,
        "routingTables": args.routingTables,
        "state": args.state,
    }, opts);
}

/**
 * A collection of arguments for invoking getCluster.
 */
export interface GetClusterArgs {
    advancedSettingsJson?: string;
    description?: string;
    diskSize?: number;
    features?: inputs.GetClusterFeatures;
    id: string;
    instanceType?: string;
    kubernetesMode?: string;
    maxRunningNodes?: number;
    minRunningNodes?: number;
    organizationId: string;
    production?: boolean;
    routingTables?: inputs.GetClusterRoutingTable[];
    state?: string;
}

/**
 * A collection of values returned by getCluster.
 */
export interface GetClusterResult {
    readonly advancedSettingsJson: string;
    readonly cloudProvider: string;
    readonly credentialsId: string;
    readonly description: string;
    readonly diskSize: number;
    readonly features: outputs.GetClusterFeatures;
    readonly id: string;
    readonly instanceType: string;
    readonly kubernetesMode: string;
    readonly maxRunningNodes: number;
    readonly minRunningNodes: number;
    readonly name: string;
    readonly organizationId: string;
    readonly production: boolean;
    readonly region: string;
    readonly routingTables: outputs.GetClusterRoutingTable[];
    readonly state: string;
}
/**
 * ## # qovery.Cluster (Data Source)
 *
 * Provides a Qovery cluster resource. This can be used to create and manage Qovery cluster.
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as qovery from "@pulumi/qovery";
 *
 * const myCluster = qovery.getCluster({
 *     id: "<cluster_id>",
 *     organizationId: "<organization_id>",
 * });
 * ```
 */
export function getClusterOutput(args: GetClusterOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetClusterResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("qovery:index/getCluster:getCluster", {
        "advancedSettingsJson": args.advancedSettingsJson,
        "description": args.description,
        "diskSize": args.diskSize,
        "features": args.features,
        "id": args.id,
        "instanceType": args.instanceType,
        "kubernetesMode": args.kubernetesMode,
        "maxRunningNodes": args.maxRunningNodes,
        "minRunningNodes": args.minRunningNodes,
        "organizationId": args.organizationId,
        "production": args.production,
        "routingTables": args.routingTables,
        "state": args.state,
    }, opts);
}

/**
 * A collection of arguments for invoking getCluster.
 */
export interface GetClusterOutputArgs {
    advancedSettingsJson?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    diskSize?: pulumi.Input<number>;
    features?: pulumi.Input<inputs.GetClusterFeaturesArgs>;
    id: pulumi.Input<string>;
    instanceType?: pulumi.Input<string>;
    kubernetesMode?: pulumi.Input<string>;
    maxRunningNodes?: pulumi.Input<number>;
    minRunningNodes?: pulumi.Input<number>;
    organizationId: pulumi.Input<string>;
    production?: pulumi.Input<boolean>;
    routingTables?: pulumi.Input<pulumi.Input<inputs.GetClusterRoutingTableArgs>[]>;
    state?: pulumi.Input<string>;
}
