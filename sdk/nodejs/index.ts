// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ApplicationArgs, ApplicationState } from "./application";
export type Application = import("./application").Application;
export const Application: typeof import("./application").Application = null as any;
utilities.lazyLoad(exports, ["Application"], () => require("./application"));

export { AwsCredentialsArgs, AwsCredentialsState } from "./awsCredentials";
export type AwsCredentials = import("./awsCredentials").AwsCredentials;
export const AwsCredentials: typeof import("./awsCredentials").AwsCredentials = null as any;
utilities.lazyLoad(exports, ["AwsCredentials"], () => require("./awsCredentials"));

export { ClusterArgs, ClusterState } from "./cluster";
export type Cluster = import("./cluster").Cluster;
export const Cluster: typeof import("./cluster").Cluster = null as any;
utilities.lazyLoad(exports, ["Cluster"], () => require("./cluster"));

export { ContainerArgs, ContainerState } from "./container";
export type Container = import("./container").Container;
export const Container: typeof import("./container").Container = null as any;
utilities.lazyLoad(exports, ["Container"], () => require("./container"));

export { ContainerRegistryArgs, ContainerRegistryState } from "./containerRegistry";
export type ContainerRegistry = import("./containerRegistry").ContainerRegistry;
export const ContainerRegistry: typeof import("./containerRegistry").ContainerRegistry = null as any;
utilities.lazyLoad(exports, ["ContainerRegistry"], () => require("./containerRegistry"));

export { DatabaseArgs, DatabaseState } from "./database";
export type Database = import("./database").Database;
export const Database: typeof import("./database").Database = null as any;
utilities.lazyLoad(exports, ["Database"], () => require("./database"));

export { DeploymentArgs, DeploymentState } from "./deployment";
export type Deployment = import("./deployment").Deployment;
export const Deployment: typeof import("./deployment").Deployment = null as any;
utilities.lazyLoad(exports, ["Deployment"], () => require("./deployment"));

export { DeploymentStageArgs, DeploymentStageState } from "./deploymentStage";
export type DeploymentStage = import("./deploymentStage").DeploymentStage;
export const DeploymentStage: typeof import("./deploymentStage").DeploymentStage = null as any;
utilities.lazyLoad(exports, ["DeploymentStage"], () => require("./deploymentStage"));

export { EnvironmentArgs, EnvironmentState } from "./environment";
export type Environment = import("./environment").Environment;
export const Environment: typeof import("./environment").Environment = null as any;
utilities.lazyLoad(exports, ["Environment"], () => require("./environment"));

export { GetApplicationArgs, GetApplicationResult, GetApplicationOutputArgs } from "./getApplication";
export const getApplication: typeof import("./getApplication").getApplication = null as any;
export const getApplicationOutput: typeof import("./getApplication").getApplicationOutput = null as any;
utilities.lazyLoad(exports, ["getApplication","getApplicationOutput"], () => require("./getApplication"));

export { GetAwsCredentialsArgs, GetAwsCredentialsResult, GetAwsCredentialsOutputArgs } from "./getAwsCredentials";
export const getAwsCredentials: typeof import("./getAwsCredentials").getAwsCredentials = null as any;
export const getAwsCredentialsOutput: typeof import("./getAwsCredentials").getAwsCredentialsOutput = null as any;
utilities.lazyLoad(exports, ["getAwsCredentials","getAwsCredentialsOutput"], () => require("./getAwsCredentials"));

export { GetClusterArgs, GetClusterResult, GetClusterOutputArgs } from "./getCluster";
export const getCluster: typeof import("./getCluster").getCluster = null as any;
export const getClusterOutput: typeof import("./getCluster").getClusterOutput = null as any;
utilities.lazyLoad(exports, ["getCluster","getClusterOutput"], () => require("./getCluster"));

export { GetContainerArgs, GetContainerResult, GetContainerOutputArgs } from "./getContainer";
export const getContainer: typeof import("./getContainer").getContainer = null as any;
export const getContainerOutput: typeof import("./getContainer").getContainerOutput = null as any;
utilities.lazyLoad(exports, ["getContainer","getContainerOutput"], () => require("./getContainer"));

export { GetContainerRegistryArgs, GetContainerRegistryResult, GetContainerRegistryOutputArgs } from "./getContainerRegistry";
export const getContainerRegistry: typeof import("./getContainerRegistry").getContainerRegistry = null as any;
export const getContainerRegistryOutput: typeof import("./getContainerRegistry").getContainerRegistryOutput = null as any;
utilities.lazyLoad(exports, ["getContainerRegistry","getContainerRegistryOutput"], () => require("./getContainerRegistry"));

export { GetDatabaseArgs, GetDatabaseResult, GetDatabaseOutputArgs } from "./getDatabase";
export const getDatabase: typeof import("./getDatabase").getDatabase = null as any;
export const getDatabaseOutput: typeof import("./getDatabase").getDatabaseOutput = null as any;
utilities.lazyLoad(exports, ["getDatabase","getDatabaseOutput"], () => require("./getDatabase"));

export { GetDeploymentArgs, GetDeploymentResult, GetDeploymentOutputArgs } from "./getDeployment";
export const getDeployment: typeof import("./getDeployment").getDeployment = null as any;
export const getDeploymentOutput: typeof import("./getDeployment").getDeploymentOutput = null as any;
utilities.lazyLoad(exports, ["getDeployment","getDeploymentOutput"], () => require("./getDeployment"));

export { GetDeploymentStageArgs, GetDeploymentStageResult, GetDeploymentStageOutputArgs } from "./getDeploymentStage";
export const getDeploymentStage: typeof import("./getDeploymentStage").getDeploymentStage = null as any;
export const getDeploymentStageOutput: typeof import("./getDeploymentStage").getDeploymentStageOutput = null as any;
utilities.lazyLoad(exports, ["getDeploymentStage","getDeploymentStageOutput"], () => require("./getDeploymentStage"));

export { GetEnvironmentArgs, GetEnvironmentResult, GetEnvironmentOutputArgs } from "./getEnvironment";
export const getEnvironment: typeof import("./getEnvironment").getEnvironment = null as any;
export const getEnvironmentOutput: typeof import("./getEnvironment").getEnvironmentOutput = null as any;
utilities.lazyLoad(exports, ["getEnvironment","getEnvironmentOutput"], () => require("./getEnvironment"));

export { GetGitTokenArgs, GetGitTokenResult, GetGitTokenOutputArgs } from "./getGitToken";
export const getGitToken: typeof import("./getGitToken").getGitToken = null as any;
export const getGitTokenOutput: typeof import("./getGitToken").getGitTokenOutput = null as any;
utilities.lazyLoad(exports, ["getGitToken","getGitTokenOutput"], () => require("./getGitToken"));

export { GetHelmArgs, GetHelmResult, GetHelmOutputArgs } from "./getHelm";
export const getHelm: typeof import("./getHelm").getHelm = null as any;
export const getHelmOutput: typeof import("./getHelm").getHelmOutput = null as any;
utilities.lazyLoad(exports, ["getHelm","getHelmOutput"], () => require("./getHelm"));

export { GetHelmRepositoryArgs, GetHelmRepositoryResult, GetHelmRepositoryOutputArgs } from "./getHelmRepository";
export const getHelmRepository: typeof import("./getHelmRepository").getHelmRepository = null as any;
export const getHelmRepositoryOutput: typeof import("./getHelmRepository").getHelmRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getHelmRepository","getHelmRepositoryOutput"], () => require("./getHelmRepository"));

export { GetJobArgs, GetJobResult, GetJobOutputArgs } from "./getJob";
export const getJob: typeof import("./getJob").getJob = null as any;
export const getJobOutput: typeof import("./getJob").getJobOutput = null as any;
utilities.lazyLoad(exports, ["getJob","getJobOutput"], () => require("./getJob"));

export { GetOrganizationArgs, GetOrganizationResult, GetOrganizationOutputArgs } from "./getOrganization";
export const getOrganization: typeof import("./getOrganization").getOrganization = null as any;
export const getOrganizationOutput: typeof import("./getOrganization").getOrganizationOutput = null as any;
utilities.lazyLoad(exports, ["getOrganization","getOrganizationOutput"], () => require("./getOrganization"));

export { GetProjectArgs, GetProjectResult, GetProjectOutputArgs } from "./getProject";
export const getProject: typeof import("./getProject").getProject = null as any;
export const getProjectOutput: typeof import("./getProject").getProjectOutput = null as any;
utilities.lazyLoad(exports, ["getProject","getProjectOutput"], () => require("./getProject"));

export { GetScalewayCredentialsArgs, GetScalewayCredentialsResult, GetScalewayCredentialsOutputArgs } from "./getScalewayCredentials";
export const getScalewayCredentials: typeof import("./getScalewayCredentials").getScalewayCredentials = null as any;
export const getScalewayCredentialsOutput: typeof import("./getScalewayCredentials").getScalewayCredentialsOutput = null as any;
utilities.lazyLoad(exports, ["getScalewayCredentials","getScalewayCredentialsOutput"], () => require("./getScalewayCredentials"));

export { GitTokenArgs, GitTokenState } from "./gitToken";
export type GitToken = import("./gitToken").GitToken;
export const GitToken: typeof import("./gitToken").GitToken = null as any;
utilities.lazyLoad(exports, ["GitToken"], () => require("./gitToken"));

export { HelmArgs, HelmState } from "./helm";
export type Helm = import("./helm").Helm;
export const Helm: typeof import("./helm").Helm = null as any;
utilities.lazyLoad(exports, ["Helm"], () => require("./helm"));

export { HelmRepositoryArgs, HelmRepositoryState } from "./helmRepository";
export type HelmRepository = import("./helmRepository").HelmRepository;
export const HelmRepository: typeof import("./helmRepository").HelmRepository = null as any;
utilities.lazyLoad(exports, ["HelmRepository"], () => require("./helmRepository"));

export { JobArgs, JobState } from "./job";
export type Job = import("./job").Job;
export const Job: typeof import("./job").Job = null as any;
utilities.lazyLoad(exports, ["Job"], () => require("./job"));

export { OrganizationArgs, OrganizationState } from "./organization";
export type Organization = import("./organization").Organization;
export const Organization: typeof import("./organization").Organization = null as any;
utilities.lazyLoad(exports, ["Organization"], () => require("./organization"));

export { ProjectArgs, ProjectState } from "./project";
export type Project = import("./project").Project;
export const Project: typeof import("./project").Project = null as any;
utilities.lazyLoad(exports, ["Project"], () => require("./project"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { ScalewayCredentialsArgs, ScalewayCredentialsState } from "./scalewayCredentials";
export type ScalewayCredentials = import("./scalewayCredentials").ScalewayCredentials;
export const ScalewayCredentials: typeof import("./scalewayCredentials").ScalewayCredentials = null as any;
utilities.lazyLoad(exports, ["ScalewayCredentials"], () => require("./scalewayCredentials"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "qovery:index/application:Application":
                return new Application(name, <any>undefined, { urn })
            case "qovery:index/awsCredentials:AwsCredentials":
                return new AwsCredentials(name, <any>undefined, { urn })
            case "qovery:index/cluster:Cluster":
                return new Cluster(name, <any>undefined, { urn })
            case "qovery:index/container:Container":
                return new Container(name, <any>undefined, { urn })
            case "qovery:index/containerRegistry:ContainerRegistry":
                return new ContainerRegistry(name, <any>undefined, { urn })
            case "qovery:index/database:Database":
                return new Database(name, <any>undefined, { urn })
            case "qovery:index/deployment:Deployment":
                return new Deployment(name, <any>undefined, { urn })
            case "qovery:index/deploymentStage:DeploymentStage":
                return new DeploymentStage(name, <any>undefined, { urn })
            case "qovery:index/environment:Environment":
                return new Environment(name, <any>undefined, { urn })
            case "qovery:index/gitToken:GitToken":
                return new GitToken(name, <any>undefined, { urn })
            case "qovery:index/helm:Helm":
                return new Helm(name, <any>undefined, { urn })
            case "qovery:index/helmRepository:HelmRepository":
                return new HelmRepository(name, <any>undefined, { urn })
            case "qovery:index/job:Job":
                return new Job(name, <any>undefined, { urn })
            case "qovery:index/organization:Organization":
                return new Organization(name, <any>undefined, { urn })
            case "qovery:index/project:Project":
                return new Project(name, <any>undefined, { urn })
            case "qovery:index/scalewayCredentials:ScalewayCredentials":
                return new ScalewayCredentials(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("qovery", "index/application", _module)
pulumi.runtime.registerResourceModule("qovery", "index/awsCredentials", _module)
pulumi.runtime.registerResourceModule("qovery", "index/cluster", _module)
pulumi.runtime.registerResourceModule("qovery", "index/container", _module)
pulumi.runtime.registerResourceModule("qovery", "index/containerRegistry", _module)
pulumi.runtime.registerResourceModule("qovery", "index/database", _module)
pulumi.runtime.registerResourceModule("qovery", "index/deployment", _module)
pulumi.runtime.registerResourceModule("qovery", "index/deploymentStage", _module)
pulumi.runtime.registerResourceModule("qovery", "index/environment", _module)
pulumi.runtime.registerResourceModule("qovery", "index/gitToken", _module)
pulumi.runtime.registerResourceModule("qovery", "index/helm", _module)
pulumi.runtime.registerResourceModule("qovery", "index/helmRepository", _module)
pulumi.runtime.registerResourceModule("qovery", "index/job", _module)
pulumi.runtime.registerResourceModule("qovery", "index/organization", _module)
pulumi.runtime.registerResourceModule("qovery", "index/project", _module)
pulumi.runtime.registerResourceModule("qovery", "index/scalewayCredentials", _module)
pulumi.runtime.registerResourcePackage("qovery", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:qovery") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
