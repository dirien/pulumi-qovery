// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## # qovery.Project (Resource)
 *
 * Provides a Qovery project resource. This can be used to create and manage Qovery projects.
 *
 * ## Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as qovery from "@ediri/qovery";
 *
 * const myProject = new qovery.Project("myProject", {
 *     organizationId: qovery_organization.my_organization.id,
 *     description: "My project description",
 *     environmentVariables: [{
 *         key: "ENV_VAR_KEY",
 *         value: "ENV_VAR_VALUE",
 *     }],
 *     environmentVariableAliases: [{
 *         key: "ENV_VAR_KEY_ALIAS",
 *         value: "ENV_VAR_KEY",
 *     }],
 *     secrets: [{
 *         key: "SECRET_KEY",
 *         value: "SECRET_VALUE",
 *     }],
 *     secretAliases: [{
 *         key: "SECRET_KEY_ALIAS",
 *         value: "SECRET_KEY",
 *     }],
 * }, {
 *     dependsOn: [qovery_organization.my_organization],
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import qovery:index/project:Project my_project "<project_id>"
 * ```
 */
export class Project extends pulumi.CustomResource {
    /**
     * Get an existing Project resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProjectState, opts?: pulumi.CustomResourceOptions): Project {
        return new Project(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'qovery:index/project:Project';

    /**
     * Returns true if the given object is an instance of Project.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Project {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Project.__pulumiType;
    }

    /**
     * List of built-in environment variables linked to this project.
     */
    public /*out*/ readonly builtInEnvironmentVariables!: pulumi.Output<outputs.ProjectBuiltInEnvironmentVariable[]>;
    /**
     * Description of the project.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * List of environment variable aliases linked to this project.
     */
    public readonly environmentVariableAliases!: pulumi.Output<outputs.ProjectEnvironmentVariableAlias[] | undefined>;
    /**
     * List of environment variables linked to this project.
     */
    public readonly environmentVariables!: pulumi.Output<outputs.ProjectEnvironmentVariable[] | undefined>;
    /**
     * Name of the project.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Id of the organization.
     */
    public readonly organizationId!: pulumi.Output<string>;
    /**
     * List of secret aliases linked to this project.
     */
    public readonly secretAliases!: pulumi.Output<outputs.ProjectSecretAlias[] | undefined>;
    /**
     * List of secrets linked to this project.
     */
    public readonly secrets!: pulumi.Output<outputs.ProjectSecret[] | undefined>;

    /**
     * Create a Project resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProjectArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProjectArgs | ProjectState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProjectState | undefined;
            resourceInputs["builtInEnvironmentVariables"] = state ? state.builtInEnvironmentVariables : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["environmentVariableAliases"] = state ? state.environmentVariableAliases : undefined;
            resourceInputs["environmentVariables"] = state ? state.environmentVariables : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["organizationId"] = state ? state.organizationId : undefined;
            resourceInputs["secretAliases"] = state ? state.secretAliases : undefined;
            resourceInputs["secrets"] = state ? state.secrets : undefined;
        } else {
            const args = argsOrState as ProjectArgs | undefined;
            if ((!args || args.organizationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'organizationId'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["environmentVariableAliases"] = args ? args.environmentVariableAliases : undefined;
            resourceInputs["environmentVariables"] = args ? args.environmentVariables : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["organizationId"] = args ? args.organizationId : undefined;
            resourceInputs["secretAliases"] = args ? args.secretAliases : undefined;
            resourceInputs["secrets"] = args ? args.secrets : undefined;
            resourceInputs["builtInEnvironmentVariables"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Project.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Project resources.
 */
export interface ProjectState {
    /**
     * List of built-in environment variables linked to this project.
     */
    builtInEnvironmentVariables?: pulumi.Input<pulumi.Input<inputs.ProjectBuiltInEnvironmentVariable>[]>;
    /**
     * Description of the project.
     */
    description?: pulumi.Input<string>;
    /**
     * List of environment variable aliases linked to this project.
     */
    environmentVariableAliases?: pulumi.Input<pulumi.Input<inputs.ProjectEnvironmentVariableAlias>[]>;
    /**
     * List of environment variables linked to this project.
     */
    environmentVariables?: pulumi.Input<pulumi.Input<inputs.ProjectEnvironmentVariable>[]>;
    /**
     * Name of the project.
     */
    name?: pulumi.Input<string>;
    /**
     * Id of the organization.
     */
    organizationId?: pulumi.Input<string>;
    /**
     * List of secret aliases linked to this project.
     */
    secretAliases?: pulumi.Input<pulumi.Input<inputs.ProjectSecretAlias>[]>;
    /**
     * List of secrets linked to this project.
     */
    secrets?: pulumi.Input<pulumi.Input<inputs.ProjectSecret>[]>;
}

/**
 * The set of arguments for constructing a Project resource.
 */
export interface ProjectArgs {
    /**
     * Description of the project.
     */
    description?: pulumi.Input<string>;
    /**
     * List of environment variable aliases linked to this project.
     */
    environmentVariableAliases?: pulumi.Input<pulumi.Input<inputs.ProjectEnvironmentVariableAlias>[]>;
    /**
     * List of environment variables linked to this project.
     */
    environmentVariables?: pulumi.Input<pulumi.Input<inputs.ProjectEnvironmentVariable>[]>;
    /**
     * Name of the project.
     */
    name?: pulumi.Input<string>;
    /**
     * Id of the organization.
     */
    organizationId: pulumi.Input<string>;
    /**
     * List of secret aliases linked to this project.
     */
    secretAliases?: pulumi.Input<pulumi.Input<inputs.ProjectSecretAlias>[]>;
    /**
     * List of secrets linked to this project.
     */
    secrets?: pulumi.Input<pulumi.Input<inputs.ProjectSecret>[]>;
}
