// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## # qovery.HelmRepository (Resource)
 *
 * Provides a Qovery helm repository resource. This can be used to create and manage Qovery helm repository.
 *
 * ## Import
 *
 * ```sh
 *  $ pulumi import qovery:index/helmRepository:HelmRepository my_helm_repository "<organization_id>,<helm_repository_id>"
 * ```
 */
export class HelmRepository extends pulumi.CustomResource {
    /**
     * Get an existing HelmRepository resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HelmRepositoryState, opts?: pulumi.CustomResourceOptions): HelmRepository {
        return new HelmRepository(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'qovery:index/helmRepository:HelmRepository';

    /**
     * Returns true if the given object is an instance of HelmRepository.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is HelmRepository {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === HelmRepository.__pulumiType;
    }

    /**
     * Configuration needed to authenticate the helm repository.
     */
    public readonly config!: pulumi.Output<outputs.HelmRepositoryConfig | undefined>;
    /**
     * Description of the helm repository.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Kind of the helm repository. - Can be: `HTTPS`, `OCI_DOCKER_HUB`, `OCI_DOCR`, `OCI_ECR`, `OCI_GENERIC_CR`,
     * `OCI_GITHUB_CR`, `OCI_GITLAB_CR`, `OCI_PUBLIC_ECR`, `OCI_SCALEWAY_CR`.
     */
    public readonly kind!: pulumi.Output<string>;
    /**
     * Name of the helm repository.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Id of the organization.
     */
    public readonly organizationId!: pulumi.Output<string>;
    /**
     * Bypass tls certificate verification when connecting to repository
     */
    public readonly skipTlsVerification!: pulumi.Output<boolean>;
    /**
     * URL of the helm repository.
     */
    public readonly url!: pulumi.Output<string>;

    /**
     * Create a HelmRepository resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: HelmRepositoryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HelmRepositoryArgs | HelmRepositoryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HelmRepositoryState | undefined;
            resourceInputs["config"] = state ? state.config : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["kind"] = state ? state.kind : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["organizationId"] = state ? state.organizationId : undefined;
            resourceInputs["skipTlsVerification"] = state ? state.skipTlsVerification : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
        } else {
            const args = argsOrState as HelmRepositoryArgs | undefined;
            if ((!args || args.kind === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kind'");
            }
            if ((!args || args.organizationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'organizationId'");
            }
            if ((!args || args.skipTlsVerification === undefined) && !opts.urn) {
                throw new Error("Missing required property 'skipTlsVerification'");
            }
            if ((!args || args.url === undefined) && !opts.urn) {
                throw new Error("Missing required property 'url'");
            }
            resourceInputs["config"] = args ? args.config : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["kind"] = args ? args.kind : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["organizationId"] = args ? args.organizationId : undefined;
            resourceInputs["skipTlsVerification"] = args ? args.skipTlsVerification : undefined;
            resourceInputs["url"] = args ? args.url : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(HelmRepository.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering HelmRepository resources.
 */
export interface HelmRepositoryState {
    /**
     * Configuration needed to authenticate the helm repository.
     */
    config?: pulumi.Input<inputs.HelmRepositoryConfig>;
    /**
     * Description of the helm repository.
     */
    description?: pulumi.Input<string>;
    /**
     * Kind of the helm repository. - Can be: `HTTPS`, `OCI_DOCKER_HUB`, `OCI_DOCR`, `OCI_ECR`, `OCI_GENERIC_CR`,
     * `OCI_GITHUB_CR`, `OCI_GITLAB_CR`, `OCI_PUBLIC_ECR`, `OCI_SCALEWAY_CR`.
     */
    kind?: pulumi.Input<string>;
    /**
     * Name of the helm repository.
     */
    name?: pulumi.Input<string>;
    /**
     * Id of the organization.
     */
    organizationId?: pulumi.Input<string>;
    /**
     * Bypass tls certificate verification when connecting to repository
     */
    skipTlsVerification?: pulumi.Input<boolean>;
    /**
     * URL of the helm repository.
     */
    url?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a HelmRepository resource.
 */
export interface HelmRepositoryArgs {
    /**
     * Configuration needed to authenticate the helm repository.
     */
    config?: pulumi.Input<inputs.HelmRepositoryConfig>;
    /**
     * Description of the helm repository.
     */
    description?: pulumi.Input<string>;
    /**
     * Kind of the helm repository. - Can be: `HTTPS`, `OCI_DOCKER_HUB`, `OCI_DOCR`, `OCI_ECR`, `OCI_GENERIC_CR`,
     * `OCI_GITHUB_CR`, `OCI_GITLAB_CR`, `OCI_PUBLIC_ECR`, `OCI_SCALEWAY_CR`.
     */
    kind: pulumi.Input<string>;
    /**
     * Name of the helm repository.
     */
    name?: pulumi.Input<string>;
    /**
     * Id of the organization.
     */
    organizationId: pulumi.Input<string>;
    /**
     * Bypass tls certificate verification when connecting to repository
     */
    skipTlsVerification: pulumi.Input<boolean>;
    /**
     * URL of the helm repository.
     */
    url: pulumi.Input<string>;
}
