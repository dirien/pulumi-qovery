// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace ediri.Qovery
{
    /// <summary>
    /// ## # qovery.ContainerRegistry (Resource)
    /// 
    /// Provides a Qovery container registry resource. This can be used to create and manage Qovery container registry.
    /// 
    /// ## Example
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Qovery = ediri.Qovery;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var myContainerRegistry = new Qovery.ContainerRegistry("myContainerRegistry", new()
    ///     {
    ///         OrganizationId = qovery_organization.My_organization.Id,
    ///         Kind = "DOCKER_HUB",
    ///         Url = "https://docker.io",
    ///         Config = new Qovery.Inputs.ContainerRegistryConfigArgs
    ///         {
    ///             Username = "&lt;my_username&gt;",
    ///             Password = "&lt;my_password&gt;",
    ///         },
    ///         Description = "My Docker Hub Registry",
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn = new[]
    ///         {
    ///             qovery_organization.My_organization,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    ///  $ pulumi import qovery:index/containerRegistry:ContainerRegistry my_container_registry "&lt;organization_id&gt;,&lt;container_registry_id&gt;"
    /// ```
    /// </summary>
    [QoveryResourceType("qovery:index/containerRegistry:ContainerRegistry")]
    public partial class ContainerRegistry : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Configuration needed to authenticate the container registry.
        /// </summary>
        [Output("config")]
        public Output<Outputs.ContainerRegistryConfig?> Config { get; private set; } = null!;

        /// <summary>
        /// Description of the container registry.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// Kind of the container registry. - Can be: `DOCKER_HUB`, `DOCR`, `ECR`, `GENERIC_CR`, `GITHUB_CR`, `GITLAB_CR`,
        /// `PUBLIC_ECR`, `SCALEWAY_CR`.
        /// </summary>
        [Output("kind")]
        public Output<string> Kind { get; private set; } = null!;

        /// <summary>
        /// Name of the container registry.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Id of the organization.
        /// </summary>
        [Output("organizationId")]
        public Output<string> OrganizationId { get; private set; } = null!;

        /// <summary>
        /// URL of the container registry.
        /// </summary>
        [Output("url")]
        public Output<string> Url { get; private set; } = null!;


        /// <summary>
        /// Create a ContainerRegistry resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ContainerRegistry(string name, ContainerRegistryArgs args, CustomResourceOptions? options = null)
            : base("qovery:index/containerRegistry:ContainerRegistry", name, args ?? new ContainerRegistryArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ContainerRegistry(string name, Input<string> id, ContainerRegistryState? state = null, CustomResourceOptions? options = null)
            : base("qovery:index/containerRegistry:ContainerRegistry", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/dirien/pulumi-qovery",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ContainerRegistry resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ContainerRegistry Get(string name, Input<string> id, ContainerRegistryState? state = null, CustomResourceOptions? options = null)
        {
            return new ContainerRegistry(name, id, state, options);
        }
    }

    public sealed class ContainerRegistryArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Configuration needed to authenticate the container registry.
        /// </summary>
        [Input("config")]
        public Input<Inputs.ContainerRegistryConfigArgs>? Config { get; set; }

        /// <summary>
        /// Description of the container registry.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Kind of the container registry. - Can be: `DOCKER_HUB`, `DOCR`, `ECR`, `GENERIC_CR`, `GITHUB_CR`, `GITLAB_CR`,
        /// `PUBLIC_ECR`, `SCALEWAY_CR`.
        /// </summary>
        [Input("kind", required: true)]
        public Input<string> Kind { get; set; } = null!;

        /// <summary>
        /// Name of the container registry.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Id of the organization.
        /// </summary>
        [Input("organizationId", required: true)]
        public Input<string> OrganizationId { get; set; } = null!;

        /// <summary>
        /// URL of the container registry.
        /// </summary>
        [Input("url", required: true)]
        public Input<string> Url { get; set; } = null!;

        public ContainerRegistryArgs()
        {
        }
        public static new ContainerRegistryArgs Empty => new ContainerRegistryArgs();
    }

    public sealed class ContainerRegistryState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Configuration needed to authenticate the container registry.
        /// </summary>
        [Input("config")]
        public Input<Inputs.ContainerRegistryConfigGetArgs>? Config { get; set; }

        /// <summary>
        /// Description of the container registry.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Kind of the container registry. - Can be: `DOCKER_HUB`, `DOCR`, `ECR`, `GENERIC_CR`, `GITHUB_CR`, `GITLAB_CR`,
        /// `PUBLIC_ECR`, `SCALEWAY_CR`.
        /// </summary>
        [Input("kind")]
        public Input<string>? Kind { get; set; }

        /// <summary>
        /// Name of the container registry.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Id of the organization.
        /// </summary>
        [Input("organizationId")]
        public Input<string>? OrganizationId { get; set; }

        /// <summary>
        /// URL of the container registry.
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        public ContainerRegistryState()
        {
        }
        public static new ContainerRegistryState Empty => new ContainerRegistryState();
    }
}
