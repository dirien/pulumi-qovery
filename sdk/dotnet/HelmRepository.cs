// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace ediri.Qovery
{
    /// <summary>
    /// ## # qovery.HelmRepository (Resource)
    /// 
    /// Provides a Qovery helm repository resource. This can be used to create and manage Qovery helm repository.
    /// 
    /// ## Import
    /// 
    /// ```sh
    ///  $ pulumi import qovery:index/helmRepository:HelmRepository my_helm_repository "&lt;organization_id&gt;,&lt;helm_repository_id&gt;"
    /// ```
    /// </summary>
    [QoveryResourceType("qovery:index/helmRepository:HelmRepository")]
    public partial class HelmRepository : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Configuration needed to authenticate the helm repository.
        /// </summary>
        [Output("config")]
        public Output<Outputs.HelmRepositoryConfig?> Config { get; private set; } = null!;

        /// <summary>
        /// Description of the helm repository.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// Kind of the helm repository. - Can be: `HTTPS`, `OCI_DOCKER_HUB`, `OCI_DOCR`, `OCI_ECR`, `OCI_GENERIC_CR`,
        /// `OCI_GITHUB_CR`, `OCI_GITLAB_CR`, `OCI_PUBLIC_ECR`, `OCI_SCALEWAY_CR`.
        /// </summary>
        [Output("kind")]
        public Output<string> Kind { get; private set; } = null!;

        /// <summary>
        /// Name of the helm repository.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Id of the organization.
        /// </summary>
        [Output("organizationId")]
        public Output<string> OrganizationId { get; private set; } = null!;

        /// <summary>
        /// Bypass tls certificate verification when connecting to repository
        /// </summary>
        [Output("skipTlsVerification")]
        public Output<bool> SkipTlsVerification { get; private set; } = null!;

        /// <summary>
        /// URL of the helm repository.
        /// </summary>
        [Output("url")]
        public Output<string> Url { get; private set; } = null!;


        /// <summary>
        /// Create a HelmRepository resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public HelmRepository(string name, HelmRepositoryArgs args, CustomResourceOptions? options = null)
            : base("qovery:index/helmRepository:HelmRepository", name, args ?? new HelmRepositoryArgs(), MakeResourceOptions(options, ""))
        {
        }

        private HelmRepository(string name, Input<string> id, HelmRepositoryState? state = null, CustomResourceOptions? options = null)
            : base("qovery:index/helmRepository:HelmRepository", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/dirien/pulumi-qovery",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing HelmRepository resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static HelmRepository Get(string name, Input<string> id, HelmRepositoryState? state = null, CustomResourceOptions? options = null)
        {
            return new HelmRepository(name, id, state, options);
        }
    }

    public sealed class HelmRepositoryArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Configuration needed to authenticate the helm repository.
        /// </summary>
        [Input("config")]
        public Input<Inputs.HelmRepositoryConfigArgs>? Config { get; set; }

        /// <summary>
        /// Description of the helm repository.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Kind of the helm repository. - Can be: `HTTPS`, `OCI_DOCKER_HUB`, `OCI_DOCR`, `OCI_ECR`, `OCI_GENERIC_CR`,
        /// `OCI_GITHUB_CR`, `OCI_GITLAB_CR`, `OCI_PUBLIC_ECR`, `OCI_SCALEWAY_CR`.
        /// </summary>
        [Input("kind", required: true)]
        public Input<string> Kind { get; set; } = null!;

        /// <summary>
        /// Name of the helm repository.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Id of the organization.
        /// </summary>
        [Input("organizationId", required: true)]
        public Input<string> OrganizationId { get; set; } = null!;

        /// <summary>
        /// Bypass tls certificate verification when connecting to repository
        /// </summary>
        [Input("skipTlsVerification", required: true)]
        public Input<bool> SkipTlsVerification { get; set; } = null!;

        /// <summary>
        /// URL of the helm repository.
        /// </summary>
        [Input("url", required: true)]
        public Input<string> Url { get; set; } = null!;

        public HelmRepositoryArgs()
        {
        }
        public static new HelmRepositoryArgs Empty => new HelmRepositoryArgs();
    }

    public sealed class HelmRepositoryState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Configuration needed to authenticate the helm repository.
        /// </summary>
        [Input("config")]
        public Input<Inputs.HelmRepositoryConfigGetArgs>? Config { get; set; }

        /// <summary>
        /// Description of the helm repository.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Kind of the helm repository. - Can be: `HTTPS`, `OCI_DOCKER_HUB`, `OCI_DOCR`, `OCI_ECR`, `OCI_GENERIC_CR`,
        /// `OCI_GITHUB_CR`, `OCI_GITLAB_CR`, `OCI_PUBLIC_ECR`, `OCI_SCALEWAY_CR`.
        /// </summary>
        [Input("kind")]
        public Input<string>? Kind { get; set; }

        /// <summary>
        /// Name of the helm repository.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Id of the organization.
        /// </summary>
        [Input("organizationId")]
        public Input<string>? OrganizationId { get; set; }

        /// <summary>
        /// Bypass tls certificate verification when connecting to repository
        /// </summary>
        [Input("skipTlsVerification")]
        public Input<bool>? SkipTlsVerification { get; set; }

        /// <summary>
        /// URL of the helm repository.
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        public HelmRepositoryState()
        {
        }
        public static new HelmRepositoryState Empty => new HelmRepositoryState();
    }
}
