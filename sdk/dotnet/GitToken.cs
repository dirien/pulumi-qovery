// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace ediri.Qovery
{
    /// <summary>
    /// ## # qovery.GitToken (Resource)
    /// 
    /// Provides a Qovery git token resource. This can be used to create and manage Qovery git token.
    /// 
    /// ## Example
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Qovery = ediri.Qovery;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var myGitToken = new Qovery.GitToken("myGitToken", new()
    ///     {
    ///         OrganizationId = qovery_organization.My_organization.Id,
    ///         Type = "GITHUB",
    ///         Token = "my-git-provider-token",
    ///         Description = "Github token",
    ///         BitbucketWorkspace = "workspace-bitbucket",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    ///  $ pulumi import qovery:index/gitToken:GitToken my_git_token "&lt;organization_id&gt;,&lt;git_token_id&gt;"
    /// ```
    /// </summary>
    [QoveryResourceType("qovery:index/gitToken:GitToken")]
    public partial class GitToken : global::Pulumi.CustomResource
    {
        /// <summary>
        /// (Mandatory only for Bitbucket git token) Workspace where the token has permissions .
        /// </summary>
        [Output("bitbucketWorkspace")]
        public Output<string> BitbucketWorkspace { get; private set; } = null!;

        /// <summary>
        /// Description of the git token.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// Name of the git token.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Id of the organization.
        /// </summary>
        [Output("organizationId")]
        public Output<string> OrganizationId { get; private set; } = null!;

        /// <summary>
        /// Value of the git token.
        /// </summary>
        [Output("token")]
        public Output<string> Token { get; private set; } = null!;

        /// <summary>
        /// Type of the git token. - Can be: `BITBUCKET`, `GITHUB`, `GITLAB`.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a GitToken resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public GitToken(string name, GitTokenArgs args, CustomResourceOptions? options = null)
            : base("qovery:index/gitToken:GitToken", name, args ?? new GitTokenArgs(), MakeResourceOptions(options, ""))
        {
        }

        private GitToken(string name, Input<string> id, GitTokenState? state = null, CustomResourceOptions? options = null)
            : base("qovery:index/gitToken:GitToken", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/dirien/pulumi-qovery",
                AdditionalSecretOutputs =
                {
                    "token",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing GitToken resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static GitToken Get(string name, Input<string> id, GitTokenState? state = null, CustomResourceOptions? options = null)
        {
            return new GitToken(name, id, state, options);
        }
    }

    public sealed class GitTokenArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Mandatory only for Bitbucket git token) Workspace where the token has permissions .
        /// </summary>
        [Input("bitbucketWorkspace")]
        public Input<string>? BitbucketWorkspace { get; set; }

        /// <summary>
        /// Description of the git token.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Name of the git token.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Id of the organization.
        /// </summary>
        [Input("organizationId", required: true)]
        public Input<string> OrganizationId { get; set; } = null!;

        [Input("token", required: true)]
        private Input<string>? _token;

        /// <summary>
        /// Value of the git token.
        /// </summary>
        public Input<string>? Token
        {
            get => _token;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _token = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Type of the git token. - Can be: `BITBUCKET`, `GITHUB`, `GITLAB`.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public GitTokenArgs()
        {
        }
        public static new GitTokenArgs Empty => new GitTokenArgs();
    }

    public sealed class GitTokenState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Mandatory only for Bitbucket git token) Workspace where the token has permissions .
        /// </summary>
        [Input("bitbucketWorkspace")]
        public Input<string>? BitbucketWorkspace { get; set; }

        /// <summary>
        /// Description of the git token.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Name of the git token.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Id of the organization.
        /// </summary>
        [Input("organizationId")]
        public Input<string>? OrganizationId { get; set; }

        [Input("token")]
        private Input<string>? _token;

        /// <summary>
        /// Value of the git token.
        /// </summary>
        public Input<string>? Token
        {
            get => _token;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _token = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Type of the git token. - Can be: `BITBUCKET`, `GITHUB`, `GITLAB`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public GitTokenState()
        {
        }
        public static new GitTokenState Empty => new GitTokenState();
    }
}
