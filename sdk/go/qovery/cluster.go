// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package qovery

import (
	"context"
	"reflect"

	"errors"
	"github.com/dirien/pulumi-qovery/sdk/go/qovery/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # Cluster (Resource)
//
// Provides a Qovery cluster resource. This can be used to create and manage Qovery cluster.
//
// ## Import
//
// ```sh
// $ pulumi import qovery:index/cluster:Cluster my_cluster "<organization_id>,<cluster_id>"
// ```
type Cluster struct {
	pulumi.CustomResourceState

	// Advanced settings of the cluster.
	AdvancedSettingsJson pulumi.StringOutput `pulumi:"advancedSettingsJson"`
	// Cloud provider of the cluster. - Can be: `AWS`, `GCP`, `ON_PREMISE`, `SCW`.
	CloudProvider pulumi.StringOutput `pulumi:"cloudProvider"`
	// Id of the credentials.
	CredentialsId pulumi.StringOutput `pulumi:"credentialsId"`
	// Description of the cluster. - Default: ``.
	Description pulumi.StringOutput `pulumi:"description"`
	DiskSize    pulumi.IntOutput    `pulumi:"diskSize"`
	// Features of the cluster.
	Features ClusterFeaturesOutput `pulumi:"features"`
	// Instance type of the cluster. I.e: For Aws `t3a.xlarge`, for Scaleway `DEV-L`, and not set for Karpenter-enabled
	// clusters
	InstanceType pulumi.StringOutput `pulumi:"instanceType"`
	// Kubernetes mode of the cluster. - Can be: `K3S`, `MANAGED`. - Default: `MANAGED`.
	KubernetesMode pulumi.StringOutput `pulumi:"kubernetesMode"`
	// Maximum number of nodes running for the cluster. [NOTE: have to be set to 1 in case of K3S clusters; and not set for
	// Karpenter-enabled clusters] - Must be: `>= 1`. - Default: `10`.
	MaxRunningNodes pulumi.IntOutput `pulumi:"maxRunningNodes"`
	// Minimum number of nodes running for the cluster. [NOTE: have to be set to 1 in case of K3S clusters, and not set for
	// Karpenter-enabled clusters]. - Must be: `>= 1`. - Default: `3`.
	MinRunningNodes pulumi.IntOutput `pulumi:"minRunningNodes"`
	// Name of the cluster.
	Name pulumi.StringOutput `pulumi:"name"`
	// Id of the organization.
	OrganizationId pulumi.StringOutput `pulumi:"organizationId"`
	// Region of the cluster.
	Region pulumi.StringOutput `pulumi:"region"`
	// List of routes of the cluster.
	RoutingTables ClusterRoutingTableArrayOutput `pulumi:"routingTables"`
	// State of the cluster. - Can be: `DEPLOYED`, `STOPPED`. - Default: `DEPLOYED`.
	State pulumi.StringOutput `pulumi:"state"`
}

// NewCluster registers a new resource with the given unique name, arguments, and options.
func NewCluster(ctx *pulumi.Context,
	name string, args *ClusterArgs, opts ...pulumi.ResourceOption) (*Cluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CloudProvider == nil {
		return nil, errors.New("invalid value for required argument 'CloudProvider'")
	}
	if args.CredentialsId == nil {
		return nil, errors.New("invalid value for required argument 'CredentialsId'")
	}
	if args.OrganizationId == nil {
		return nil, errors.New("invalid value for required argument 'OrganizationId'")
	}
	if args.Region == nil {
		return nil, errors.New("invalid value for required argument 'Region'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Cluster
	err := ctx.RegisterResource("qovery:index/cluster:Cluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCluster gets an existing Cluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterState, opts ...pulumi.ResourceOption) (*Cluster, error) {
	var resource Cluster
	err := ctx.ReadResource("qovery:index/cluster:Cluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Cluster resources.
type clusterState struct {
	// Advanced settings of the cluster.
	AdvancedSettingsJson *string `pulumi:"advancedSettingsJson"`
	// Cloud provider of the cluster. - Can be: `AWS`, `GCP`, `ON_PREMISE`, `SCW`.
	CloudProvider *string `pulumi:"cloudProvider"`
	// Id of the credentials.
	CredentialsId *string `pulumi:"credentialsId"`
	// Description of the cluster. - Default: ``.
	Description *string `pulumi:"description"`
	DiskSize    *int    `pulumi:"diskSize"`
	// Features of the cluster.
	Features *ClusterFeatures `pulumi:"features"`
	// Instance type of the cluster. I.e: For Aws `t3a.xlarge`, for Scaleway `DEV-L`, and not set for Karpenter-enabled
	// clusters
	InstanceType *string `pulumi:"instanceType"`
	// Kubernetes mode of the cluster. - Can be: `K3S`, `MANAGED`. - Default: `MANAGED`.
	KubernetesMode *string `pulumi:"kubernetesMode"`
	// Maximum number of nodes running for the cluster. [NOTE: have to be set to 1 in case of K3S clusters; and not set for
	// Karpenter-enabled clusters] - Must be: `>= 1`. - Default: `10`.
	MaxRunningNodes *int `pulumi:"maxRunningNodes"`
	// Minimum number of nodes running for the cluster. [NOTE: have to be set to 1 in case of K3S clusters, and not set for
	// Karpenter-enabled clusters]. - Must be: `>= 1`. - Default: `3`.
	MinRunningNodes *int `pulumi:"minRunningNodes"`
	// Name of the cluster.
	Name *string `pulumi:"name"`
	// Id of the organization.
	OrganizationId *string `pulumi:"organizationId"`
	// Region of the cluster.
	Region *string `pulumi:"region"`
	// List of routes of the cluster.
	RoutingTables []ClusterRoutingTable `pulumi:"routingTables"`
	// State of the cluster. - Can be: `DEPLOYED`, `STOPPED`. - Default: `DEPLOYED`.
	State *string `pulumi:"state"`
}

type ClusterState struct {
	// Advanced settings of the cluster.
	AdvancedSettingsJson pulumi.StringPtrInput
	// Cloud provider of the cluster. - Can be: `AWS`, `GCP`, `ON_PREMISE`, `SCW`.
	CloudProvider pulumi.StringPtrInput
	// Id of the credentials.
	CredentialsId pulumi.StringPtrInput
	// Description of the cluster. - Default: ``.
	Description pulumi.StringPtrInput
	DiskSize    pulumi.IntPtrInput
	// Features of the cluster.
	Features ClusterFeaturesPtrInput
	// Instance type of the cluster. I.e: For Aws `t3a.xlarge`, for Scaleway `DEV-L`, and not set for Karpenter-enabled
	// clusters
	InstanceType pulumi.StringPtrInput
	// Kubernetes mode of the cluster. - Can be: `K3S`, `MANAGED`. - Default: `MANAGED`.
	KubernetesMode pulumi.StringPtrInput
	// Maximum number of nodes running for the cluster. [NOTE: have to be set to 1 in case of K3S clusters; and not set for
	// Karpenter-enabled clusters] - Must be: `>= 1`. - Default: `10`.
	MaxRunningNodes pulumi.IntPtrInput
	// Minimum number of nodes running for the cluster. [NOTE: have to be set to 1 in case of K3S clusters, and not set for
	// Karpenter-enabled clusters]. - Must be: `>= 1`. - Default: `3`.
	MinRunningNodes pulumi.IntPtrInput
	// Name of the cluster.
	Name pulumi.StringPtrInput
	// Id of the organization.
	OrganizationId pulumi.StringPtrInput
	// Region of the cluster.
	Region pulumi.StringPtrInput
	// List of routes of the cluster.
	RoutingTables ClusterRoutingTableArrayInput
	// State of the cluster. - Can be: `DEPLOYED`, `STOPPED`. - Default: `DEPLOYED`.
	State pulumi.StringPtrInput
}

func (ClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterState)(nil)).Elem()
}

type clusterArgs struct {
	// Advanced settings of the cluster.
	AdvancedSettingsJson *string `pulumi:"advancedSettingsJson"`
	// Cloud provider of the cluster. - Can be: `AWS`, `GCP`, `ON_PREMISE`, `SCW`.
	CloudProvider string `pulumi:"cloudProvider"`
	// Id of the credentials.
	CredentialsId string `pulumi:"credentialsId"`
	// Description of the cluster. - Default: ``.
	Description *string `pulumi:"description"`
	DiskSize    *int    `pulumi:"diskSize"`
	// Features of the cluster.
	Features *ClusterFeatures `pulumi:"features"`
	// Instance type of the cluster. I.e: For Aws `t3a.xlarge`, for Scaleway `DEV-L`, and not set for Karpenter-enabled
	// clusters
	InstanceType *string `pulumi:"instanceType"`
	// Kubernetes mode of the cluster. - Can be: `K3S`, `MANAGED`. - Default: `MANAGED`.
	KubernetesMode *string `pulumi:"kubernetesMode"`
	// Maximum number of nodes running for the cluster. [NOTE: have to be set to 1 in case of K3S clusters; and not set for
	// Karpenter-enabled clusters] - Must be: `>= 1`. - Default: `10`.
	MaxRunningNodes *int `pulumi:"maxRunningNodes"`
	// Minimum number of nodes running for the cluster. [NOTE: have to be set to 1 in case of K3S clusters, and not set for
	// Karpenter-enabled clusters]. - Must be: `>= 1`. - Default: `3`.
	MinRunningNodes *int `pulumi:"minRunningNodes"`
	// Name of the cluster.
	Name *string `pulumi:"name"`
	// Id of the organization.
	OrganizationId string `pulumi:"organizationId"`
	// Region of the cluster.
	Region string `pulumi:"region"`
	// List of routes of the cluster.
	RoutingTables []ClusterRoutingTable `pulumi:"routingTables"`
	// State of the cluster. - Can be: `DEPLOYED`, `STOPPED`. - Default: `DEPLOYED`.
	State *string `pulumi:"state"`
}

// The set of arguments for constructing a Cluster resource.
type ClusterArgs struct {
	// Advanced settings of the cluster.
	AdvancedSettingsJson pulumi.StringPtrInput
	// Cloud provider of the cluster. - Can be: `AWS`, `GCP`, `ON_PREMISE`, `SCW`.
	CloudProvider pulumi.StringInput
	// Id of the credentials.
	CredentialsId pulumi.StringInput
	// Description of the cluster. - Default: ``.
	Description pulumi.StringPtrInput
	DiskSize    pulumi.IntPtrInput
	// Features of the cluster.
	Features ClusterFeaturesPtrInput
	// Instance type of the cluster. I.e: For Aws `t3a.xlarge`, for Scaleway `DEV-L`, and not set for Karpenter-enabled
	// clusters
	InstanceType pulumi.StringPtrInput
	// Kubernetes mode of the cluster. - Can be: `K3S`, `MANAGED`. - Default: `MANAGED`.
	KubernetesMode pulumi.StringPtrInput
	// Maximum number of nodes running for the cluster. [NOTE: have to be set to 1 in case of K3S clusters; and not set for
	// Karpenter-enabled clusters] - Must be: `>= 1`. - Default: `10`.
	MaxRunningNodes pulumi.IntPtrInput
	// Minimum number of nodes running for the cluster. [NOTE: have to be set to 1 in case of K3S clusters, and not set for
	// Karpenter-enabled clusters]. - Must be: `>= 1`. - Default: `3`.
	MinRunningNodes pulumi.IntPtrInput
	// Name of the cluster.
	Name pulumi.StringPtrInput
	// Id of the organization.
	OrganizationId pulumi.StringInput
	// Region of the cluster.
	Region pulumi.StringInput
	// List of routes of the cluster.
	RoutingTables ClusterRoutingTableArrayInput
	// State of the cluster. - Can be: `DEPLOYED`, `STOPPED`. - Default: `DEPLOYED`.
	State pulumi.StringPtrInput
}

func (ClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterArgs)(nil)).Elem()
}

type ClusterInput interface {
	pulumi.Input

	ToClusterOutput() ClusterOutput
	ToClusterOutputWithContext(ctx context.Context) ClusterOutput
}

func (*Cluster) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (i *Cluster) ToClusterOutput() ClusterOutput {
	return i.ToClusterOutputWithContext(context.Background())
}

func (i *Cluster) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterOutput)
}

// ClusterArrayInput is an input type that accepts ClusterArray and ClusterArrayOutput values.
// You can construct a concrete instance of `ClusterArrayInput` via:
//
//	ClusterArray{ ClusterArgs{...} }
type ClusterArrayInput interface {
	pulumi.Input

	ToClusterArrayOutput() ClusterArrayOutput
	ToClusterArrayOutputWithContext(context.Context) ClusterArrayOutput
}

type ClusterArray []ClusterInput

func (ClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cluster)(nil)).Elem()
}

func (i ClusterArray) ToClusterArrayOutput() ClusterArrayOutput {
	return i.ToClusterArrayOutputWithContext(context.Background())
}

func (i ClusterArray) ToClusterArrayOutputWithContext(ctx context.Context) ClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterArrayOutput)
}

// ClusterMapInput is an input type that accepts ClusterMap and ClusterMapOutput values.
// You can construct a concrete instance of `ClusterMapInput` via:
//
//	ClusterMap{ "key": ClusterArgs{...} }
type ClusterMapInput interface {
	pulumi.Input

	ToClusterMapOutput() ClusterMapOutput
	ToClusterMapOutputWithContext(context.Context) ClusterMapOutput
}

type ClusterMap map[string]ClusterInput

func (ClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cluster)(nil)).Elem()
}

func (i ClusterMap) ToClusterMapOutput() ClusterMapOutput {
	return i.ToClusterMapOutputWithContext(context.Background())
}

func (i ClusterMap) ToClusterMapOutputWithContext(ctx context.Context) ClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterMapOutput)
}

type ClusterOutput struct{ *pulumi.OutputState }

func (ClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (o ClusterOutput) ToClusterOutput() ClusterOutput {
	return o
}

func (o ClusterOutput) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return o
}

// Advanced settings of the cluster.
func (o ClusterOutput) AdvancedSettingsJson() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.AdvancedSettingsJson }).(pulumi.StringOutput)
}

// Cloud provider of the cluster. - Can be: `AWS`, `GCP`, `ON_PREMISE`, `SCW`.
func (o ClusterOutput) CloudProvider() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.CloudProvider }).(pulumi.StringOutput)
}

// Id of the credentials.
func (o ClusterOutput) CredentialsId() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.CredentialsId }).(pulumi.StringOutput)
}

// Description of the cluster. - Default: “.
func (o ClusterOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

func (o ClusterOutput) DiskSize() pulumi.IntOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntOutput { return v.DiskSize }).(pulumi.IntOutput)
}

// Features of the cluster.
func (o ClusterOutput) Features() ClusterFeaturesOutput {
	return o.ApplyT(func(v *Cluster) ClusterFeaturesOutput { return v.Features }).(ClusterFeaturesOutput)
}

// Instance type of the cluster. I.e: For Aws `t3a.xlarge`, for Scaleway `DEV-L`, and not set for Karpenter-enabled
// clusters
func (o ClusterOutput) InstanceType() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.InstanceType }).(pulumi.StringOutput)
}

// Kubernetes mode of the cluster. - Can be: `K3S`, `MANAGED`. - Default: `MANAGED`.
func (o ClusterOutput) KubernetesMode() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.KubernetesMode }).(pulumi.StringOutput)
}

// Maximum number of nodes running for the cluster. [NOTE: have to be set to 1 in case of K3S clusters; and not set for
// Karpenter-enabled clusters] - Must be: `>= 1`. - Default: `10`.
func (o ClusterOutput) MaxRunningNodes() pulumi.IntOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntOutput { return v.MaxRunningNodes }).(pulumi.IntOutput)
}

// Minimum number of nodes running for the cluster. [NOTE: have to be set to 1 in case of K3S clusters, and not set for
// Karpenter-enabled clusters]. - Must be: `>= 1`. - Default: `3`.
func (o ClusterOutput) MinRunningNodes() pulumi.IntOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntOutput { return v.MinRunningNodes }).(pulumi.IntOutput)
}

// Name of the cluster.
func (o ClusterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Id of the organization.
func (o ClusterOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

// Region of the cluster.
func (o ClusterOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// List of routes of the cluster.
func (o ClusterOutput) RoutingTables() ClusterRoutingTableArrayOutput {
	return o.ApplyT(func(v *Cluster) ClusterRoutingTableArrayOutput { return v.RoutingTables }).(ClusterRoutingTableArrayOutput)
}

// State of the cluster. - Can be: `DEPLOYED`, `STOPPED`. - Default: `DEPLOYED`.
func (o ClusterOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

type ClusterArrayOutput struct{ *pulumi.OutputState }

func (ClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cluster)(nil)).Elem()
}

func (o ClusterArrayOutput) ToClusterArrayOutput() ClusterArrayOutput {
	return o
}

func (o ClusterArrayOutput) ToClusterArrayOutputWithContext(ctx context.Context) ClusterArrayOutput {
	return o
}

func (o ClusterArrayOutput) Index(i pulumi.IntInput) ClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Cluster {
		return vs[0].([]*Cluster)[vs[1].(int)]
	}).(ClusterOutput)
}

type ClusterMapOutput struct{ *pulumi.OutputState }

func (ClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cluster)(nil)).Elem()
}

func (o ClusterMapOutput) ToClusterMapOutput() ClusterMapOutput {
	return o
}

func (o ClusterMapOutput) ToClusterMapOutputWithContext(ctx context.Context) ClusterMapOutput {
	return o
}

func (o ClusterMapOutput) MapIndex(k pulumi.StringInput) ClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Cluster {
		return vs[0].(map[string]*Cluster)[vs[1].(string)]
	}).(ClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterInput)(nil)).Elem(), &Cluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterArrayInput)(nil)).Elem(), ClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterMapInput)(nil)).Elem(), ClusterMap{})
	pulumi.RegisterOutputType(ClusterOutput{})
	pulumi.RegisterOutputType(ClusterArrayOutput{})
	pulumi.RegisterOutputType(ClusterMapOutput{})
}
