// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package qovery

import (
	"context"
	"reflect"

	"errors"
	"github.com/dirien/pulumi-qovery/sdk/go/qovery/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # Project (Resource)
//
// Provides a Qovery project resource. This can be used to create and manage Qovery projects.
//
// ## Example
//
// ```go
// package main
//
// import (
//
//	"github.com/dirien/pulumi-qovery/sdk/go/qovery"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := qovery.NewProject(ctx, "myProject", &qovery.ProjectArgs{
//				OrganizationId: pulumi.Any(qovery_organization.My_organization.Id),
//				Description:    pulumi.String("My project description"),
//				EnvironmentVariables: qovery.ProjectEnvironmentVariableArray{
//					&qovery.ProjectEnvironmentVariableArgs{
//						Key:   pulumi.String("ENV_VAR_KEY"),
//						Value: pulumi.String("ENV_VAR_VALUE"),
//					},
//				},
//				EnvironmentVariableAliases: qovery.ProjectEnvironmentVariableAliasArray{
//					&qovery.ProjectEnvironmentVariableAliasArgs{
//						Key:   pulumi.String("ENV_VAR_KEY_ALIAS"),
//						Value: pulumi.String("ENV_VAR_KEY"),
//					},
//				},
//				Secrets: qovery.ProjectSecretArray{
//					&qovery.ProjectSecretArgs{
//						Key:   pulumi.String("SECRET_KEY"),
//						Value: pulumi.String("SECRET_VALUE"),
//					},
//				},
//				SecretAliases: qovery.ProjectSecretAliasArray{
//					&qovery.ProjectSecretAliasArgs{
//						Key:   pulumi.String("SECRET_KEY_ALIAS"),
//						Value: pulumi.String("SECRET_KEY"),
//					},
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				qovery_organization.My_organization,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import qovery:index/project:Project my_project "<project_id>"
//
// ```
type Project struct {
	pulumi.CustomResourceState

	// List of built-in environment variables linked to this project.
	BuiltInEnvironmentVariables ProjectBuiltInEnvironmentVariableArrayOutput `pulumi:"builtInEnvironmentVariables"`
	// Description of the project.
	Description pulumi.StringOutput `pulumi:"description"`
	// List of environment variable aliases linked to this project.
	EnvironmentVariableAliases ProjectEnvironmentVariableAliasArrayOutput `pulumi:"environmentVariableAliases"`
	// List of environment variables linked to this project.
	EnvironmentVariables ProjectEnvironmentVariableArrayOutput `pulumi:"environmentVariables"`
	// Name of the project.
	Name pulumi.StringOutput `pulumi:"name"`
	// Id of the organization.
	OrganizationId pulumi.StringOutput `pulumi:"organizationId"`
	// List of secret aliases linked to this project.
	SecretAliases ProjectSecretAliasArrayOutput `pulumi:"secretAliases"`
	// List of secrets linked to this project.
	Secrets ProjectSecretArrayOutput `pulumi:"secrets"`
}

// NewProject registers a new resource with the given unique name, arguments, and options.
func NewProject(ctx *pulumi.Context,
	name string, args *ProjectArgs, opts ...pulumi.ResourceOption) (*Project, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OrganizationId == nil {
		return nil, errors.New("invalid value for required argument 'OrganizationId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Project
	err := ctx.RegisterResource("qovery:index/project:Project", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProject gets an existing Project resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProject(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectState, opts ...pulumi.ResourceOption) (*Project, error) {
	var resource Project
	err := ctx.ReadResource("qovery:index/project:Project", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Project resources.
type projectState struct {
	// List of built-in environment variables linked to this project.
	BuiltInEnvironmentVariables []ProjectBuiltInEnvironmentVariable `pulumi:"builtInEnvironmentVariables"`
	// Description of the project.
	Description *string `pulumi:"description"`
	// List of environment variable aliases linked to this project.
	EnvironmentVariableAliases []ProjectEnvironmentVariableAlias `pulumi:"environmentVariableAliases"`
	// List of environment variables linked to this project.
	EnvironmentVariables []ProjectEnvironmentVariable `pulumi:"environmentVariables"`
	// Name of the project.
	Name *string `pulumi:"name"`
	// Id of the organization.
	OrganizationId *string `pulumi:"organizationId"`
	// List of secret aliases linked to this project.
	SecretAliases []ProjectSecretAlias `pulumi:"secretAliases"`
	// List of secrets linked to this project.
	Secrets []ProjectSecret `pulumi:"secrets"`
}

type ProjectState struct {
	// List of built-in environment variables linked to this project.
	BuiltInEnvironmentVariables ProjectBuiltInEnvironmentVariableArrayInput
	// Description of the project.
	Description pulumi.StringPtrInput
	// List of environment variable aliases linked to this project.
	EnvironmentVariableAliases ProjectEnvironmentVariableAliasArrayInput
	// List of environment variables linked to this project.
	EnvironmentVariables ProjectEnvironmentVariableArrayInput
	// Name of the project.
	Name pulumi.StringPtrInput
	// Id of the organization.
	OrganizationId pulumi.StringPtrInput
	// List of secret aliases linked to this project.
	SecretAliases ProjectSecretAliasArrayInput
	// List of secrets linked to this project.
	Secrets ProjectSecretArrayInput
}

func (ProjectState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectState)(nil)).Elem()
}

type projectArgs struct {
	// Description of the project.
	Description *string `pulumi:"description"`
	// List of environment variable aliases linked to this project.
	EnvironmentVariableAliases []ProjectEnvironmentVariableAlias `pulumi:"environmentVariableAliases"`
	// List of environment variables linked to this project.
	EnvironmentVariables []ProjectEnvironmentVariable `pulumi:"environmentVariables"`
	// Name of the project.
	Name *string `pulumi:"name"`
	// Id of the organization.
	OrganizationId string `pulumi:"organizationId"`
	// List of secret aliases linked to this project.
	SecretAliases []ProjectSecretAlias `pulumi:"secretAliases"`
	// List of secrets linked to this project.
	Secrets []ProjectSecret `pulumi:"secrets"`
}

// The set of arguments for constructing a Project resource.
type ProjectArgs struct {
	// Description of the project.
	Description pulumi.StringPtrInput
	// List of environment variable aliases linked to this project.
	EnvironmentVariableAliases ProjectEnvironmentVariableAliasArrayInput
	// List of environment variables linked to this project.
	EnvironmentVariables ProjectEnvironmentVariableArrayInput
	// Name of the project.
	Name pulumi.StringPtrInput
	// Id of the organization.
	OrganizationId pulumi.StringInput
	// List of secret aliases linked to this project.
	SecretAliases ProjectSecretAliasArrayInput
	// List of secrets linked to this project.
	Secrets ProjectSecretArrayInput
}

func (ProjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectArgs)(nil)).Elem()
}

type ProjectInput interface {
	pulumi.Input

	ToProjectOutput() ProjectOutput
	ToProjectOutputWithContext(ctx context.Context) ProjectOutput
}

func (*Project) ElementType() reflect.Type {
	return reflect.TypeOf((**Project)(nil)).Elem()
}

func (i *Project) ToProjectOutput() ProjectOutput {
	return i.ToProjectOutputWithContext(context.Background())
}

func (i *Project) ToProjectOutputWithContext(ctx context.Context) ProjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectOutput)
}

// ProjectArrayInput is an input type that accepts ProjectArray and ProjectArrayOutput values.
// You can construct a concrete instance of `ProjectArrayInput` via:
//
//	ProjectArray{ ProjectArgs{...} }
type ProjectArrayInput interface {
	pulumi.Input

	ToProjectArrayOutput() ProjectArrayOutput
	ToProjectArrayOutputWithContext(context.Context) ProjectArrayOutput
}

type ProjectArray []ProjectInput

func (ProjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Project)(nil)).Elem()
}

func (i ProjectArray) ToProjectArrayOutput() ProjectArrayOutput {
	return i.ToProjectArrayOutputWithContext(context.Background())
}

func (i ProjectArray) ToProjectArrayOutputWithContext(ctx context.Context) ProjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectArrayOutput)
}

// ProjectMapInput is an input type that accepts ProjectMap and ProjectMapOutput values.
// You can construct a concrete instance of `ProjectMapInput` via:
//
//	ProjectMap{ "key": ProjectArgs{...} }
type ProjectMapInput interface {
	pulumi.Input

	ToProjectMapOutput() ProjectMapOutput
	ToProjectMapOutputWithContext(context.Context) ProjectMapOutput
}

type ProjectMap map[string]ProjectInput

func (ProjectMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Project)(nil)).Elem()
}

func (i ProjectMap) ToProjectMapOutput() ProjectMapOutput {
	return i.ToProjectMapOutputWithContext(context.Background())
}

func (i ProjectMap) ToProjectMapOutputWithContext(ctx context.Context) ProjectMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectMapOutput)
}

type ProjectOutput struct{ *pulumi.OutputState }

func (ProjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Project)(nil)).Elem()
}

func (o ProjectOutput) ToProjectOutput() ProjectOutput {
	return o
}

func (o ProjectOutput) ToProjectOutputWithContext(ctx context.Context) ProjectOutput {
	return o
}

// List of built-in environment variables linked to this project.
func (o ProjectOutput) BuiltInEnvironmentVariables() ProjectBuiltInEnvironmentVariableArrayOutput {
	return o.ApplyT(func(v *Project) ProjectBuiltInEnvironmentVariableArrayOutput { return v.BuiltInEnvironmentVariables }).(ProjectBuiltInEnvironmentVariableArrayOutput)
}

// Description of the project.
func (o ProjectOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// List of environment variable aliases linked to this project.
func (o ProjectOutput) EnvironmentVariableAliases() ProjectEnvironmentVariableAliasArrayOutput {
	return o.ApplyT(func(v *Project) ProjectEnvironmentVariableAliasArrayOutput { return v.EnvironmentVariableAliases }).(ProjectEnvironmentVariableAliasArrayOutput)
}

// List of environment variables linked to this project.
func (o ProjectOutput) EnvironmentVariables() ProjectEnvironmentVariableArrayOutput {
	return o.ApplyT(func(v *Project) ProjectEnvironmentVariableArrayOutput { return v.EnvironmentVariables }).(ProjectEnvironmentVariableArrayOutput)
}

// Name of the project.
func (o ProjectOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Id of the organization.
func (o ProjectOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

// List of secret aliases linked to this project.
func (o ProjectOutput) SecretAliases() ProjectSecretAliasArrayOutput {
	return o.ApplyT(func(v *Project) ProjectSecretAliasArrayOutput { return v.SecretAliases }).(ProjectSecretAliasArrayOutput)
}

// List of secrets linked to this project.
func (o ProjectOutput) Secrets() ProjectSecretArrayOutput {
	return o.ApplyT(func(v *Project) ProjectSecretArrayOutput { return v.Secrets }).(ProjectSecretArrayOutput)
}

type ProjectArrayOutput struct{ *pulumi.OutputState }

func (ProjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Project)(nil)).Elem()
}

func (o ProjectArrayOutput) ToProjectArrayOutput() ProjectArrayOutput {
	return o
}

func (o ProjectArrayOutput) ToProjectArrayOutputWithContext(ctx context.Context) ProjectArrayOutput {
	return o
}

func (o ProjectArrayOutput) Index(i pulumi.IntInput) ProjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Project {
		return vs[0].([]*Project)[vs[1].(int)]
	}).(ProjectOutput)
}

type ProjectMapOutput struct{ *pulumi.OutputState }

func (ProjectMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Project)(nil)).Elem()
}

func (o ProjectMapOutput) ToProjectMapOutput() ProjectMapOutput {
	return o
}

func (o ProjectMapOutput) ToProjectMapOutputWithContext(ctx context.Context) ProjectMapOutput {
	return o
}

func (o ProjectMapOutput) MapIndex(k pulumi.StringInput) ProjectOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Project {
		return vs[0].(map[string]*Project)[vs[1].(string)]
	}).(ProjectOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectInput)(nil)).Elem(), &Project{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectArrayInput)(nil)).Elem(), ProjectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectMapInput)(nil)).Elem(), ProjectMap{})
	pulumi.RegisterOutputType(ProjectOutput{})
	pulumi.RegisterOutputType(ProjectArrayOutput{})
	pulumi.RegisterOutputType(ProjectMapOutput{})
}
