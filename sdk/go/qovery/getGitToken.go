// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package qovery

import (
	"context"
	"reflect"

	"github.com/dirien/pulumi-qovery/sdk/go/qovery/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # GitToken (Data Source)
//
// Provides a Qovery git token resource. This can be used to create and manage Qovery git token.
func LookupGitToken(ctx *pulumi.Context, args *LookupGitTokenArgs, opts ...pulumi.InvokeOption) (*LookupGitTokenResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupGitTokenResult
	err := ctx.Invoke("qovery:index/getGitToken:getGitToken", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getGitToken.
type LookupGitTokenArgs struct {
	BitbucketWorkspace *string `pulumi:"bitbucketWorkspace"`
	Description        *string `pulumi:"description"`
	Id                 string  `pulumi:"id"`
}

// A collection of values returned by getGitToken.
type LookupGitTokenResult struct {
	BitbucketWorkspace string `pulumi:"bitbucketWorkspace"`
	Description        string `pulumi:"description"`
	Id                 string `pulumi:"id"`
	Name               string `pulumi:"name"`
	OrganizationId     string `pulumi:"organizationId"`
	Token              string `pulumi:"token"`
	Type               string `pulumi:"type"`
}

func LookupGitTokenOutput(ctx *pulumi.Context, args LookupGitTokenOutputArgs, opts ...pulumi.InvokeOption) LookupGitTokenResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupGitTokenResult, error) {
			args := v.(LookupGitTokenArgs)
			r, err := LookupGitToken(ctx, &args, opts...)
			var s LookupGitTokenResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupGitTokenResultOutput)
}

// A collection of arguments for invoking getGitToken.
type LookupGitTokenOutputArgs struct {
	BitbucketWorkspace pulumi.StringPtrInput `pulumi:"bitbucketWorkspace"`
	Description        pulumi.StringPtrInput `pulumi:"description"`
	Id                 pulumi.StringInput    `pulumi:"id"`
}

func (LookupGitTokenOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupGitTokenArgs)(nil)).Elem()
}

// A collection of values returned by getGitToken.
type LookupGitTokenResultOutput struct{ *pulumi.OutputState }

func (LookupGitTokenResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupGitTokenResult)(nil)).Elem()
}

func (o LookupGitTokenResultOutput) ToLookupGitTokenResultOutput() LookupGitTokenResultOutput {
	return o
}

func (o LookupGitTokenResultOutput) ToLookupGitTokenResultOutputWithContext(ctx context.Context) LookupGitTokenResultOutput {
	return o
}

func (o LookupGitTokenResultOutput) BitbucketWorkspace() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGitTokenResult) string { return v.BitbucketWorkspace }).(pulumi.StringOutput)
}

func (o LookupGitTokenResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGitTokenResult) string { return v.Description }).(pulumi.StringOutput)
}

func (o LookupGitTokenResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGitTokenResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupGitTokenResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGitTokenResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupGitTokenResultOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGitTokenResult) string { return v.OrganizationId }).(pulumi.StringOutput)
}

func (o LookupGitTokenResultOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGitTokenResult) string { return v.Token }).(pulumi.StringOutput)
}

func (o LookupGitTokenResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGitTokenResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupGitTokenResultOutput{})
}
