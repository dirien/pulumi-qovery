// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package qovery

import (
	"context"
	"reflect"

	"github.com/dirien/pulumi-qovery/sdk/go/qovery/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # HelmRepository (Data Source)
//
// Provides a Qovery helm repository resource. This can be used to create and manage Qovery helm repository.
func LookupHelmRepository(ctx *pulumi.Context, args *LookupHelmRepositoryArgs, opts ...pulumi.InvokeOption) (*LookupHelmRepositoryResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupHelmRepositoryResult
	err := ctx.Invoke("qovery:index/getHelmRepository:getHelmRepository", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getHelmRepository.
type LookupHelmRepositoryArgs struct {
	Description    *string `pulumi:"description"`
	Id             string  `pulumi:"id"`
	OrganizationId string  `pulumi:"organizationId"`
}

// A collection of values returned by getHelmRepository.
type LookupHelmRepositoryResult struct {
	Description    string `pulumi:"description"`
	Id             string `pulumi:"id"`
	Kind           string `pulumi:"kind"`
	Name           string `pulumi:"name"`
	OrganizationId string `pulumi:"organizationId"`
	Url            string `pulumi:"url"`
}

func LookupHelmRepositoryOutput(ctx *pulumi.Context, args LookupHelmRepositoryOutputArgs, opts ...pulumi.InvokeOption) LookupHelmRepositoryResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupHelmRepositoryResult, error) {
			args := v.(LookupHelmRepositoryArgs)
			r, err := LookupHelmRepository(ctx, &args, opts...)
			var s LookupHelmRepositoryResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupHelmRepositoryResultOutput)
}

// A collection of arguments for invoking getHelmRepository.
type LookupHelmRepositoryOutputArgs struct {
	Description    pulumi.StringPtrInput `pulumi:"description"`
	Id             pulumi.StringInput    `pulumi:"id"`
	OrganizationId pulumi.StringInput    `pulumi:"organizationId"`
}

func (LookupHelmRepositoryOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupHelmRepositoryArgs)(nil)).Elem()
}

// A collection of values returned by getHelmRepository.
type LookupHelmRepositoryResultOutput struct{ *pulumi.OutputState }

func (LookupHelmRepositoryResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupHelmRepositoryResult)(nil)).Elem()
}

func (o LookupHelmRepositoryResultOutput) ToLookupHelmRepositoryResultOutput() LookupHelmRepositoryResultOutput {
	return o
}

func (o LookupHelmRepositoryResultOutput) ToLookupHelmRepositoryResultOutputWithContext(ctx context.Context) LookupHelmRepositoryResultOutput {
	return o
}

func (o LookupHelmRepositoryResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupHelmRepositoryResult) string { return v.Description }).(pulumi.StringOutput)
}

func (o LookupHelmRepositoryResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupHelmRepositoryResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupHelmRepositoryResultOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v LookupHelmRepositoryResult) string { return v.Kind }).(pulumi.StringOutput)
}

func (o LookupHelmRepositoryResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupHelmRepositoryResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupHelmRepositoryResultOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupHelmRepositoryResult) string { return v.OrganizationId }).(pulumi.StringOutput)
}

func (o LookupHelmRepositoryResultOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v LookupHelmRepositoryResult) string { return v.Url }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupHelmRepositoryResultOutput{})
}
