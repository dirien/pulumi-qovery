// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package qovery

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/dirien/pulumi-qovery/sdk/go/qovery/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "qovery:index/annotationsGroup:AnnotationsGroup":
		r = &AnnotationsGroup{}
	case "qovery:index/application:Application":
		r = &Application{}
	case "qovery:index/awsCredentials:AwsCredentials":
		r = &AwsCredentials{}
	case "qovery:index/cluster:Cluster":
		r = &Cluster{}
	case "qovery:index/container:Container":
		r = &Container{}
	case "qovery:index/containerRegistry:ContainerRegistry":
		r = &ContainerRegistry{}
	case "qovery:index/database:Database":
		r = &Database{}
	case "qovery:index/deployment:Deployment":
		r = &Deployment{}
	case "qovery:index/deploymentStage:DeploymentStage":
		r = &DeploymentStage{}
	case "qovery:index/environment:Environment":
		r = &Environment{}
	case "qovery:index/gitToken:GitToken":
		r = &GitToken{}
	case "qovery:index/helm:Helm":
		r = &Helm{}
	case "qovery:index/helmRepository:HelmRepository":
		r = &HelmRepository{}
	case "qovery:index/job:Job":
		r = &Job{}
	case "qovery:index/labelsGroup:LabelsGroup":
		r = &LabelsGroup{}
	case "qovery:index/organization:Organization":
		r = &Organization{}
	case "qovery:index/project:Project":
		r = &Project{}
	case "qovery:index/scalewayCredentials:ScalewayCredentials":
		r = &ScalewayCredentials{}
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	err = ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return
}

type pkg struct {
	version semver.Version
}

func (p *pkg) Version() semver.Version {
	return p.version
}

func (p *pkg) ConstructProvider(ctx *pulumi.Context, name, typ, urn string) (pulumi.ProviderResource, error) {
	if typ != "pulumi:providers:qovery" {
		return nil, fmt.Errorf("unknown provider type: %s", typ)
	}

	r := &Provider{}
	err := ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return r, err
}

func init() {
	version, err := internal.PkgVersion()
	if err != nil {
		version = semver.Version{Major: 1}
	}
	pulumi.RegisterResourceModule(
		"qovery",
		"index/annotationsGroup",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"qovery",
		"index/application",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"qovery",
		"index/awsCredentials",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"qovery",
		"index/cluster",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"qovery",
		"index/container",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"qovery",
		"index/containerRegistry",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"qovery",
		"index/database",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"qovery",
		"index/deployment",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"qovery",
		"index/deploymentStage",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"qovery",
		"index/environment",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"qovery",
		"index/gitToken",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"qovery",
		"index/helm",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"qovery",
		"index/helmRepository",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"qovery",
		"index/job",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"qovery",
		"index/labelsGroup",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"qovery",
		"index/organization",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"qovery",
		"index/project",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"qovery",
		"index/scalewayCredentials",
		&module{version},
	)
	pulumi.RegisterResourcePackage(
		"qovery",
		&pkg{version},
	)
}
