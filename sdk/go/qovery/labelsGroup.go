// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package qovery

import (
	"context"
	"reflect"

	"errors"
	"github.com/dirien/pulumi-qovery/sdk/go/qovery/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # LabelsGroup (Resource)
//
// # Provides a Qovery labels group resource
//
// ## Import
//
// ```sh
// $ pulumi import qovery:index/labelsGroup:LabelsGroup my_qovery_labels_group "<labels_group_id>"
// ```
type LabelsGroup struct {
	pulumi.CustomResourceState

	// labels
	Labels LabelsGroupLabelArrayOutput `pulumi:"labels"`
	// name of the labels group
	Name pulumi.StringOutput `pulumi:"name"`
	// Id of the organization.
	OrganizationId pulumi.StringOutput `pulumi:"organizationId"`
}

// NewLabelsGroup registers a new resource with the given unique name, arguments, and options.
func NewLabelsGroup(ctx *pulumi.Context,
	name string, args *LabelsGroupArgs, opts ...pulumi.ResourceOption) (*LabelsGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Labels == nil {
		return nil, errors.New("invalid value for required argument 'Labels'")
	}
	if args.OrganizationId == nil {
		return nil, errors.New("invalid value for required argument 'OrganizationId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LabelsGroup
	err := ctx.RegisterResource("qovery:index/labelsGroup:LabelsGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLabelsGroup gets an existing LabelsGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLabelsGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LabelsGroupState, opts ...pulumi.ResourceOption) (*LabelsGroup, error) {
	var resource LabelsGroup
	err := ctx.ReadResource("qovery:index/labelsGroup:LabelsGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LabelsGroup resources.
type labelsGroupState struct {
	// labels
	Labels []LabelsGroupLabel `pulumi:"labels"`
	// name of the labels group
	Name *string `pulumi:"name"`
	// Id of the organization.
	OrganizationId *string `pulumi:"organizationId"`
}

type LabelsGroupState struct {
	// labels
	Labels LabelsGroupLabelArrayInput
	// name of the labels group
	Name pulumi.StringPtrInput
	// Id of the organization.
	OrganizationId pulumi.StringPtrInput
}

func (LabelsGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*labelsGroupState)(nil)).Elem()
}

type labelsGroupArgs struct {
	// labels
	Labels []LabelsGroupLabel `pulumi:"labels"`
	// name of the labels group
	Name *string `pulumi:"name"`
	// Id of the organization.
	OrganizationId string `pulumi:"organizationId"`
}

// The set of arguments for constructing a LabelsGroup resource.
type LabelsGroupArgs struct {
	// labels
	Labels LabelsGroupLabelArrayInput
	// name of the labels group
	Name pulumi.StringPtrInput
	// Id of the organization.
	OrganizationId pulumi.StringInput
}

func (LabelsGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*labelsGroupArgs)(nil)).Elem()
}

type LabelsGroupInput interface {
	pulumi.Input

	ToLabelsGroupOutput() LabelsGroupOutput
	ToLabelsGroupOutputWithContext(ctx context.Context) LabelsGroupOutput
}

func (*LabelsGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**LabelsGroup)(nil)).Elem()
}

func (i *LabelsGroup) ToLabelsGroupOutput() LabelsGroupOutput {
	return i.ToLabelsGroupOutputWithContext(context.Background())
}

func (i *LabelsGroup) ToLabelsGroupOutputWithContext(ctx context.Context) LabelsGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LabelsGroupOutput)
}

// LabelsGroupArrayInput is an input type that accepts LabelsGroupArray and LabelsGroupArrayOutput values.
// You can construct a concrete instance of `LabelsGroupArrayInput` via:
//
//	LabelsGroupArray{ LabelsGroupArgs{...} }
type LabelsGroupArrayInput interface {
	pulumi.Input

	ToLabelsGroupArrayOutput() LabelsGroupArrayOutput
	ToLabelsGroupArrayOutputWithContext(context.Context) LabelsGroupArrayOutput
}

type LabelsGroupArray []LabelsGroupInput

func (LabelsGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LabelsGroup)(nil)).Elem()
}

func (i LabelsGroupArray) ToLabelsGroupArrayOutput() LabelsGroupArrayOutput {
	return i.ToLabelsGroupArrayOutputWithContext(context.Background())
}

func (i LabelsGroupArray) ToLabelsGroupArrayOutputWithContext(ctx context.Context) LabelsGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LabelsGroupArrayOutput)
}

// LabelsGroupMapInput is an input type that accepts LabelsGroupMap and LabelsGroupMapOutput values.
// You can construct a concrete instance of `LabelsGroupMapInput` via:
//
//	LabelsGroupMap{ "key": LabelsGroupArgs{...} }
type LabelsGroupMapInput interface {
	pulumi.Input

	ToLabelsGroupMapOutput() LabelsGroupMapOutput
	ToLabelsGroupMapOutputWithContext(context.Context) LabelsGroupMapOutput
}

type LabelsGroupMap map[string]LabelsGroupInput

func (LabelsGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LabelsGroup)(nil)).Elem()
}

func (i LabelsGroupMap) ToLabelsGroupMapOutput() LabelsGroupMapOutput {
	return i.ToLabelsGroupMapOutputWithContext(context.Background())
}

func (i LabelsGroupMap) ToLabelsGroupMapOutputWithContext(ctx context.Context) LabelsGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LabelsGroupMapOutput)
}

type LabelsGroupOutput struct{ *pulumi.OutputState }

func (LabelsGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LabelsGroup)(nil)).Elem()
}

func (o LabelsGroupOutput) ToLabelsGroupOutput() LabelsGroupOutput {
	return o
}

func (o LabelsGroupOutput) ToLabelsGroupOutputWithContext(ctx context.Context) LabelsGroupOutput {
	return o
}

// labels
func (o LabelsGroupOutput) Labels() LabelsGroupLabelArrayOutput {
	return o.ApplyT(func(v *LabelsGroup) LabelsGroupLabelArrayOutput { return v.Labels }).(LabelsGroupLabelArrayOutput)
}

// name of the labels group
func (o LabelsGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LabelsGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Id of the organization.
func (o LabelsGroupOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *LabelsGroup) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

type LabelsGroupArrayOutput struct{ *pulumi.OutputState }

func (LabelsGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LabelsGroup)(nil)).Elem()
}

func (o LabelsGroupArrayOutput) ToLabelsGroupArrayOutput() LabelsGroupArrayOutput {
	return o
}

func (o LabelsGroupArrayOutput) ToLabelsGroupArrayOutputWithContext(ctx context.Context) LabelsGroupArrayOutput {
	return o
}

func (o LabelsGroupArrayOutput) Index(i pulumi.IntInput) LabelsGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LabelsGroup {
		return vs[0].([]*LabelsGroup)[vs[1].(int)]
	}).(LabelsGroupOutput)
}

type LabelsGroupMapOutput struct{ *pulumi.OutputState }

func (LabelsGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LabelsGroup)(nil)).Elem()
}

func (o LabelsGroupMapOutput) ToLabelsGroupMapOutput() LabelsGroupMapOutput {
	return o
}

func (o LabelsGroupMapOutput) ToLabelsGroupMapOutputWithContext(ctx context.Context) LabelsGroupMapOutput {
	return o
}

func (o LabelsGroupMapOutput) MapIndex(k pulumi.StringInput) LabelsGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LabelsGroup {
		return vs[0].(map[string]*LabelsGroup)[vs[1].(string)]
	}).(LabelsGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LabelsGroupInput)(nil)).Elem(), &LabelsGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*LabelsGroupArrayInput)(nil)).Elem(), LabelsGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LabelsGroupMapInput)(nil)).Elem(), LabelsGroupMap{})
	pulumi.RegisterOutputType(LabelsGroupOutput{})
	pulumi.RegisterOutputType(LabelsGroupArrayOutput{})
	pulumi.RegisterOutputType(LabelsGroupMapOutput{})
}
